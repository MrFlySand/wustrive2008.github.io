<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[wustrive's blog]]></title>
  <subtitle><![CDATA[好记性不如写博客]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="https://wustrive2008.github.io/"/>
  <updated>2016-12-31T15:32:07.000Z</updated>
  <id>https://wustrive2008.github.io/</id>
  
  <author>
    <name><![CDATA[wustrive]]></name>
    <email><![CDATA[wustrive_2008@126.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[2016年书单总结]]></title>
    <link href="https://wustrive2008.github.io/2016/12/31/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2016%E5%B9%B4%E4%B9%A6%E5%8D%95%E6%80%BB%E7%BB%93/"/>
    <id>https://wustrive2008.github.io/2016/12/31/读书笔记/2016年书单总结/</id>
    <published>2016-12-31T13:31:14.000Z</published>
    <updated>2016-12-31T15:32:07.000Z</updated>
    <content type="html"><![CDATA[<h3 id="2016年书单总结">2016年书单总结</h3><blockquote>
<blockquote>
<p>以下列出2016年看过书籍，后面的※号代表推荐程度，很多书还需要看第二遍。<br>内容简介来自豆瓣，每本书下面有豆瓣的链接</p>
</blockquote>
</blockquote>
<h4 id="人物传记类">人物传记类</h4><h5 id="《随遇而安》※※※※">《随遇而安》※※※※</h5><p>《随遇而安》这部作品是孟非对过往四十年岁月的动情回顾、从容讲述。童年重庆、少年南京，不同的文化对他影响深远。中学时代的严重偏科，黑暗得让他看不到未来。临时工的日子辛酸艰苦，却奠定了他往后的不平凡。<br>孟非从摄像、记者、编导、制片人、主持人的不同角色上一一走过。四十年，人生坎坷，从平凡到精彩，命运总在不经意间转折。顺应本心，淡定从容，坦然面对每一次改变。随遇而安，是很多人问起他的心路历程时，他给出的唯一答案。</p>
<p><a href="https://book.douban.com/subject/6847760/" target="_blank" rel="external">随遇而安</a></p>
<h5 id="《周鸿祎自诩》※※※※">《周鸿祎自诩》※※※※</h5><p>在很多方面，周鸿祎都是互联网领域的颠覆者。他重新定义了“微创新”，提出从细微之处着手，通过聚焦战略，以持续的创新，最终改变市场格局、为客户创造全新价值。他第一个提出了互联网免费安全的理念，也由此让奇虎360拥有了超过4亿的用户。<br>在《周鸿祎自述：我的互联网方法论》中，周鸿祎首次讲述了自己的互联网观、产品观和管理思想，厘清了互联网产品的本质特征和互联网时代的新趋势，列举了颠覆式创新在现实中的实践和应用。《周鸿祎自述：我的互联网方法论》首次解密360的产品秘籍和盈利模式，同时，针对目前传统企业的互联网转型焦虑，也提出了一套系统解决方案。</p>
<p><a href="https://book.douban.com/subject/25928983/" target="_blank" rel="external">周鸿祎自诩</a></p>
<h5 id="《蔡康永的说话之道》※※※※">《蔡康永的说话之道》※※※※</h5><p>《蔡康永的说话之道》是蔡康永的第一本实用书，在“说话”多年之后，首次尝试教人“说话”。本书开端康永哥便许下宏愿：这本书会令“本来已经很讨人喜欢的你，在未来变得更讨人喜欢”。《蔡康永的说话之道》包括40篇精彩短文，每篇都是让谈话变美的醍醐味，并配以熊宝绘制的令人喷饭的搞笑插画，如同蔡康永的主持风格一样犀利俏皮，饶有情趣。</p>
<p><a href="https://book.douban.com/subject/5317075/" target="_blank" rel="external">蔡康永的说话之道</a></p>
<h4 id="互联网，职业">互联网，职业</h4><h5 id="《创业维艰》※※※※※">《创业维艰》※※※※※</h5><p>本·霍洛维茨，硅谷顶级投资人，与网景之父马克·安德森联手合作18年，有着丰富的创业和管理经验。2009年创立风险投资公司A16Z，被外媒誉为“硅谷最牛的50个天使投资人”之一，先后在初期投资了Facebook、Twitter、Groupon、Skype，是诸多硅谷新贵的创业导师。<br>在《创业维艰》中，本·霍洛维茨从自己的创业经历讲起，以自己在硅谷近20余年的创业、管理和投资经验，对创业公司（尤其是互联网技术公司）的创立、经营、人才选拔、企业文化、销售、CEO与董事会的关系等方方面面，毫无保留地奉上自己的经验之谈。他还谈到了与比尔·坎贝尔、安迪·拉切列夫、迈克尔·奥维茨等硅谷顶级CEO和投资人的交往经历，从他们身上学到的宝贵经验，以及他和马克·安德森这对绝佳拍档为何能够一起奋斗18年还能合作得这么好。<br>大多数创业书所说的都是如何做正确的事，不把事情搞砸，而本·霍洛维茨还会告诉你：当事情已经搞砸时，你该怎么办。</p>
<p><a href="https://book.douban.com/subject/26306686/" target="_blank" rel="external">创业维艰</a></p>
<h5 id="《从0到1-开启商业与未来的秘密》※※※※※">《从0到1.开启商业与未来的秘密》※※※※※</h5><p>硅谷创投教父、PayPal创始人作品，斯坦福大学改变未来的一堂课，为世界创造价值的商业哲学。<br>在科技剧烈改变世界的今天，想要成功，你必须在一切发生之前研究结局。<br>你必须找到创新的独特方式，让未来不仅仅与众不同，而且更加美好。<br>从0到1，为自己创造无限的机会与价值！<br>Paypal创始人、Facebook第一位外部投资者彼得•蒂尔在本书中详细阐述了自己的创业历程与心得，包括如何避免竞争、如何进行垄断、如何发现新的市场。《从0到1》还将带你穿越哲学、历史、经济等多元领域，解读世界运行的脉络，分享商业与未来发展的逻辑，帮助你思考从0到1的秘密，在意想不到之处发现价值与机会。<br>揭开创新的秘密，进入彼得•蒂尔颠覆式的商业世界：<br>创新不是从1到N，而是从0到1<br>全球化并不全是进步<br>竞争扼杀创新<br>“产品会说话”是谎言<br>失败者才去竞争，创业者应当选择垄断<br>创业开局十分重要，“频繁试错”是错误的<br>没有科技公司可以仅靠品牌吃饭<br>初创公司要打造帮派文化</p>
<p><a href="https://book.douban.com/subject/26297606/" target="_blank" rel="external">从0到1.开启商业与未来的秘密</a></p>
<h5 id="《支付战争-互联网金融创世纪》※※※※※">《支付战争.互联网金融创世纪》※※※※※</h5><p>这是一个野心勃勃的创业计划，在线支付鼻祖PayPal试图创造一个“统治世界”的金融操作系统，并在全球成功推广一款颠覆式的互联网产品。<br>《支付战争》的作者是“PayPal黑帮”成员之一，他真实还原了这个伟大产品是如何诞生的，以及在后来的发展壮大之路上，如何应对融资紧张、突破增长瓶颈，在竞争者凶猛围剿与平台商霸王条款的夹击下，逆境求生，改变业务模式，最终完成IPO，并成功出售给竞争对手eBay的全过程。<br>PayPal充满韧性的年轻创业家们，在后来的商业之路上开创了硅谷投资界的新格局，打造了多家新创公司，其中有7家市值超过10亿美元，如领英（LinkedIn）、特斯拉（Tesla）、YouTube等。《支付战争》带领我们回到“PayPal黑帮”最初的战场：山寨产品不断涌现，赤字危机节节逼近，公司几经易主，重组后文化冲突尖锐，网络诈骗汹涌来袭，客服危机迫在眉睫，媒体质疑层出不穷，罢免埃隆•马斯克掀起血雨腥风……当全世界与它为敌，看PayPal如何接受残酷洗礼，浴火重生！</p>
<p><a href="https://book.douban.com/subject/26324497/" target="_blank" rel="external">支付战争.互联网金融创世纪</a></p>
<h5 id="《穿布鞋的马云》※※※※">《穿布鞋的马云》※※※※</h5><p>从1992年第一次创业到2014年阿里巴巴上市，唯一客观、真实整整22年马云创业史全面记录。<br>从最早的海博翻译社到如今全球市值最大的互联网公司，马云用了22年，他的创业过程所起到的示范效应与激励效应使每个创业者都为之疯狂，每个创业者都关心这个被称作外星人的企业 家到底具有怎 样的能力，阿里巴巴官方首次以出版《穿布鞋的马云》的方式，面对公众开放马云创业中重大时刻的关键决策过程，并对所有商业行为做出了结论式的回答，其大胆与真实的程度让人震惊，毫无回避的评述马云所有的创业细节与重大决策，包括错误的。<br>马云对于年轻人及后来的创业者来说有着无可取代的标杆地位，而马云也乐意分享自己对商业的思考来与年轻人共享。因此在本书内，马云本人另外授权，独家公开了与年轻人面对面的演讲视频，马云对年轻人创业的点评视频以及数十位行业大佬推荐的视频。<br>【编辑推荐】<br>1、每个人都要看一看马云<br>大事件：2014年9月16日，阿里巴巴上市。阿里巴巴估值2000亿美金，成为全球体量最大的互联网公司。马云成为全球视野里最伟大的中国创业者。<br>2、看马云，这一本书就够了<br>1）关键时刻，马云做了什么，为什么这么做<br>从1992年创立海博翻译社到2014年，创业22年，马云终成一代青年人的创业偶像。<br>马云的创业智慧，尤其是阿里巴巴关键时刻，马云所做的一切全在这里。<br>2）首次呈现马云创业智慧，不讲故事省时间学干货<br>不讲励志故事。《穿布鞋的马云》认真梳理阿里巴巴15年的历史，归纳出对创业者有益的27个节点：关于融资、关于团队、关于管理、关于谈判、关于失败、关于企业愿景、关于企业文化、关于战略、关于人才……节省创业者时间，一网打尽创业者遇到的一切问题。<br>3）最真实的马云，不神话不鸡血<br>目前市面上写马云的书，很多作者从未见过马云，写作时用的大多为“二传手”的资料或传闻，因此很容易神话马云。<br>本书作者王利芬，最熟悉马云的创业者，其创办的《赢在中国》是迄今为止国内最具影响力的创业节目。2007-2009年，马云连续三个赛季担任总决赛评委，并担任36进12和12进5的评委。2014年，马云继续担任《赢在中国蓝天碧水间》总决赛评委。<br>联合作者李翔，与马云相交十年，马云最信得过的媒体人。</p>
<p><a href="https://book.douban.com/subject/25975485/" target="_blank" rel="external">穿布鞋的马云</a></p>
<h5 id="《HTTP权威指南》※※※※※">《HTTP权威指南》※※※※※</h5><p>超文本转移协议（Hypertext Transfer Protocol，HTTP）是在万维网上进行通信时所使用的协议方案。HTTP有很多应用，但最著名的是用于web浏览器和web服务器之间的双工通信。<br>HTTP起初是一个简单的协议，因此你可能会认为关于这个协议没有太多好 说的。但现在，你手上拿着的是却一本两磅重 的书。如果你对我们怎么会写出一本650页 的关于HTTP的书感到奇怪的话，可以去看一下目录。本书不仅仅是一本HTTP首部的参考手册；它是一本名副其实的web结构圣经。<br>本书中，我们尝试着将HTTP中一些互相关联且常被误解的规则梳理清楚，并编写了一系列基于各种主题的章节，对HTTP各方面的特性进行了介绍。纵观全书，我们对HTTP“为什么”这样做进行了详细的解释，而不仅仅停留在它是“怎么做”的。而且，为了节省大家寻找参考文献的时间，我们还对很多HTTP应用程序正常工作所必须的、重要的非HTTP技术进行了介绍。在组织得便于使用的附录中，可以找到按照字母排序的首部参考（这些首部构成了最常见的HTTP文本的基础）。我们希望这种概念性的设计有助于读者对HTTP的使用。<br>本书是为所有希望理解HTTP以及Web底层结构的人编写的。软硬件工程师也可以将本书作为HTTP及相关web技术的条理清楚的参考书使用。系统架构师和网络管理员可以通过本书更好地了解如何设计、实现并管理复杂的网络架构。性能工程师和分析人员可以从高速缓存和性能优化的相关章节中获益。市场营销和咨询专家可以通过概念的介绍更好地理解web技术的前景。<br>本书对一些常见的误解进行了说明，推荐了“各种使用诀窍”，提供了便捷的参考资料，并且对枯燥且令人费解的标准规范进行了可读性很强的介绍。在这本书里，我们对Web正常工作所必须且互相关联的技术进行了详细的介绍。<br>本书是很多对因特网技术充满热情的人经过大量工作写成的。希望对你有所帮助。</p>
<p><a href="https://book.douban.com/subject/10746113/" target="_blank" rel="external">HTTP权威指南</a></p>
<h5 id="《深入理解java虚拟机》※※※※※">《深入理解java虚拟机》※※※※※</h5><p>《深入理解Java虚拟机:JVM高级特性与最佳实践》内容简介：作为一位Java程序员，你是否也曾经想深入理解Java虚拟机，但是却被它的复杂和深奥拒之门外？没关系，本书极尽化繁为简之妙，能带领你在轻松中领略Java虚拟机的奥秘。本书是近年来国内出版的唯一一本与Java虚拟机相关的专著，也是唯一一本同时从核心理论和实际运用这两个角度去探讨Java虚拟机的著作，不仅理论分析得透彻，而且书中包含的典型案例和最佳实践也极具现实指导意义。<br>全书共分为五大部分。第一部分从宏观的角度介绍了整个Java技术体系的过去、现在和未来，以及如何独立地编译一个OpenJDK7，这对理解后面的内容很有帮助。第二部分讲解了JVM的自动内存管理，包括虚拟机内存区域的划分原理以及各种内存溢出异常产生的原因；常见的垃圾收集算法以及垃圾收集器的特点和工作原理；常见的虚拟机的监控与调试工具的原理和使用方法。第三部分分析了虚拟机的执行子系统，包括Class的文件结构以及如何存储和访问Class中的数据；虚拟机的类创建机制以及类加载器的工作原理和它对虚拟机的意义；虚拟机字节码的执行引擎以及它在实行代码时涉及的内存结构。第四部分讲解了程序的编译与代码的优化，阐述了泛型、自动装箱拆箱、条件编译等语法糖的原理；讲解了虚拟机的热点探测方法、HotSpot的即时编译器、编译触发条件，以及如何从虚拟机外部观察和分析JIT编译的数据和结果。第五部分探讨了Java实现高效并发的原理，包括JVM内存模型的结构和操作；原子性、可见性和有序性在Java内存模型中的体现；先行发生原则的规则和使用；线程在Java语言中的实现原理；虚拟机实现高效并发所做的一系列锁优化措施。</p>
<p><a href="https://book.douban.com/subject/6522893/" target="_blank" rel="external">深入理解java虚拟机</a></p>
<h5 id="《Go语言编程》※※※※※">《Go语言编程》※※※※※</h5><p>这本书从整体的写作风格来说，会以介绍 Go 语言特性为主，示例则尽量采用作者平常的实践，而不是一个没有太大实际意义的语法示范样例。<br>本书作者背景极强，许式伟为原金山WPS首席架构师、曾是盛大创新院研究员，目前是国内Go语言实践圈子公认的Go语言专家。参与本书写作的几位作者都是实际用Go语言开发的项目的开发人员，有较强的实战经验。<br>本书以介绍Go语言特性为主，示例则尽量采用作者开发团队平常的实践，内容涉及内存管理（堆和栈）、错误处理、OOP、并发编程等关键话题。 这本书面向的读者是所有打算用Go语言的开发者，主要包括目前使用C、C++、Java、C#的开发人员，甚至一些Python、PHP开发人员也可能转为 Go 程序员。</p>
<p><a href="https://book.douban.com/subject/11577300/" target="_blank" rel="external">Go语言编程</a></p>
<h5 id="《精益创业》※※※※※">《精益创业》※※※※※</h5><p>《精益创业:新创企业的成长思维》内容简介：我们正处在一个空前的全球创业兴盛时代，但无数创业公司都黯然收场，以失败告终。精益创业代表了一种不断形成创新的新方法，它源于“精益生产”的理念，提倡企业进行“验证性学习”，先向市场推出极简的原型产品，然后在不断地试验和学习中，以最小的成本和有效的方式验证产品是否符合用户需求，灵活调整方向。如果产品不符合市场需求，最好能“快速地失败、廉价地失败”，而不要“昂贵地失败”；如果产品被用户认可也应该不断学习，挖掘用户需求，迭代优化产品。这一模式 不仅针对车库创业派，对于全球最大企业内部的新创业务也同样适用。<br>创业是在充满不确定性的情况下进行产品或服务创新。新创企业还不知道他们的产品应该是什么样的，他们的顾客在哪里。计划和预测只能基于长期、稳定的运营历史和相对静止的环境。而这些条件新创企业都不具备。有时候我们自己觉得产品会非常受欢迎，所以花费巨大精力，在各种细小的问题上进行打磨，结果，产品推到市场后，消费者很残酷地表示他们不需要这个东西。如果我们的生意本身不被市场需要，那么我们失败来的越快越好，这意味着我们耗费更少的资金和精力在错误的事情上。<br>埃里克将精益创业提炼为一个反馈循环：想法—开发—测量—认知—新的想法。根据这种模式，我们创业的第一步是把想法变为产品，而且这时开发的产品是精简的原型，投入最小的金钱和精力开发出体现核心价值的产品，不要在许多细枝末节上耗费过多精力。当极简功能的产品得到用户认可后，创业者需要把控局势，在不断的反馈和循环中测试产品，快速作出调整和改变，迭代优化产品，挖掘用户需求，达到爆发式增长。新创企业必须在消耗完启动资金之前，以最小的成本、在最短时间里找到有价值的认知。</p>
<p><a href="https://book.douban.com/subject/10945606/" target="_blank" rel="external">精益创业</a></p>
<h5 id="《参与感-小米口碑营销内部手册》※※※※">《参与感.小米口碑营销内部手册》※※※※</h5><p>当小米开发产品时，数十万消费者热情地出谋划策；当小米新品上线时，几分钟内，数百万消费者涌入网站参与抢购，数亿销售额瞬间完成；当小米要推广产品时，上千万消费者兴奋地奔走相告；当小米产品售出后，几千万消费者又积极地参与到产品的口碑传播和每周更新完善之中……<br>这是中国商业史上前所未有的奇观。消费者和品牌从未如此相互贴近，互动从未如此广泛深入。通过互联网，消费者扮演着小米的产品经理、测试工程师、口碑推荐人、梦想赞助商等各种角色，他们热情饱满地参与到一个品牌发展的各个细节当中。<br>小米现象的背后，是互联网时代人类信息组织结构的深层巨变，是小米公司对这一巨变的敏感觉察和精确把握。<br>作为小米联合创始人，本书作者黎万强，真诚有趣地向你讲述小米公司创业几年来的内部故事，从公司创立到产品开发，从产品设计到品牌建设，从日常运营到营销推广，从服务理念到公司理念，等等等等，通过一个个真实的小细节、小故事，将外界觉得不可思议的事情，清晰透彻地道出其中的逻辑必然，并慷慨地将其独创的“参与感三三法则”和盘托出。</p>
<p><a href="https://book.douban.com/subject/25942507/" target="_blank" rel="external">参与感.小米口碑营销内部手册</a></p>
<h5 id="《redis设计与实现》※※※※※">《redis设计与实现》※※※※※</h5><p>本书全面而完整地讲解了Redis的内部机制与实现方式，对Redis的大多数单机功能以及所有多机功能的实现原理进行了介绍，展示了这些功能的核心数据结构以及关键的算法思想,图示丰富，描述清晰，并给出大量参考信息。通过阅读本书，读者可以快速、有效地了解Redis的内部构造以及运作机制，更好、更高效地使用Redis。<br>本书主要分为四大部分。第一部分“数据结构与对象”介绍了Redis中的各种对象及其数据结构，并说明这些数据结构如何影响对象的功能和性能。第二部分“单机数据库的实现”对Redis实现单机数据库的方法进行了介绍，包括数据库、RDB持久化、AOF持久化、事件等。第三部分“多机数据库的实现”对Redis的Sentinel、复制、集群三个多机功能进行了介绍。第四部分“独立功能的实现”对Redis中各个相对独立的功能模块进行了介绍，涉及发布与订阅、事务、Lua脚本、排序、二进制位数组、慢查询日志、监视器等。本书作者专门维护了www.redisbook.com网站，提供带有详细注释的Redis源代码，以及本书相关的更新内容。</p>
<p><a href="https://book.douban.com/subject/25900156/" target="_blank" rel="external">redis设计与实现</a></p>
<h5 id="《MacTalk_人生元编程》※※※※※">《MacTalk 人生元编程》※※※※※</h5><p>《MacTalk·人生元编程》是一本随笔文集，主要内容来自作者的微信公众平台“MacTalk By 池建强”。本书撰写于2013年，书中时间线却不止于此。作者以一个70 后程序员的笔触，立于Mac 之上，讲述技术与人文的故事，有历史，有明天，有技术，有人生。70 多篇文章划分为六大主题：Mac、程序员与编程、科技与人文、人物、工具、职场。篇篇独立成文，可拆可合，随时阅读。<br>此外，作者还对原来散落在各篇文章中的Mac 技巧进行了统一的整理和规划，形成130 个Mac Tips，通过阅读这些技巧，读者既可以了解Mac，增长知识，又能够提高工作效率。<br>本书行文采用了一种技术和人生感悟相结合的风格，起于Mac 却不止Mac，文风幽默又能笔底见风雷。王小波说，“每一本书都应该有趣，对于一些书来说，有趣是它存在的理由；对于另一些书，有趣是它应该达到的标准”。本书就是一本达到了有趣标准的技术书，它不仅适合Mac 用户阅读，更值得所有技术人员随时翻阅。</p>
<p><a href="https://book.douban.com/subject/25826578/" target="_blank" rel="external">MacTalk 人生元编程</a></p>
<h5 id="《人工智能狂潮》※※※※">《人工智能狂潮》※※※※</h5><p>•到底什么是人工智能？它等于机器人吗？<br>•人工智能能做什么工作？它真的能取代我们吗？<br>•独家揭秘人工智能50年发展历程的三次爆发：第一次：运算能力爆发；第二次：知识能力爆发；第三次：学习能力爆发。<br>•重大变革“深度学习”技术终于出现，犹如一场地震，让第三次浪潮进化为“狂潮”——导致真正意义上的人工“智能”的诞生！<br>•在这个人工智能爆炸发展的时代，国家与各行业、产业如何取得先机、掌握未来！</p>
<p><a href="https://book.douban.com/subject/26698202/" target="_blank" rel="external">人工智能狂潮</a></p>
<h4 id="技能生活">技能生活</h4><h5 id="《如何高效学习》※※※※※">《如何高效学习》※※※※※</h5><p>一位因为快速学习而成名的神奇小子，他应用自己发明的学习方法，完成了10天搞定线性代数，1年学习4年MIT课程的“不可能任务”。本书就是对他学习方法的全面介绍，其中包括整体性学习策略的核心思想和具体技术，详细介绍了快速阅读法、流笔记法、比喻法、内在化等七大方法，并为高效学习提供了从生活到时间管理的整体解决方案。跟随作者，你也将成为高效学习的超级学霸。</p>
<p><a href="https://book.douban.com/subject/25783654/" target="_blank" rel="external">如何高效学习</a></p>
<h5 id="《罗辑思维：成大事者不纠结》※※※">《罗辑思维：成大事者不纠结》※※※</h5><p>我们从《罗辑思维》众多节目中,精选出如下典型案例：<br>活在妄念中的张廷玉，一个公务员的海市蜃楼；<br>专注当下的曾国藩，成大事者不纠结；<br>妄图恢复拿破仑一世光荣的拿破仑三世，别被过去绑架；<br>作为读书人的卢梭，换个姿势有新活法；<br>英明伟大到一事无成，死守正确不敢犯错的loser嘉庆；<br>不沉浸在于过去恩怨，不跟未来较劲，不被人际关系绑定的李鸿章，成为迷茫时代的明白人；<br>少谈些主义，多研究些问题的胡适，孤独而独立地活在这个世界上<br>……<br>每一个时代都有迷茫，每一代人都在寻求出路。迷茫时代，怎么当个明白人？</p>
<p><a href="https://book.douban.com/subject/26333850/" target="_blank" rel="external">罗辑思维：成大事者不纠结</a></p>
<h5 id="《如何阅读一本书》※※※※※">《如何阅读一本书》※※※※※</h5><p>每本书的封面之下都有一套自己的骨架，作为一个分析阅读的读者，责任就是要找出这个骨架。一本书出现在面前时，肌肉包着骨头，衣服包裹着肌肉，可说是盛装而来。读者用不着揭开它的外衣或是撕去它的肌肉来得到在柔软表皮下的那套骨架，但是一定要用一双X光般的透视眼来看这本书，因为那是了解一本书、掌握其骨架的基础。<br>《如何阅读一本书》初版于1940年，1972年大幅增订改写为新版。不懂阅读的人，初探阅读的人，读这本书可以少走冤枉路。对阅读有所体会的人，读这本书可以有更深的印证和领悟。</p>
<p><a href="https://book.douban.com/subject/1013208/" target="_blank" rel="external">如何阅读一本书</a></p>
<h5 id="《学会提问》※※※※※">《学会提问》※※※※※</h5><p>本书作者应用批判性思维领域的最新研究成果，列举科学研究和日常生活中的大量实例，教授人们富有理性、逻辑性和批判性地提出、思考、判断和解决问题的方法。<br>　　全书立论严谨，深入浅出，贴近实际，指导性强，深受广大读者的欢迎，在美国被誉为指导批判性思维“最成功的”书籍之一。至今已出至第七版。</p>
<p><a href="https://book.douban.com/subject/1504957/" target="_blank" rel="external">学会提问</a></p>
<h5 id="《上帝掷骰子吗》※※※※※">《上帝掷骰子吗》※※※※※</h5><p>《上帝掷骰子吗》这本书是关于量子论的故事。量子论是一个极为奇妙的理论：从物理角度来说，它在科学家中间引起了最为激烈的争议和关注；从现实角度来说，它给我们的社会带来了无与伦比的变化和进步；从科学史角度来说，也几乎没有哪段历史比量子论的创立得到了更为彻底的研究。然而不可思议的是，它的基本观点和假说至今没有渗透到大众的意识中去，这无疑又给它增添了一道神秘的光环。<br>这本书带读者做一次量子之旅，从神话时代出发，沿着量子发展的道路，亲身去经历科学史上的乌云和暴雨，追逐流星的辉光，穿越重重迷雾和险滩，和最伟大的物理学家们并肩作战。除了回顾基本的历史背景，还将向着未来探险，去逐一摸索量子论面前的不同道路，闯入人迹罕至的未知境地，和先行者们一起开疆扩土。让人惊叹的，不仅仅是沿途那令人眼花缭乱的绚丽风景，更来自于人内心深处的思索和启示——那是科学深植在每个人心中不可抗拒的魅力。<br>这本书适合任何有中学基本物理概念的读者。</p>
<p><a href="https://book.douban.com/subject/1467022/" target="_blank" rel="external">上帝掷骰子吗</a></p>
<h4 id="文学">文学</h4><h5 id="《人类简史》※※※※※">《人类简史》※※※※※</h5><p>《人类简史：从动物到上帝》是以色列新锐历史学家的一部重磅作品。从十万年前有生命迹象开始到21世纪资本、科技交织的人类发展史。十万年前，地球上至少有六个人种，为何今天却只剩下了我们自己？我们曾经只是非洲角落一个毫不起眼的族群，对地球上生态的影响力和萤火虫、猩猩或者水母相差无几。为何我们能登上生物链的顶端，最终成为地球的主宰？<br>从认知革命、农业革命到科学革命，我们真的了解自己吗？我们过得更加快乐吗？我们知道金钱和宗教从何而来，为何产生吗？人类创建的帝国为何一个个衰亡又兴起？为什么地球上几乎每一个社会都有男尊女卑的观念？为何一神教成为最为广泛接受的宗教？科学和资本主义如何成为现代社会最重要的信条？理清影响人类发展的重大脉络，挖掘人类文化、宗教、法律、国家、信贷等产生的根源。这是一部宏大的人类简史，更见微知著、以小写大，让人类重新审视自己。</p>
<p><a href="https://book.douban.com/subject/25985021/" target="_blank" rel="external">人类简史</a></p>
<h5 id="《解忧杂货店》※※※※">《解忧杂货店》※※※※</h5><p>现代人内心流失的东西，这家杂货店能帮你找回——<br>僻静的街道旁有一家杂货店，只要写下烦恼投进卷帘门的投信口，第二天就会在店后的牛奶箱里得到回答。<br>因男友身患绝症，年轻女孩静子在爱情与梦想间徘徊；克郎为了音乐梦想离家漂泊，却在现实中寸步难行；少年浩介面临家庭巨变，挣扎在亲情与未来的迷茫中……<br>他们将困惑写成信投进杂货店，随即奇妙的事情竟不断发生。<br>生命中的一次偶然交会，将如何演绎出截然不同的人生？<br>如今回顾写作过程，我发现自己始终在思考一个问题：站在人生的岔路口，人究竟应该怎么做？我希望读者能在掩卷时喃喃自语：我从未读过这样的小说。——东野圭吾</p>
<p><a href="https://book.douban.com/subject/25862578/" target="_blank" rel="external">解忧杂货店</a></p>
<h5 id="《白夜行》※※※※※">《白夜行》※※※※※</h5><p>“只希望能手牵手在太阳下散步”，这个象征故事内核的绝望念想，有如一个美丽的幌子，随着无数凌乱、压抑、悲凉的故事片段像纪录片一样一一还原：没有痴痴相思，没有海枯石烂，只剩下一个冰冷绝望的诡计，最后一丝温情也被完全抛弃，万千读者在一曲救赎罪恶的凄苦爱情中悲切动容……</p>
<p><a href="https://book.douban.com/subject/3259440/" target="_blank" rel="external">白夜行</a></p>
<h5 id="《趁年轻-折腾吧》※※※">《趁年轻.折腾吧》※※※</h5><p>《趁年轻,折腾吧》内容简介：为什么有的人刚毕业OFFER就一大堆？为什么有的人毕业几年后年薪几十万，有的人却还在“啃老”？职场需要什么样的人？人际关系该如何处理？要不要去创业……如果你是个年轻人，你正在烦恼很多事，那么《趁年轻,折腾吧》就是你需要的。<br>“年轻的时候两样东西很重要，第一要折腾，第二脸皮厚。”从吃饭、喝酒、送礼等社交细节，到职业规划、创业、价值观等人生大事，袁岳先生以最诚挚的态度，最生动的实例，引导年轻人从青涩走向成熟，活出精彩的人生!再不尝试就老了，趁年轻，折腾吧！</p>
<p><a href="https://book.douban.com/subject/20434432/" target="_blank" rel="external">趁年轻.折腾吧</a></p>
<h5 id="《汤姆叔叔的小屋》※※※※※">《汤姆叔叔的小屋》※※※※※</h5><p>《汤姆叔叔的小屋》出版至今已有一百五十多年了。该书在1852年首次以单行本出版，立即获得巨大成功，第一周就销售一万册，当年就印行一百多次、三十五万册，这在19世纪中叶可是个天文数字了。该书在国外也大受欢迎，在英国当时有四十家出版社出版该书，销售量达到了一百五十多万册。该书受到世界各国读者的热烈欢迎，也受到著名作家如托尔斯泰、屠格涅夫、乔治·桑、海涅、狄更斯等的高度赞扬。它曾被改编成戏剧、音乐剧等在美国各地舞台上演多年，现已被译成世界上四十多种文字。其魅力经久不衰，时间充分证明了这是一本经典名著。</p>
<p><a href="https://book.douban.com/subject/1430530/" target="_blank" rel="external">汤姆叔叔的小屋</a></p>
<h5 id="《1Q84》※※※※※">《1Q84》※※※※※</h5><p>“不管喜欢还是不喜欢，目前我已经置身于这‘1Q84年’。我熟悉的那个1984年已经无影无踪，今年是1Q84年。空气变了，风景变了。我必须尽快适应这个带着问号的世界。像被放进陌生森林中的动物一样，为了生存下去，得尽快了解并顺应这里的规则。”<br>《1Q84》写一对十岁时相遇后便各奔东西的三十岁男女，相互寻觅对方的故事，并将这个简单故事变成复杂的长篇。我想将这个时代所有世态立体地写出，成为我独有的“综合小说”。超越纯文学这一类型，采取多种尝试。在当今时代的空气中嵌入人类的生命。——村上春树</p>
<p><a href="https://book.douban.com/subject/4885241/" target="_blank" rel="external">1Q84</a></p>
<h5 id="《北京折叠》※※※※">《北京折叠》※※※※</h5><p>大地的一面是第一空间，五百万人口，生存时间是从清晨六点到第二天清晨六点。空间休眠，大地翻转。翻转后的另一面是第二空间和第三空间。第二空间生活着两千五百万人口，从次日清晨六点到夜晚十点，第三空间生活着五千万人，从十点到清晨六点，然后回到第一空间。时间经过了精心规划和最优分配，小心翼翼隔离，五百万人享用二十四小时，七千五百万人享用另外二十四小时。”在第三空间，垃圾工老刀一顿早饭要花一百块，老刀一个月工资一万块，而他希望能让自己捡来的孩子糖糖，上一月一万五学费的幼儿园，为了这个花费，他宁愿冒险去其他空间送信。</p>
<h5 id="《把时间当作朋友》※※※※">《把时间当作朋友》※※※※</h5><p>这本书从心智成长的角度来谈时间管理，指出时间管理是成功的关键所在。作者引述自己从事的职业中所遇到的事例，告诉我们：如何打开心智，如何运用心智来和时间做朋友，如何理解时间管理的意义，在时间管理上取得突破，进而用心智开启自己的人生成功之旅。</p>
<p><a href="https://book.douban.com/subject/3609132/" target="_blank" rel="external">把时间当作朋友</a></p>
<h5 id="《岛上书店》※※※">《岛上书店》※※※</h5><p>岛上书店是间维多利亚风格的小屋，门廊上挂着褪色的招牌，上面写着： 没有谁是一座孤岛，每本书都是一个世界 A．J．费克里，人近中年，在一座与世隔绝的小岛上，经营一家书店。 命运从未眷顾过他，爱妻去世，书店危机，就连唯一值钱的宝贝也遭窃。他的人生陷入僵局，他的内心沦为荒岛。 就在此时，一个神秘的包袱出现在书店中，意外地拯救了陷于孤独绝境中的A．J．，成为了连接他和小姨子伊斯梅、警长兰比亚斯、出版社女业务员阿米莉娅之间的纽带，为他的生活带来了转机。 小岛上的几个生命紧紧相依，走出了人生的困境，而所有对书和生活的热爱都周而复始，愈加汹涌。</p>
<p><a href="https://book.douban.com/subject/26340138/" target="_blank" rel="external">岛上书店</a></p>
<h5 id="《皮囊》※※※※">《皮囊》※※※※</h5><p>一部有着小说阅读质感的散文集，也是一本“认心又认人”的书。<br>作者蔡崇达，本着对故乡亲人的情感，用一种客观、细致、冷静的方式，讲述了一系列刻在骨肉间故事。一个福建渔业小镇上的风土人情和时代变迁，在这些温情而又残酷的故事中一一体现。用《皮囊》这个具有指向本质意味的书名，来 表达作者对父母、家乡的缅怀，对朋友命运的关切，同时也回答那些我们始终要回答的问题。<br>书中收录有《皮囊》《母亲的房子》《残疾》《重症病房里的圣诞节》《我的神明朋友》《张美丽》《阿小和阿小》《天才文展》《厚朴》《海是藏不住的》《愿每个城市都不被阉割》《我们始终要回答的问题》《回家》《火车伊要开往叨位》等14篇作品。<br>其中《皮囊》一文中的阿太，一位99岁的老太太，没文化，是个神婆。她却教给作者具有启示力量的生活态度：“肉体是拿来用的，不是拿来伺候的。”<br>《母亲的房子》里，母亲想要建一座房子，一座四楼的房子，因为“这附近没有人建到四楼，我们建到了，就真的站起来了”。为了房子，她做苦工，捡菜叶，拒绝所有人的同情，哪怕明知这座房子不久后会被拆毁，只是为了“这一辈子，都有家可归”。<br>而《残疾》里的父亲，他离家、归来，他病了，他挣扎着，全力争取尊严，然后失败，退生为孩童，最后离去。父亲被照亮了。被怀着厌弃、爱、不忍和怜惜和挂念，艰难地照亮。就在这个过程中，作者长大成人。自70后起，在文学书写中，父亲形象就失踪了。而蔡崇达的书里，这个形象重新出现了。<br>这部特别的“新人新作”，由韩寒监制，上市之初即广受好评。莫言、白岩松、阿来、阎连科等评价为当下写作中的一个惊喜。或许《皮囊》真是新生的＂非虚构＂写作林地里，兀自展现的一片完全与众不同、可读可思、独具样貌的林木。</p>
<p><a href="https://book.douban.com/subject/26278687/" target="_blank" rel="external">皮囊</a></p>
<h5 id="《沉默的大多数》※※※※※">《沉默的大多数》※※※※※</h5><p>我对自己的要求很低：我活在世上，无非想要明白些道理，遇见些有趣的事。倘能如我所愿，我的一生就算成功。为此也要去论是非，否则道理不给你明白，有趣的事也不让你遇到。我开始得太晚了，很可能做不成什么，但我总得申明我的态度，所以就有了这本书——为我自己，也代表沉默的大多数。<br>——王小波</p>
<p><a href="https://book.douban.com/subject/1776683/" target="_blank" rel="external">沉默的大多数</a></p>
<h5 id="《黑暗的左手》※※※※">《黑暗的左手》※※※※</h5><p>冬星，寒冷，偏僻，远离人类活动范围，但人类的一支仍旧在这里扎下根来，生长繁衍。<br>终于有一天，人类联盟发现了这一支兄弟。他们伸出了手：回来吧，我们的兄弟。<br>机动使，联盟与未知星球第一次沟通的使者，代表着人类联盟善意的手。担任这一职位的人必须坚强勇敢，因为他是孤身一人，深入未知；他必须睿智机敏，以理解当地的政治与人情；最重要的是，他必须胸怀宽广，能够包容当地种种奇异的观念和风俗。<br>冬星是对以上种种素质的最大考验，因为它是人类所知的唯 一 一 个单性繁殖社会。<br>闻所未闻的风俗、变幻莫测的政局、国家的冲突，加上猜疑、背叛和出卖，阴暗的冬星似乎将永远游离在人类联盟之外。<br>但黑暗中伸出了一只手。它是要与机动使相握，还是排斥来自远方的善意？它代表着光明，还是黑暗？<br>光明是黑暗的左手，黑暗是光明的右手。<br>——冬星诗人的作品</p>
<p><a href="https://book.douban.com/subject/3816883/" target="_blank" rel="external">黑暗的左手</a></p>
<h5 id="《放学后》※※※※※">《放学后》※※※※※</h5><p>荣获第31届江户川乱步奖<br>草长莺飞的青春，忽如琉璃般生生粉碎。<br>当美丽、纯粹、真实的事物被破坏，重视的回忆和梦想被摧毁时，恨意便开始萌发，恣意蔓延开来……<br>在这所清华女中，有人喜欢我，有人恨我。<br>星期六早晨，车站月台上，有人突然从旁撞来，我险些跌落铁轨；<br>星期一放学后，我游完泳进入淋浴间冲洗，差点中机关触电身亡；<br>星期二放学后，一盆天竺葵从教学楼三层坠落，直直砸向我头顶；<br>星期四放学后，一位老师被毒死在我常用的更衣室，他是替我而死？<br>悚然之间才明白，我似已无路可逃……</p>
<p><a href="https://book.douban.com/subject/4074636/" target="_blank" rel="external">放学后</a></p>
<h5 id="《恶意》※※※※※">《恶意》※※※※※</h5><p>《恶意》为加贺探案集第四案。<br>《恶意》被媒体和读者列为东野圭吾的巅峰之作，与《白夜行》同享光辉与荣耀，这两部作品恰似两生花，《白夜行》中的爱情极度炽烈，令人粉身碎骨；《恶意》中的怨恨则无比深沉，令人万劫不复。<br>畅销书作家在出国的前一晚于家中被杀。凶手很快落网，对罪行供认不讳……小说甫一开始，案件便告侦结。面对如此“僵局”，书中究竟藏有何等魔力，让万千读者如痴如醉？<br>东野圭吾借《恶意》挑战悬疑小说写作极限，甫一出版，即迷倒了无数读者，征服了各国评论家。韩国媒体评论：“一直以为，知道了凶手是谁，推理小说也就结束了，《恶意》彻底颠覆了这一观念。”日本媒体评论：“惊世骇俗的作案动机，让人根本不敢转身。”<br>东野圭吾最得意的作品，将读者从头到尾彻底欺骗。 ——《读卖新闻》<br>读完《恶意》，才算真正认识东野圭吾。 ——日本亚马逊<br>一直以为，知道了凶手是谁，推理小说也就结束了，《恶意》彻底颠覆了这一观念。 ——Yes24（韩）<br>作者一贯精心的作案手法与惊世骇俗的作案动机，让人在充分享受阅读乐趣的时候根本不能转身，不愧为天才作家的杰作。 ——《书の杂志》（日）<br>小说早早就将凶手置人眼前，却以大量篇幅探讨作案动机，实在扣人心弦。 ——北上次郎（文学评论家）<br>这是一本结构相当完整的一流杰作，视点、逻辑、伏笔、动机、意外性、公平性安排都几近满分。 ——蓝霄（推理小说家）</p>
<p><a href="https://book.douban.com/subject/10554309/" target="_blank" rel="external">恶意</a></p>
<h5 id="《幻夜》※※※※">《幻夜》※※※※</h5><p>《白夜行》姊妹篇 2004年入围第131届直木奖<br>是什么样的过去，造就了她的魔性？<br>是什么样的幻影，操纵着他的灵魂？<br>我们只能走在幻夜的路上，即使四周明亮有如白昼，那也仅是假象。<br>就算与你共度的每个夜晚都是幻夜，我也愿为你化身为影，至死不渝！<br>地震之后，宛如人间炼狱的断壁残垣中，水原雅也借机杀了舅舅，却被一神秘女子当场目击，她答应为水原终生保守秘密。<br>他们相偕前往东京，然而等待他们的，却是从此再无一丝太阳的无边幻夜：凡是接近过她的人，都遭逢厄运；凡是触碰过她过去的人，都不知所踪……<br>她，到底是谁？</p>
<p><a href="https://book.douban.com/subject/4009552/" target="_blank" rel="external">幻夜</a></p>
<h4 id="哲学">哲学</h4><h5 id="《苦才是人生》※※※※">《苦才是人生》※※※※</h5><p>《苦才是人生:索达吉堪布教你守住》内容简介：人生本来就是活也苦，死也苦，有钱没钱都痛苦，但很多人就不明白这一点，遇到一点违缘就怨天尤人：“老天太不公平了！为什么我这么倒霉，所有的不幸全落到了我的头上？”却不知轮回的本性即是如此。这是一本帮我们解脱生老病死之苦的珍宝之书，里面讲了很多藏传佛教中解决各种痛苦的不同方法，只要我们持之以恒地经常串习，所有困难都会迎刃而解，消除痛苦轻而易举。无论是事业、家庭、爱情，全都变得一帆风顺。把它请回家，就好像与佛陀朝夕相处，一呼一吸都得到了加持，不仅今生拥有不可思议的好运，而且后世也会得到一份幸福的保险。</p>
<p><a href="https://book.douban.com/subject/10801462/" target="_blank" rel="external">苦才是人生</a></p>
<h5 id="《天才在左_疯子在右》※※※※">《天才在左 疯子在右》※※※※</h5><p>本书以访谈录的形式记载了生活在另一个角落的人群（精神病患者、心理障碍者等边缘人）深刻、视角独特的所思所想，让人们可以了解到疯子抑或天才真正的内心世界。此书是国内第一本具有人文情怀的精神病患谈访录。内容涉及生理学、心理学、佛学、宗教、量子物理、符号学以及玛雅文明和预言等众多领域。</p>
<p><a href="https://book.douban.com/subject/4242172/" target="_blank" rel="external">天才在左 疯子在右</a></p>
<h5 id="《佛祖都说了些什么?》※※※※">《佛祖都说了些什么?》※※※※</h5><p>《佛祖都说了些什么》用轻松易懂的写法，介绍了汉传佛教的历史。六道轮回是否存在？罗汉和菩萨谁的级别更高？坏人到庙里捐钱能否获得福报？为什么有的佛经像绕口令？……所有和佛学相关的疑问，这里都有解答。所有对佛教模糊的概念，这里都会进行清晰地分辨。对佛学一窍不通的人，也能轻松地看懂。</p>
<p><a href="https://book.douban.com/subject/25928708/" target="_blank" rel="external">佛祖都说了些什么?</a></p>
<h5 id="《哲学家们都干了些什么？》※※※※※">《哲学家们都干了些什么？》※※※※※</h5><p>《哲学家们都干了些什么?》内容简介：这是一本有趣的哲学简明史，也是人类最厉害的天才们自我折磨的历史。哲学家们只想在思考中寻找终极真理，但在他们的争吵中，世界却意外地被改变。现在，就让我们跟随作者的笔触，走进这些天才们的精神世界，做一次轻松幽默的哲学之旅吧。<br>从苏格拉底到笛卡尔，从休谟到康德，两千多年的哲学史，一代代哲学家不断思考，并对我们的世界做出形形色色的阐释，而哲学却并没有所谓的终极真理。那么，哲学家们都干了些什么，他们在重复没有意义的活动吗？显然不是。<br>这本《哲学家们都干了些什么?》从哲学家们庸常或天才的生活轨迹入手，为我们呈现了绝大多数人惰于思考却不得不一直面对的问题：<br>人生的意义是什么？<br>我如何才能获得最大的幸福？<br>哲学家们的探索过程与他们自身的行为相映成趣，在哲学家们享受纯粹“思维的乐趣”的同时，也为我们充分展现了哲学的真正旨趣所在。<br>适用于：哲学爱好者，对哲学史有浓厚兴趣的各年龄、各阶层读者。</p>
<p><a href="https://book.douban.com/subject/6425061/" target="_blank" rel="external">哲学家们都干了些什么？</a></p>
<h5 id="《哲学的慰藉》※※※※※">《哲学的慰藉》※※※※※</h5><p>不受欢迎、缺钱、遭遇挫折、被瞧不起、心碎、困顿的哲学心灵良方，六个哲学家的智能解决六种人生问题！<br>英伦才子艾伦・德波顿了解现实人生的苦难，深深体会到这些苦难引起的伤痛；他认为哲学不应只是躲在象牙塔中的文字游戏，而是帮助人们解决心灵伤痛的良方。因此，他回到伟大哲学家身上，探索这些哲学家的智能，为我们提供舒缓现实生活郁闷的慰藉。<br>针对六个不同的人生问题──不受欢迎、缺钱、遭遇挫折、被认为有缺陷、心碎、困顿──德波顿分别向苏格拉底、伊比鸠鲁、塞内卡、蒙田、叔本华、尼采这六位哲学家取经，希望这些哲学家的个人体验与思想学说能够在我们饱受痛苦时，舒缓我们的症状，甚至根治我们的问题。</p>
<p><a href="https://book.douban.com/subject/1045201/" target="_blank" rel="external">哲学的慰藉</a></p>
<h4 id="心理学">心理学</h4><h5 id="《社会性动物》※※※※※">《社会性动物》※※※※※</h5><p>《社会性动物》是“美国社会心理学的《圣经》”（Revue des Questions Scientifiques的评价），“仍然是最好的……是一部杰作”（Contemporary Psychology的评价）。本书从1972年出版第一版以来，在世界范围内畅销数千万册，是社会心理学领域内最具影响的著作。</p>
<p><a href="https://book.douban.com/subject/2328458/" target="_blank" rel="external">社会性动物</a></p>
<h5 id="《乌合之众》※※※※">《乌合之众》※※※※</h5><p>古斯塔夫・勒庞 Gustave Le Bon(1841-1931) 法国著名社会心理学家。他自1894年始，写下一系列社会心理学著作，以本书最为著名；在社会心理学领域已有的著作中，最有影响的，也是这本并不很厚的《乌合之众》。古斯塔夫・勒庞在他在书中极为精致地描述了集体心态，对人们理解集体行为的作用以及对社会心理学的思考发挥了巨大影响。《乌合之众—大众心理研究》在西方已印至第29版，其观点新颖，语言生动，是群体行为的研究者不可不读的佳作。</p>
<p><a href="https://book.douban.com/subject/1012611/" target="_blank" rel="external">乌合之众</a></p>
<h5 id="《59秒》※※※">《59秒》※※※</h5><p>59秒》为你揭晓：为什么偶尔让自己出个小丑，会使你变得更讨人喜欢？为什么面试时先摆出弱点，就很有可能说服别人给你一份工作？为什么在钱包里放婴儿的照片，钱包丢失后被送回来的几率高达35％？为什么通过手臂的轻轻触碰就可以吸引异性？为什么电子邮件可以明显降低你受骗的可能性？为什么用牙齿咬住一支铅笔就能让你感觉更快乐？为什么越表扬孩子越不努力，越禁止做的事情孩子越想做？为什么只要想象一下健身房就能让自己保持身材？</p>
<p><a href="https://book.douban.com/subject/4187225/" target="_blank" rel="external">59秒</a></p>
<h5 id="《洗脑术》※※※※">《洗脑术》※※※※</h5><p>这是一部让你变得更加聪明的书，它是一场头脑风暴，注定改变你的思维逻辑。<br>作者结合15年经验5万份资料3000次实验调查，从心理学上解读世界各隐秘部门、知名的领导人物都是通过什么样的手段、理念与程序把自己变成一个宗教，在跟不同的角色合作时都能有逻辑地说服对方、说服一个团队甚至说服一个国家，这里面到底隐藏着怎样的秘密。<br>同时，作者让你从本质上全面了解洗脑真相，让你能够从根源上学会区分：什么样的洗脑是一种激励，什么样的洗脑是个美妙的陷阱，作为我们个人如何获取“洗脑术”里的正能量，并巧妙运用到人际沟通、高端谈判、公关危机、品牌营销、企业管理、情感对话等日常生活的方方面面！</p>
<p><a href="https://book.douban.com/subject/20616993/" target="_blank" rel="external">洗脑术</a></p>
<h5 id="《潜意识的力量》※※※※">《潜意识的力量》※※※※</h5><p>潜意识深处的图景，塑造了现在的你。<br>1963年，潜意识心理学权威、潜意识成功学创立者约瑟夫•墨菲博士出版了《潜意识的力量》一书。他鼓励人们挖掘自己内心深处的潜意识力量，达到心想事成的境界，实现自己的梦想人生。这场“潜意识的力量”运动奠定了墨菲博士人类潜能运动灵魂人物的地位。<br>半个世纪以来，这一理念影响了美国好几个世代的励志作家与演说家，并成为了《秘密》、《吸引力法则》等书的思想源头。作为影响人类进步的50部自励经典之一，这本书改变了数百万人的思考方式。<br>在书中，墨菲博士以科学的态度阐明了潜意识的存在，并列举了大量来自生活的实例，以说明潜意识的影响力。同时，他还向我们介绍了一些简单而有效的的练习方式，通过这些练习，我们将学会——<br>如何吸引丰盛的财富；如何获得事业的成功；如何建立和谐的人际关系；如何经营美满的婚姻家庭；如何战胜内心的恐惧；如何在思想上永葆青春；如何追寻幸福的人生……<br>此版本是唯一一个在“墨菲信托”——墨菲博士著作的正式托管机构——的指导下，经其授权并出版的修订版本。</p>
<p><a href="https://book.douban.com/subject/4159343/" target="_blank" rel="external">潜意识的力量</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="2016年书单总结">2016年书单总结</h3><blockquote>
<blockquote>
<p>以下列出2016年看过书籍，后面的※号代表推荐程度，很多书还需要看第二遍。<br>内容简介来自豆瓣，每本书下面有豆瓣的链接</p>
</blockquote]]>
    </summary>
    
      <category term="读书笔记" scheme="https://wustrive2008.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="书单" scheme="https://wustrive2008.github.io/tags/%E4%B9%A6%E5%8D%95/"/>
    
      <category term="文学" scheme="https://wustrive2008.github.io/tags/%E6%96%87%E5%AD%A6/"/>
    
      <category term="创业" scheme="https://wustrive2008.github.io/tags/%E5%88%9B%E4%B8%9A/"/>
    
      <category term="读书笔记" scheme="https://wustrive2008.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[logback详解]]></title>
    <link href="https://wustrive2008.github.io/2016/12/30/java/logback%E8%AF%A6%E8%A7%A3/"/>
    <id>https://wustrive2008.github.io/2016/12/30/java/logback详解/</id>
    <published>2016-12-30T13:50:25.000Z</published>
    <updated>2016-12-31T04:00:44.000Z</updated>
    <content type="html"><![CDATA[<h3 id="logback详解">logback详解</h3><blockquote>
<blockquote>
<p>说明：下面内容从网上搜集而来</p>
</blockquote>
</blockquote>
<h4 id="与log4j对比">与log4j对比</h4><ul>
<li>更快的执行速度： 基于我们先前在log4j上的工作，logback 重写了内部的实现，在某些特定的场景上面，甚至可以比之前的速度快上10倍。在保证logback的组件更加快速的同时，同时所需的内存更加少。</li>
<li>logback-classic 非常自然的实现了SLF4J：ogback-classic中的longging类自然的实现了SLF4J。当你使用 logback-classic作为底层实现时，涉及到LF4J日记系统的问题你完全不需要考虑。更进一步来说，由于 logback-classic强烈建议使用SLF4J作为客户端日记系统实现，如果需要切换到log4j或者其他，你只需要替换一个jar包即可，不需要去改变那些通过SLF4J API 实现的代码。这可以大大减少更换日记系统的工作量。</li>
<li>自动重新载入配置文件：Logback-classic可以在配置文件被修改后，自动重新载入。这个扫描过程很快，无资源争用，并且可以动态扩展支持在上百个线程之间每秒上百万个调用。它和应用服务器结合良好，并且在JEE环境通用，因为它不会调用创建一个单独的线程来做扫描。</li>
<li>优雅地从I/O错误中恢复：FileAppender和它的子类，包括RollingFileAppender，可以优雅的从I/O错误中恢复。所以，如果一个文件服务器临时宕机，你再也不需要重启你的应用，而日志功能就能正常工作。当文件服务器恢复工作，logback相关的appender就会透明地和快速的从上一个错误中恢复。</li>
<li>自动清除旧的日志归档文件：通过设置TimeBasedRollingPolicy 或者 SizeAndTimeBasedFNATP的 maxHistory 属性，你就可以控制日志归档文件的最大数量。如果你的回滚策略是每月回滚的，并且你希望保存一年的日志，那么只需简单的设置maxHistory属性为12。对于12个月之前的归档日志文件将被自动清除。</li>
<li>自动压缩归档日志文件：RollingFileAppender可以在回滚操作中，自动压缩归档日志文件。压缩通常是异步执行的，所以即使是很大的日志文件，你的应用都不会因此而被阻塞。</li>
<li>配置文件中的条件处理：开发者通常需要在不同的目标环境中变换logback的配置文件，例如开发环境，测试环境和生产环境。这些配置文件大体是一样的，除了某部分会有不同。为了避免重复，logback支持配置文件中的条件处理，只需使用<code>&lt;if&gt;</code>,<code>&lt;then&gt;</code>和<code>&lt;else&gt;</code>，那么同一个配置文件就可以在不同的环境中使用了。</li>
<li>过滤： Logback拥有远比log4j更丰富的过滤能力。例如，让我们假设，有一个相当重要的商业应用部署在生产环境。考虑到大量的交易数据需要处理，记录级别被设置为WARN，那么只有警告和错误信息才会被记录。现在，想象一下，你在开发环境遇到了一个臭虫，但是在测试平台中却很难发现，因为一些环境之间(生产环境/测试环境)的未知差异。使用log4j，你只能选择在生产系统中降低记录的级别到DEBUG，来尝试发现问题。但是很不幸，这会生成大量的日志记录，让分析变得困难。更重要的是，多余的日志记录会影响到生产环境的性能。使用logback，你可以选择保留只所有用户的WARN级别的日志，而除了某个用户，例如Alice，而她就是问题的相关用户。当Alice登录系统，她就会以DEBUG级别被记录，而其他用户仍然是以WARN级别来记录日志。这个功能，可以通过在配置文件的XML中添加4行。请在相关章节中查找MDCFilter</li>
</ul>
<h4 id="logback_基础配置">logback 基础配置</h4><h5 id="根节点包含的属性：">根节点<configuration>包含的属性：</configuration></h5><ul>
<li>scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。</li>
<li>scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。</li>
<li>debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span>  </div><div class="line">      <span class="comment">&lt;!-- 其他配置省略--&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="根节点&lt;configuration&gt;的子节点">根节点<code>&lt;configuration&gt;</code>的子节点</h5><p>设置上下文名称：<code>&lt;contextName&gt;</code><br>每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用<code>&lt;contextName&gt;</code>设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span>  </div><div class="line">      <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>myAppName<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span>  </div><div class="line">      <span class="comment">&lt;!-- 其他配置省略--&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p>设置变量： <code>&lt;property&gt;</code><br>有两个属性，name和value；其中name的值是变量的名称，value的值时变量定义的值。通过<code>&lt;property&gt;</code>定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。<br>例如使用<code>&lt;property&gt;</code>定义上下文名称，然后在<code>&lt;contentName&gt;</code>设置logger上下文时使用。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span>  </div><div class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"APP_Name"</span> <span class="attr">value</span>=<span class="string">"myAppName"</span> /&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>$&#123;APP_Name&#125;<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span>  </div><div class="line">      <span class="comment">&lt;!-- 其他配置省略--&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p>获取时间戳字符串：<code>&lt;timestamp&gt;</code></p>
<p>两个属性 key:标识此<code>&lt;timestamp&gt;</code> 的名字；datePattern：设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循Java.txt.SimpleDateFormat的格式。<br>例如将解析配置文件的时间作为上下文名称：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span>  </div><div class="line">      <span class="tag">&lt;<span class="name">timestamp</span> <span class="attr">key</span>=<span class="string">"bySecond"</span> <span class="attr">datePattern</span>=<span class="string">"yyyyMMdd'T'HHmmss"</span>/&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>$&#123;bySecond&#125;<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span>  </div><div class="line">      <span class="comment">&lt;!-- 其他配置省略--&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h5 id="设置loger：">设置loger：</h5><p><code>&lt;loger&gt;</code><br>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<code>&lt;appender&gt;</code>。<code>&lt;loger&gt;</code>仅有一个name属性，一个可选的level和一个可选的addtivity属性。</p>
<ul>
<li>name: 用来指定受此loger约束的某一个包或者具体的某一个类。</li>
<li>level: 用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前loger将会继承上级的级别。</li>
<li>addtivity: 是否向上级loger传递打印信息。默认是true。<br><code>&lt;loger&gt;</code>可以包含零个或多个<code>&lt;appender-ref&gt;</code>元素，标识这个appender将会添加到这个loger。</li>
</ul>
<p><code>&lt;root&gt;</code><br>也是<code>&lt;loger&gt;</code>元素，但是它是根loger。只有一个level属性，应为已经被命名为”root”.</p>
<ul>
<li>level: 用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。<br>默认是DEBUG。<br><code>&lt;root&gt;</code>可以包含零个或多个<code>&lt;appender-ref&gt;</code>元素，标识这个appender将会添加到这个loger。</li>
</ul>
<h4 id="示例">示例</h4><p>LogbackDemo.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> logback;  </div><div class="line">  </div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;  </div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;  </div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogbackDemo</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(LogbackDemo.class);  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        log.trace(<span class="string">"======trace"</span>);  </div><div class="line">        log.debug(<span class="string">"======debug"</span>);  </div><div class="line">        log.info(<span class="string">"======info"</span>);  </div><div class="line">        log.warn(<span class="string">"======warn"</span>);  </div><div class="line">        log.error(<span class="string">"======error"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>logback.xml配置文件<br><strong>第1种：只配置root</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>   </div><div class="line">   </div><div class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span>   </div><div class="line">    <span class="comment">&lt;!-- encoder 默认配置为PatternLayoutEncoder --&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span>   </div><div class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span>   </div><div class="line">   </div><div class="line">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span>             </div><div class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span>   </div><div class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span>     </div><div class="line">     </div><div class="line"> <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>其中appender的配置表示打印到控制台(稍后详细讲解appender )；<br><code>&lt;root level=&quot;INFO&quot;&gt;</code>将root的打印级别设置为“INFO”，指定了名字为“STDOUT”的appender。</p>
<p>当执行logback.LogbackDemo类的main方法时，root将级别为“INFO”及大于“INFO”的日志信息交给已经配置好的名为“STDOUT”的appender处理，“STDOUT”appender将信息打印到控制台；</p>
<p>打印结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">13:30:38.484 [main] INFO  logback.LogbackDemo - ======info  </div><div class="line">13:30:38.500 [main] WARN  logback.LogbackDemo - ======warn  </div><div class="line">13:30:38.500 [main] ERROR logback.LogbackDemo - ======error</div></pre></td></tr></table></figure>
<p><strong>第2种：带有loger的配置，不指定级别，不指定appender</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>   </div><div class="line">   </div><div class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span>   </div><div class="line">    <span class="comment">&lt;!-- encoder 默认配置为PatternLayoutEncoder --&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span>   </div><div class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span>   </div><div class="line">   </div><div class="line">  <span class="comment">&lt;!-- logback为java中的包 --&gt;</span>   </div><div class="line">  <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"logback"</span>/&gt;</span>   </div><div class="line">   </div><div class="line">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span>             </div><div class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span>   </div><div class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span>     </div><div class="line">     </div><div class="line"> <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其中appender的配置表示打印到控制台(稍后详细讲解appender )；<br><code>&lt;logger name=&quot;logback&quot; /&gt;</code>将控制logback包下的所有类的日志的打印，但是并没用设置打印级别，所以继承他的上级<code>&lt;root&gt;</code>的日志级别“DEBUG”；<br>没有设置addtivity，默认为true，将此loger的打印信息向上级传递；<br>没有设置appender，此loger本身不打印任何信息。<br><code>&lt;root level=&quot;DEBUG&quot;&gt;</code>将root的打印级别设置为“DEBUG”，指定了名字为“STDOUT”的appender。</p>
<p>当执行logback.LogbackDemo类的main方法时，因为LogbackDemo 在包logback中，所以首先执行<code>&lt;logger name=&quot;logback&quot; /&gt;</code>，将级别为“DEBUG”及大于“DEBUG”的日志信息传递给root，本身并不打印；<br>root接到下级传递的信息，交给已经配置好的名为“STDOUT”的appender处理，“STDOUT”appender将信息打印到控制台；</p>
<p>打印结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">13:19:15.406 [main] DEBUG logback.LogbackDemo - ======debug  </div><div class="line">13:19:15.406 [main] INFO  logback.LogbackDemo - ======info  </div><div class="line">13:19:15.406 [main] WARN  logback.LogbackDemo - ======warn  </div><div class="line">13:19:15.406 [main] ERROR logback.LogbackDemo - ======error</div></pre></td></tr></table></figure>
<p><strong>第3种：带有多个loger的配置，指定级别，指定appender</strong> </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>   </div><div class="line">   <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span>   </div><div class="line">    <span class="comment">&lt;!-- encoder 默认配置为PatternLayoutEncoder --&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span>   </div><div class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span>   </div><div class="line">   </div><div class="line">  <span class="comment">&lt;!-- logback为java中的包 --&gt;</span>   </div><div class="line">  <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"logback"</span>/&gt;</span>   </div><div class="line">  <span class="comment">&lt;!--logback.LogbackDemo：类的全路径 --&gt;</span>   </div><div class="line">  <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"logback.LogbackDemo"</span> <span class="attr">level</span>=<span class="string">"INFO"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span>  </div><div class="line">  <span class="tag">&lt;/<span class="name">logger</span>&gt;</span>   </div><div class="line">    </div><div class="line">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"ERROR"</span>&gt;</span>             </div><div class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span>   </div><div class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span>     </div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其中appender的配置表示打印到控制台(稍后详细讲解appender )；</p>
<p><code>&lt;logger name=&quot;logback&quot; /&gt;</code>将控制logback包下的所有类的日志的打印，但是并没用设置打印级别，所以继承他的上级<code>&lt;root&gt;</code>的日志级别“DEBUG”；<br>没有设置addtivity，默认为true，将此loger的打印信息向上级传递；<br>没有设置appender，此loger本身不打印任何信息。</p>
<p><code>&lt;logger name=&quot;logback.LogbackDemo&quot; level=&quot;INFO&quot; additivity=&quot;false&quot;&gt;</code>控制logback.LogbackDemo类的日志打印，打印级别为“INFO”；<br>additivity属性为false，表示此loger的打印信息不再向上级传递，<br>指定了名字为“STDOUT”的appender。</p>
<p><code>&lt;root level=&quot;DEBUG&quot;&gt;</code>将root的打印级别设置为“ERROR”，指定了名字为“STDOUT”的appender。<br>当执行logback.LogbackDemo类的main方法时，先执行<code>&lt;logger name=&quot;logback.LogbackDemo&quot; level=&quot;INFO&quot; additivity=&quot;false&quot;&gt;</code>，将级别为“INFO”及大于“INFO”的日志信息交给此loger指定的名为“STDOUT”的appender处理，在控制台中打出日志，不再向次loger的上级 <code>&lt;logger name=&quot;logback&quot;/&gt;</code> 传递打印信息；<br><code>&lt;logger name=&quot;logback&quot;/&gt;</code>未接到任何打印信息，当然也不会给它的上级root传递任何打印信息；</p>
<p>打印结果如下：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">14:05:35.937 [main] INFO  logback.LogbackDemo - ======info  </div><div class="line">14:05:35.937 [main] WARN  logback.LogbackDemo - ======warn  </div><div class="line">14:05:35.937 [main] ERROR logback.LogbackDemo - ======error</div></pre></td></tr></table></figure>
<p>如果将<code>&lt;logger name=&quot;logback.LogbackDemo&quot; level=&quot;INFO&quot; additivity=&quot;false&quot;&gt;</code>修改为 <code>&lt;logger name=&quot;logback.LogbackDemo&quot; level=&quot;INFO&quot; additivity=&quot;true&quot;&gt;</code>那打印结果将是什么呢？<br>没错，日志打印了两次，想必大家都知道原因了，因为打印信息向上级传递，logger本身打印一次，root接到后又打印一次<br>打印结果如下：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">14:09:01.531 [main] INFO  logback.LogbackDemo - ======info  </div><div class="line">14:09:01.531 [main] INFO  logback.LogbackDemo - ======info  </div><div class="line">14:09:01.531 [main] WARN  logback.LogbackDemo - ======warn  </div><div class="line">14:09:01.531 [main] WARN  logback.LogbackDemo - ======warn  </div><div class="line">14:09:01.531 [main] ERROR logback.LogbackDemo - ======error  </div><div class="line">14:09:01.531 [main] ERROR logback.LogbackDemo - ======error</div></pre></td></tr></table></figure>
<h4 id="&lt;appender&gt;配置"><code>&lt;appender&gt;</code>配置</h4><p><code>&lt;appender&gt;</code>是<code>&lt;configuration&gt;</code>的子节点，是负责写日志的组件。<br><code>&lt;appender&gt;</code>有两个必要属性name和class。name指定appender名称，class指定appender的全限定名。</p>
<h5 id="ConsoleAppender">ConsoleAppender</h5><p>把日志添加到控制台，有以下子节点：<br><code>&lt;encoder&gt;</code>：对日志进行格式化。（具体参数稍后讲解 ）<br><code>&lt;target&gt;</code>：字符串 System.out 或者 System.err ，默认 System.out ；<br>例如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span>  </div><div class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg %n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span>  </div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span>  </div><div class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="FileAppender">FileAppender</h5><p>把日志添加到文件，有以下子节点：<br><code>&lt;file&gt;</code>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。<br><code>&lt;append&gt;</code>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。<br><code>&lt;encoder&gt;</code>：对记录事件进行格式化。（具体参数稍后讲解 ）<br><code>&lt;prudent&gt;</code>：如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false。<br>例如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.FileAppender"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">file</span>&gt;</span>testFile.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">append</span>&gt;</span>true<span class="tag">&lt;/<span class="name">append</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span>  </div><div class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span>  </div><div class="line">          </div><div class="line">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span> /&gt;</span>  </div><div class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="RollingFileAppender">RollingFileAppender</h5><p>滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。有以下子节点：<br><code>&lt;file&gt;</code>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。<br><code>&lt;append&gt;</code>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。<br><code>&lt;encoder&gt;</code>：对记录事件进行格式化。（具体参数稍后讲解 ）<br><code>&lt;rollingPolicy&gt;</code>:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。<br><code>&lt;triggeringPolicy &gt;</code>: 告知 RollingFileAppender 合适激活滚动。<br><code>&lt;prudent&gt;</code>：当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空。</p>
<p>rollingPolicy:</p>
<p><strong>TimeBasedRollingPolicy：</strong> 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。有以下子节点：<br><code>&lt;fileNamePattern&gt;</code>:<br>必要节点，包含文件名及“%d”转换符， “%d”可以包含一个Java.text.SimpleDateFormat指定的时间格式，如：%d{yyyy-MM}。如果直接使用 %d，默认格式是 yyyy-MM-dd。RollingFileAppender 的file字节点可有可无，通过设置file，可以为活动文件和归档文件指定不同位置，当前日志总是记录到file指定的文件（活动文件），活动文件的名字不会改变；如果没设置file，活动文件的名字会根据fileNamePattern 的值，每隔一段时间改变一次。“/”或者“\”会被当做目录分隔符。</p>
<p><code>&lt;maxHistory&gt;</code>:<br>可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每个月滚动，且<code>&lt;maxHistory&gt;</code>是6，则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除。</p>
<p><strong>FixedWindowRollingPolicy：</strong><br>根据固定窗口算法重命名文件的滚动策略。有以下子节点：<br><code>&lt;minIndex&gt;</code>:窗口索引最小值<br><code>&lt;maxIndex&gt;</code>:窗口索引最大值，当用户指定的窗口过大时，会自动将窗口设置为12。<br><code>&lt;fileNamePattern &gt;</code>:<br>必须包含“%i”例如，假设最小值和最大值分别为1和2，命名模式为 mylog%i.log,会产生归档文件mylog1.log和mylog2.log。还可以指定文件压缩选项，例如，mylog%i.log.gz 或者 没有log%i.log.zip</p>
<p>triggeringPolicy:<br><strong>SizeBasedTriggeringPolicy：</strong>查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动。只有一个节点:<br><code>&lt;maxFileSize&gt;</code>:这是活动文件的大小，默认值是10MB。</p>
<p>例如：每天生成一个日志文件，保存30天的日志文件。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>   </div><div class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span>   </div><div class="line">      </div><div class="line">    <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>logFile.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span>    </div><div class="line">    <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span>   </div><div class="line">   </div><div class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span>   </div><div class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span>    </div><div class="line">   </div><div class="line">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span> /&gt;</span>   </div><div class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span>   </div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p>例如：按照固定窗口模式生成日志文件，当文件大于20MB时，生成新的日志文件。窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>   </div><div class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">file</span>&gt;</span>test.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span>   </div><div class="line">   </div><div class="line">    <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.FixedWindowRollingPolicy"</span>&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>tests.%i.log.zip<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">minIndex</span>&gt;</span>1<span class="tag">&lt;/<span class="name">minIndex</span>&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">maxIndex</span>&gt;</span>3<span class="tag">&lt;/<span class="name">maxIndex</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span>   </div><div class="line">   </div><div class="line">    <span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"</span>&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>5MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span>   </div><div class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span>   </div><div class="line">           </div><div class="line">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span> /&gt;</span>   </div><div class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span>   </div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p>另外还有SocketAppender、SMTPAppender、DBAppender、SyslogAppender、SiftingAppender，并不常用，这些就不在这里讲解了，大家可以参考官方文档。当然大家可以编写自己的Appender。</p>
<p><code>&lt;encoder&gt;：</code><br>负责两件事，一是把日志信息转换成字节数组，二是把字节数组写入到输出流。<br>目前PatternLayoutEncoder 是唯一有用的且默认的encoder ，有一个<code>&lt;pattern&gt;</code>节点，用来设置日志的输入格式。使用“%”加“转换符”方式，如果要输出“%”，则必须用“\”对“\%”进行转义。</p>
<p>例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">encoder</span>&gt;</span>   </div><div class="line">   <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span>   </div><div class="line"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>格式修饰符，与转换符共同使用：<br>可选的格式修饰符位于“%”和转换符之间。<br>第一个可选修饰符是左对齐 标志，符号是减号“-”；接着是可选的最小宽度 修饰符，用十进制数表示。如果字符小于最小宽度，则左填充或右填充，默认是左填充（即右对齐），填充符为空格。如果字符大于最小宽度，字符永远不会被截断。最大宽度 修饰符，符号是点号”.”后面加十进制数。如果字符大于最大宽度，则从前面截断。点符号“.”后面加减号“-”在加数字，表示从尾部截断。<br>例如：%-4relative 表示，将输出从程序启动到创建日志记录的时间 进行左对齐 且最小宽度为4。</p>
<h4 id=""><filter></filter></h4><p>过滤器，执行一个过滤器会有返回个枚举值，即DENY，NEUTRAL，ACCEPT其中之一。返回DENY，日志将立即被抛弃不再经过其他过滤器；返回NEUTRAL，有序列表里的下个过滤器过接着处理日志；返回ACCEPT，日志会被立即处理，不再经过剩余过滤器。<br>过滤器被添加到<code>&lt;Appender&gt;</code> 中，为<code>&lt;Appender&gt;</code> 添加一个或多个过滤器后，可以用任意条件对日志进行过滤。<code>&lt;Appender&gt;</code> 有多个过滤器时，按照配置顺序执行。</p>
<p>下面是几个常用的过滤器：</p>
<p><strong>LevelFilter：</strong> 级别过滤器，根据日志级别进行过滤。如果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。有以下子节点：<br><code>&lt;level&gt;</code>:设置过滤级别<br><code>&lt;onMatch&gt;</code>:用于配置符合过滤条件的操作<br><code>&lt;onMismatch&gt;</code>:用于配置不符合过滤条件的操作</p>
<p>例如：将过滤器的日志级别配置为INFO，所有INFO级别的日志交给appender处理，非INFO级别的日志，被过滤掉。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>   </div><div class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"CONSOLE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>   </div><div class="line">        %-4relative [%thread] %-5level %logger&#123;30&#125; - %msg%n   </div><div class="line">      <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span>   </div><div class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span>   </div><div class="line">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span>   </div><div class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span>   </div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>ThresholdFilter：</strong><br>临界值过滤器，过滤掉低于指定临界值的日志。当日志级别等于或高于临界值时，过滤器返回NEUTRAL；当日志级别低于临界值时，日志会被拒绝。<br>例如：过滤掉所有低于INFO级别的日志。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>   </div><div class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"CONSOLE"</span>   </span></div><div class="line">    <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;   </div><div class="line">    <span class="comment">&lt;!-- 过滤掉 TRACE 和 DEBUG 级别的日志--&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>   </div><div class="line">        %-4relative [%thread] %-5level %logger&#123;30&#125; - %msg%n   </div><div class="line">      <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span>   </div><div class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span>   </div><div class="line">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span>   </div><div class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span>   </div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>EvaluatorFilter：</strong><br>求值过滤器，评估、鉴别日志是否符合指定条件。有一下子节点：<br><code>&lt;evaluator&gt;</code>:<br>鉴别器，常用的鉴别器是JaninoEventEvaluato，也是默认的鉴别器，它以任意的Java布尔值表达式作为求值条件，求值条件在配置文件解释过成功被动态编译，布尔值表达式返回true就表示符合过滤条件。evaluator有个子标签<code>&lt;expression&gt;</code>，用于配置求值条件。<br><code>&lt;onMatch&gt;</code>:用于配置符合过滤条件的操作<br><code>&lt;onMismatch&gt;</code>:用于配置不符合过滤条件的操作</p>
<p>例如：过滤掉所有日志消息中不包含“billing”字符串的日志。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>   </div><div class="line">   </div><div class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.filter.EvaluatorFilter"</span>&gt;</span>         </div><div class="line">      <span class="tag">&lt;<span class="name">evaluator</span>&gt;</span> <span class="comment">&lt;!-- 默认为 ch.qos.logback.classic.boolex.JaninoEventEvaluator --&gt;</span>   </div><div class="line">        <span class="tag">&lt;<span class="name">expression</span>&gt;</span>return message.contains("billing");<span class="tag">&lt;/<span class="name">expression</span>&gt;</span>   </div><div class="line">      <span class="tag">&lt;/<span class="name">evaluator</span>&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">OnMatch</span>&gt;</span>ACCEPT <span class="tag">&lt;/<span class="name">OnMatch</span>&gt;</span>  </div><div class="line">      <span class="tag">&lt;<span class="name">OnMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">OnMismatch</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>   </div><div class="line">        %-4relative [%thread] %-5level %logger - %msg%n   </div><div class="line">      <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span>   </div><div class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span>   </div><div class="line">   </div><div class="line">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span>   </div><div class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span>   </div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>&lt;matcher&gt;</code> ：<br>匹配器，尽管可以使用String类的matches()方法进行模式匹配，但会导致每次调用过滤器时都会创建一个新的Pattern对象，为了消除这种开销，可以预定义一个或多个matcher对象，定以后就可以在求值表达式中重复引用。<code>&lt;matcher&gt;</code>是<code>&lt;evaluator&gt;</code>的子标签。<br><code>&lt;matcher&gt;</code>中包含两个子标签，一个是<code>&lt;name&gt;</code>，用于定义matcher的名字，求值表达式中使用这个名字来引用matcher；另一个是<code>&lt;regex&gt;</code>，用于配置匹配条件。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">"true"</span>&gt;</span>   </div><div class="line">   </div><div class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.filter.EvaluatorFilter"</span>&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">evaluator</span>&gt;</span>           </div><div class="line">        <span class="tag">&lt;<span class="name">matcher</span>&gt;</span>   </div><div class="line">          <span class="tag">&lt;<span class="name">Name</span>&gt;</span>odd<span class="tag">&lt;/<span class="name">Name</span>&gt;</span>   </div><div class="line">          <span class="comment">&lt;!-- filter out odd numbered statements --&gt;</span>   </div><div class="line">          <span class="tag">&lt;<span class="name">regex</span>&gt;</span>statement [13579]<span class="tag">&lt;/<span class="name">regex</span>&gt;</span>   </div><div class="line">        <span class="tag">&lt;/<span class="name">matcher</span>&gt;</span>   </div><div class="line">           </div><div class="line">        <span class="tag">&lt;<span class="name">expression</span>&gt;</span>odd.matches(formattedMessage)<span class="tag">&lt;/<span class="name">expression</span>&gt;</span>   </div><div class="line">      <span class="tag">&lt;/<span class="name">evaluator</span>&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">OnMismatch</span>&gt;</span>NEUTRAL<span class="tag">&lt;/<span class="name">OnMismatch</span>&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">OnMatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">OnMatch</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span>   </div><div class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span>   </div><div class="line">   </div><div class="line">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span>   </div><div class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span>   </div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="参考">参考</h4><p><a href="https://www.oschina.net/translate/reasons-to-prefer-logbak-over-log4j" target="_blank" rel="external">从Log4j迁移到LogBack的理由</a><br><a href="http://blog.csdn.net/haidage/article/details/6794540" target="_blank" rel="external">logback logback.xml常用配置详解</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="logback详解">logback详解</h3><blockquote>
<blockquote>
<p>说明：下面内容从网上搜集而来</p>
</blockquote>
</blockquote>
<h4 id="与log4j对比">与log4j对比</h4>]]>
    </summary>
    
      <category term="java" scheme="https://wustrive2008.github.io/tags/java/"/>
    
      <category term="logback" scheme="https://wustrive2008.github.io/tags/logback/"/>
    
      <category term="slf4j" scheme="https://wustrive2008.github.io/tags/slf4j/"/>
    
      <category term="日志" scheme="https://wustrive2008.github.io/tags/%E6%97%A5%E5%BF%97/"/>
    
      <category term="java" scheme="https://wustrive2008.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[邮件协议SMTP|POP3|IMAP详解]]></title>
    <link href="https://wustrive2008.github.io/2016/12/23/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/%E9%82%AE%E4%BB%B6%E5%8D%8F%E8%AE%AESMTP%7CPOP3%7CIMAP%E8%AF%A6%E8%A7%A3/"/>
    <id>https://wustrive2008.github.io/2016/12/23/网络协议/邮件协议SMTP|POP3|IMAP详解/</id>
    <published>2016-12-23T15:17:17.000Z</published>
    <updated>2016-12-23T15:27:15.000Z</updated>
    <content type="html"><![CDATA[<h2 id="邮件协议SMTP|POP3|IMAP详解">邮件协议SMTP|POP3|IMAP详解</h2><h3 id="SMPT(简单邮件传输协议)">SMPT(简单邮件传输协议)</h3><h4 id="协议简介">协议简介</h4><p>目标是向用户提供高效、可靠的邮件传输。主要用户发送邮件。</p>
<h4 id="工作机制">工作机制</h4><p>SMTP通常有两种工作模式。发送SMTP和接收SMTP。具体工作方式为：发送SMTP在接收到用户的邮件请求后，判断此邮件是否为本地邮件，若是直接投送到用户的邮箱，否则向DNS查询远端邮件服务器的MX记录，并建立与远端接收SMTP之间的一个双向传送通道，此后SMTP命令由发送SMTP发出，由接收SMTP接收，而应答则反方向传送。一旦传送通道建立，SMTP发送者发送MAIL命令指明邮件发送者。如果SMTP接收者可以接收邮件则返回OK应答。SMTP发送者再发出RCPT命令确认邮件是否接收到。如果SMTP接收者接收，则返回OK应答；如果不能接收到，则发出拒绝接收应答（但不中止整个邮件操作），双方将如此反复多次。当接收者收到全部邮件后会接收到特别的序列，入伏哦接收者成功处理了邮件，则返回OK应答。</p>
<h4 id="服务器查找">服务器查找</h4><p>SMTP服务器是基于域名服务DNS中计划收件人的域名来路由电子邮件。一般根据登陆邮箱的后缀域名通过DNS协议查找MX记录。</p>
<ul>
<li>查找邮箱后缀域名的MX记录所指向的域名地址</li>
<li>根据指向域名地址通过dns查找域名地址指向的服务器ip</li>
<li>tcp连接服务器ip：25（默认端口)（用来登陆或者发送）</li>
</ul>
<h4 id="操作示例">操作示例</h4><ul>
<li>【c-&gt;s】telnet smtp.163.com 25【tcp连接】</li>
<li>【s-&gt;c】220 163.com Anti-spam GT for Coremail System (163com[20141201])【欢迎信息】</li>
<li>【c-&gt;s】helo 163.com【helo命令】</li>
<li>【s-&gt;c】250 OK</li>
<li>【c-&gt;s】auth login【请求登陆】</li>
<li>【s-&gt;c】334 dXNlcm5dhbWU6【要求用户名】</li>
<li>【c-&gt;s】Z3dfdsaffEDF=【输入base64用户名】</li>
<li>【s-&gt;c】334 UGFzc3ddvcmQ6【要求密码】</li>
<li>【c-&gt;s】fdasDSDFFFfDS=【输入base64密码】</li>
<li>【s-&gt;c】235 Authentication successful【登陆成功】</li>
<li>【c-&gt;s】mail from:xxx@163.com【发件地址】</li>
<li>【c-&gt;s】rcpt to:xxx@163.com【收件地址】</li>
<li>【c-&gt;s】DATA【data命令，要求发送内容】</li>
<li>【s-&gt;c】354 End data with .【提示信息，以.作为结束符号】</li>
<li>【c-&gt;s】from:gule11@163.com【要显示的发件地址】</li>
<li>【c-&gt;s】to:xxx@163.com【要显示的收件地址】</li>
<li>【c-&gt;s】hello world【内容】</li>
<li>【c-&gt;s】.【结束】</li>
<li>【s-&gt;c】250 Mail OK queued as smtp13,EcCowABHIv39riFXqUpKBA—.47592S3 1461825582【返回发送状态，我的测试不幸进入垃圾邮件】</li>
<li>【c-&gt;s】QUIT【退出命令】</li>
<li>【s-&gt;c】221 Bye</li>
</ul>
<h4 id="常用命令">常用命令</h4><p>SMTP命令不区分大小写，但参数区分大小写。常用命令如下：</p>
<ul>
<li>HELO ——向服务器标识用户身份发送者能欺骗、说谎，但一般情况下服务器都能检测到</li>
<li>RCPT TO: <forward-path> ——<forward-path>用来标志邮件接收者的地址，常用在MAIL FROM后，可以有多个RCPT TO</forward-path></forward-path></li>
<li>DATA ——将之后的数据作为数据发送，以.标志数据的结尾</li>
<li>REST ——重置会话，当前传输被取消</li>
<li>NOOP ——要求服务器返回OK应答，一般用作测试</li>
<li>QUIT ——结束会话</li>
<li>VRFY ——验证指定的邮箱是否存在，由于安全方面的原因，服务器大多禁止此命令</li>
<li>EXPN ——验证给定的邮箱列表是否存在，由于安全方面的原因，服务器大多禁止此命令</li>
<li>HELP ——查询服务器支持什么命令</li>
</ul>
<h4 id="常用响应">常用响应</h4><ul>
<li>501——参数格式错误</li>
<li>502——命令不可实现</li>
<li>503——错误的命令序列</li>
<li>504——命令参数不可实现</li>
<li>211——系统状态或系统帮助响应</li>
<li>214——帮助信息</li>
<li>220——服务器就绪</li>
<li>221——服务关闭</li>
<li>421——服务器未就绪，关闭传输信道</li>
<li>250——要求的邮件操作完成</li>
<li>251——用户非本地，将转发向<forward-path></forward-path></li>
<li>450——要求的邮件操作未完成，邮箱不可用</li>
<li>550——要求的邮件操作未完成，邮箱不可用</li>
<li>451——放弃要求的操作，处理过程中出错</li>
<li>551——用户非本地，请尝试<forward-path></forward-path></li>
<li>452——系统存储不足，要求的操作未执行</li>
<li>552——过量的存储分配，要求的操作未执行</li>
<li>553——邮箱名不可用，要求的操作未执行</li>
<li>354——开始邮件输入，以“.”结束</li>
<li>554——操作失败</li>
</ul>
<h3 id="POP3(邮局协议)">POP3(邮局协议)</h3><h4 id="协议简介-1">协议简介</h4><p>POP3称为邮局协议版本3(Post Office Protocol-Version 3)，是TCP/IP协议族中的一员，由RFC1939 定义，主要用于支持使用客户端远程管理在服务器上的电子邮件。POP3 使用 TCP 作为传输协议，端口号是110。<br>POP3协议相对简单，POP3服务器响应一般为：“+OK”表示成功，“-ERR”表示失败。</p>
<h4 id="示例">示例</h4><ul>
<li>【c-&gt;s】telnet pop.163.com 110【tcp连接】</li>
<li>【s-&gt;c】+OK Welcome to coremail Mail Pop3 Server (163coms[726cd8【欢迎信息】</li>
<li>【c-&gt;s】user xxx@163.com【登陆】</li>
<li>【s-&gt;c】+OK core mail</li>
<li>【c-&gt;s】pass password【密码】</li>
<li>【s-&gt;c】+OK 1025 message(s) [125726173 byte(s)]</li>
<li>【c-&gt;s】list【列出邮件】</li>
<li>【s-&gt;c】1023 15552【邮件id 邮件大小】</li>
<li>【s-&gt;c】1024 24905</li>
<li>【s-&gt;c】1025 5288</li>
<li>【s-&gt;c】.【列出邮件结束】</li>
<li>【c-&gt;s】tetr 1025【收取一封邮件内容】</li>
<li>【s-&gt;c】邮件内容</li>
<li>【c-&gt;s】quit【退出】</li>
<li>【s-&gt;c】+OK core mail</li>
</ul>
<h4 id="常用命令-1">常用命令</h4><ul>
<li>USER [username] 处理用户名</li>
<li>PASS [password] 处理用户密码</li>
<li>APOP [Name,Digest] 认可Digest是MD5消息摘要</li>
<li>STAT 处理请求服务器发回关于邮箱的统计资料，如邮件总数和总字节数</li>
<li>UIDL [邮件id] 处理返回邮件的唯一标识符，POP3会话的每个标识符都将是唯一的</li>
<li>LIST [邮件id] 处理返回邮件数量和每个邮件的大小</li>
<li>RETR [邮件id] 处理返回由参数标识的邮件的全部文本</li>
<li>DELE [邮件id] 处理服务器将由参数标识的邮件标记为删除，最后由【quit】命令执行</li>
<li>RSET 处理服务器将重置所有标记为删除的邮件，用于撤消DELE命令</li>
<li>TOP [邮件id n] 处理服务器将返回由参数标识的邮件前n行内容，n必须是正整数</li>
<li>NOOP 处理服务器返回一个肯定的响应</li>
<li>QUIT 终止会话</li>
</ul>
<h3 id="IMAP(交互式邮件存取协议)">IMAP(交互式邮件存取协议)</h3><h4 id="pop3协议的不足">pop3协议的不足</h4><p>POP作为Internet上邮件的第一个离线协议标准，允许用户从服务器上把邮件下载到本地主机上，同时删除保存在邮件服务器上的邮件【现在的邮件服务商都可以设置是否同时删除】，从而使用户不必长时间地与邮件服务器连接，很大程度上减少了服务器和网络的整体开销。</p>
<p>但POP3有其天生的缺陷，即当用户接收电子邮件时，所有的信件都从服务器上清除并下载到客户机。在整个收信过程中，用户无法知道邮件的具体信息，只有照单全收入硬盘后，才能慢慢浏览和删除。这使用户几乎没有对邮件接收的控制决定权。一旦碰上邮箱被轰炸，或有比较大的邮件，用户不能通过分析邮件的内容及发信人地址来决定是否下载或删除，从而造成系统资源的浪费。而IMAP协议不但可以克服POP3的缺陷，而且还提供了更强大的功能。</p>
<h4 id="IMAP简介">IMAP简介</h4><p>IMAP:是Internet Mail Access Protocol交互式邮件存取协议的简称。IMAP协议运行在TCP/IP协议之上，使用的端口是143。它与POP3协议的主要区别是用户可以不用把所有的邮件全部下载，可以通过客户端直接对服务器上的邮件进行操作。</p>
<p>与POP3协议类似，IMAP（Internet消息访问协议）也是提供面向用户的邮件收取服务。常用的版本是IMAP4。IMAP4改进了POP3的不足，用户可以通过浏览信件头来决定是否收取、删除和检索邮件的特定部分，还可以在服务器上创建或更改文件夹或邮箱，它除了支持POP3协议的脱机操作模式外，还支持联机操作和断连接操作。它为用户提供了有选择的从邮件服务器接收邮件的功能、基于服务器的信息处理功能和共享信箱功能。</p>
<p>IMAP4的脱机模式不同于POP3，它不会自动删除在邮件服务器上已取出的邮件，其联机模式和断连接模式也是将邮件服务器作为“远程文件服务器”进行访问，更加灵活方便。</p>
<p>其实说个简单的，就是如果你不对客户端做一个特殊设置的话，默认情况下，你使用POP3协议下载邮件，会把服务器上的所有邮件下载到客户端，而服务器上将不再存储。而IMAP在默认情况下，下载但是不删除邮件服务器上的文件。</p>
<h3 id="参考">参考</h3><p><a href="http://forthxu.com/blog/article/61.html" target="_blank" rel="external">电子邮件SMTP、POP3、IMAP协议学习</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="邮件协议SMTP|POP3|IMAP详解">邮件协议SMTP|POP3|IMAP详解</h2><h3 id="SMPT(简单邮件传输协议)">SMPT(简单邮件传输协议)</h3><h4 id="协议简介">协议简介</h4><p>目标是向用户提供高效、可靠的邮件]]>
    </summary>
    
      <category term="Email" scheme="https://wustrive2008.github.io/tags/Email/"/>
    
      <category term="SMTP" scheme="https://wustrive2008.github.io/tags/SMTP/"/>
    
      <category term="POP3" scheme="https://wustrive2008.github.io/tags/POP3/"/>
    
      <category term="IMAP" scheme="https://wustrive2008.github.io/tags/IMAP/"/>
    
      <category term="网络协议" scheme="https://wustrive2008.github.io/categories/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[数据库行列转换]]></title>
    <link href="https://wustrive2008.github.io/2016/12/03/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%8C%E5%88%97%E8%BD%AC%E6%8D%A2/"/>
    <id>https://wustrive2008.github.io/2016/12/03/数据库/数据库行列转换/</id>
    <published>2016-12-02T17:29:56.000Z</published>
    <updated>2016-12-02T17:36:11.000Z</updated>
    <content type="html"><![CDATA[<p>示例(mysql)</p>
<p>原表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">表名 :user</div><div class="line">----------------------------------------</div><div class="line">name        |  course   | grade</div><div class="line">----------------------------------------</div><div class="line">zhangsan    |  Java     |  70</div><div class="line">----------------------------------------</div><div class="line">zhangsan    |  C++      |  80</div><div class="line">----------------------------------------</div><div class="line">lisi        |  java     |  90</div><div class="line">----------------------------------------</div><div class="line">lisi        |  C#       |  60</div><div class="line">----------------------------------------</div></pre></td></tr></table></figure></p>
<p>用一条 SQL 语句得到如下形式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">----------------------------------------</div><div class="line">name     |  java |  C++  |  C#</div><div class="line">----------------------------------------</div><div class="line">zhangsan |  70   |  80   |  null</div><div class="line">----------------------------------------</div><div class="line">lisi     |  90   |  null |  60</div><div class="line">----------------------------------------</div></pre></td></tr></table></figure>
<p>方案1</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span>   <span class="keyword">name</span>,</div><div class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> course=<span class="string">'java'</span> <span class="keyword">then</span> grade <span class="keyword">end</span>) <span class="keyword">as</span> <span class="keyword">java</span>,</div><div class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> course=<span class="string">'C++'</span> <span class="keyword">then</span> grade <span class="keyword">end</span>) <span class="keyword">as</span> C++,</div><div class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> course=<span class="string">'C#'</span> <span class="keyword">then</span> grade <span class="keyword">end</span>) <span class="keyword">as</span> C#</div><div class="line"><span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">name</span></div></pre></td></tr></table></figure>
<p>方案2</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span>  <span class="keyword">distinct</span> c.<span class="string">`name`</span> <span class="keyword">AS</span> <span class="keyword">name</span>,</div><div class="line">(<span class="keyword">select</span> grade <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">name</span> = c.<span class="string">`name`</span> <span class="keyword">and</span> course = <span class="string">'java'</span> )<span class="keyword">as</span> <span class="keyword">java</span>,</div><div class="line">(<span class="keyword">select</span> grade <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">name</span> = c.<span class="string">`name`</span> <span class="keyword">and</span> course = <span class="string">'C++'</span> )<span class="keyword">as</span> C++,</div><div class="line">(<span class="keyword">select</span> grade <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">name</span> = c.<span class="string">`name`</span> <span class="keyword">and</span> course = <span class="string">'C#'</span> )<span class="keyword">as</span> C#</div><div class="line"><span class="keyword">from</span> <span class="keyword">test</span> c</div></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>示例(mysql)</p>
<p>原表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</]]>
    </summary>
    
      <category term="数据库" scheme="https://wustrive2008.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="DB" scheme="https://wustrive2008.github.io/tags/DB/"/>
    
      <category term="sql" scheme="https://wustrive2008.github.io/tags/sql/"/>
    
      <category term="mysql" scheme="https://wustrive2008.github.io/tags/mysql/"/>
    
      <category term="DB" scheme="https://wustrive2008.github.io/categories/DB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[C语言核心之数组和指针详解]]></title>
    <link href="https://wustrive2008.github.io/2016/12/03/cORc++/C%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83%E4%B9%8B%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88%E8%AF%A6%E8%A7%A3/"/>
    <id>https://wustrive2008.github.io/2016/12/03/cORc++/C语言核心之数组和指针详解/</id>
    <published>2016-12-02T16:57:33.000Z</published>
    <updated>2016-12-02T17:30:15.000Z</updated>
    <content type="html"><![CDATA[<h3 id="指针">指针</h3><p>相信大家对下面的代码不陌生：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i=<span class="number">2</span>;                                            </div><div class="line"><span class="keyword">int</span> *p;                                             </div><div class="line">p=&amp;i;</div></pre></td></tr></table></figure>
<p>这是最简单的指针应用，也是最基本的用法。再来熟悉一下什么是指针：首先指针是一个变量，它保存的并不是平常的数据，而是变量的地址。如上代码，指针p中保存的是整型变量i的地址信息。</p>
<p>接下来看如何定义一个指针，既然指针也是一个变量，那么它的定义也和其它变量一样定义：如：int  <em>p；</em>是间接寻址或间接引用运算符。上例中我们还看到了一个特别的运算符&amp;，它是一个取地址运算符（在其他合适场合&amp;也是按位运算运算符，&amp;&amp;为取交集运算符）。</p>
<p>在上面的指针定义中，我们看到了定义的是一个整型指针，难道指针还有类型吗？答案是肯定的，指针只能指向某种特定类型的对象，也就是说，每个指针都必须指向某种特定的数据类型（唯一的例外：指向void类型的指针可以存放指向任何类型的指针，但它不能间接引用其自身。）。比如，int 类型的指针绝对不能指向char 类型的变量。</p>
<p>下面我们给出一个完整的例子来说明指针的简单应用：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a,b,c,*p;</div><div class="line">    a=<span class="number">1</span>;</div><div class="line">    b=<span class="number">3</span>;</div><div class="line">    p=&amp;a;</div><div class="line">    b=*p+<span class="number">1</span>;</div><div class="line">    c=*(p+<span class="number">1</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d %d %d /n"</span>,a,b,c,*p+<span class="number">3</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果为：  1 2 -858993460 4</p>
<p>这是个完整的例子，可以自己在机器上调试一下，现在很多人用的都是微软的Visual Studio 开发环境，有人就不知道在该开发环境中怎么写C程序以及调试C程序，具体境况可以参考附录。</p>
<p>在上面例子中，看到了这样两个表达式b=<em>p+1;和c=</em>(p+1);前者的意思是p所指的地址里的内容加1再赋给b，相当于b=a+1;，后者是p所指的地址加1再把（p+1）所指的地址赋给c，当然我们不知道p的下一个地址里放的是什么，所以输出了一个随机值（这样的操作时很危险的，切记不要使用不确定的内存地址）。</p>
<h3 id="数组">数组</h3><p>数组大家应该都很熟悉了，用途非常广泛。<br>int a[4]={2,4,5,9};<br>此语句定义一个4个空间大小的整型数组a并为它进行了初始化。<br>数组的基础知识可以参考其他相应的教材，我们在这主要讨论指针和数组的结合应用。</p>
<p>我们再来看个完整的例子：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a[<span class="number">4</span>]=&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span>&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> *p;</div><div class="line"></div><div class="line">    p=a;</div><div class="line"></div><div class="line">    *p=*p++;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d %d/n"</span>,*p,*p+<span class="number">6</span>,*(p+<span class="number">1</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：4 10 5</p>
<p>分析：语句p=a;表示把数组a的第0个元素的地址赋给指针p，数组名a代表的是数组a的第0个元素的地址。<br>a[i]表示数组a的第i个元素，如果定义一个指针p，那么语句p=&amp;a[0];表示可以将指针p指向数组a的第0个元素，也就是说p的值为数组元素a[0]的地址。那么<em>（p+1）引用的是数组元素a[1]的内容，p+i是数组元素a[i]的地址，</em>（p+i）引用的是数组元素a[i]的内容。对数组元素a[i]的引用也可以写成<em>(a+i)。可以得出结论：&amp;a[i]与a+i的含义相同，p[i]与</em>（p+i）也是等价的。</p>
<p>虽然数组和指针有这么多通用的地方，但我们必须记住，数组名和指针之间有一个不同之处。指针是一个变量，因此语句p=a和p++都是合法的。但数组名不是变量，因此，类似于a=p和a++形式的语句是非法的。</p>
<p>下面来看一个我们常用的函数strlen(char *s):</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">int strlen(char *s)</div><div class="line">&#123;</div><div class="line">    int n;</div><div class="line">    for(n=0;*s!='/0';s++)</div><div class="line">          n++;</div><div class="line">    return n;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为s是一个指针，所以对其执行自增运算是合法的。执行s++运算不会影响到strlen函数的调用者中的字符串，它仅对该指针在strlen函数中的私有副本进行自增运算。在函数定义中，形式参数char s[]和char *s是等价的。</p>
<p>我们再来看一下地址算术运算：如果p是一个指向数组中某个元素的指针，那么p++将对p进行自增运算并指向下一个元素，而p+=i将对p进行加i的增量运算，使其指向指针p当前所指向元素之后的第i个元素。同其他类型的变量一样，指针也可以进行初始化。通常，对指针有意义的初始化值只能是0或者是表示地址的表达式，对后者来说，表达式所表达的地址必须是在此之前已定义的具有适当类型的数据的地址。任何指针与0进行相等或者不相等的比较运算都有意义。但是指向不同数组的元素的指针之间的算术或比较运算没有意义。指针还可以和整数进行相加或相减运算。如p+n表示指针p当前指向的对象之后第n个对象的地址。无论指针p指向的对象是何种类型，上述结论都成立。在计算p+n时，n将根据p指向的对象的长度按比例缩放，而p指向的对象的长度则取决于p的声明。例如，如果int类型占4个字节的存储空间，那么在int类型的计算中对应的n将按4的倍数来计算。</p>
<p>指针的减法运算也是有意义的，如果p和q指向相同数组中的元素，且p&lt;q，那么q-p+1就是位于p和q指向的元素之间的元素的数目。我们来看一下strlen(char *s)的另一个版本：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">int strlen(char *s)</div><div class="line">&#123;</div><div class="line">   char *p=s;</div><div class="line">   while(*p!='/0')</div><div class="line">          p++;</div><div class="line">   return p-s;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>程序中，p被初始化为指向s，即指向该字符串的第一个字符，while循环语句将依次检查字符串中的每个字符，直到遇到标识字符数组结尾的字符’/0’为止。由于p是指向字符的指针，所以每执行以此p++，p就将指向下一个字符的地址，p-s则表示已经检查过的字符数，即字符串长度。</p>
<p>总结：有效的指针运算包括相同类型指针之间的赋值运算；指针和整数之间的加减运算；指向相同数组中元素的两个指针间的减法或比较运算；将指针赋值为0或指针与0之间的比较运算。其他所有形式的指针运算都是非法的。</p>
<p>再来看两条语句：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span>  a[]=”I  am  a  boy”;  <span class="keyword">char</span> *p=”I  am  a  boy”;</div></pre></td></tr></table></figure>
<p>a是一个仅仅足以存放初始化字符串以及空字符’/0’的一维数组。数组中的单个字符可以进行修改，但a始终指向同一个存储位置。而p是一个指针，其初值指向一个字符串常量，之后它可以被修改以指向其他地址，但如果试图修改字符串的内容，结果是没有定义的。</p>
<p>为了更容易理解数组和指针的关系，我们再来看一个函数：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">void strcpy(char *s,char *t)</div><div class="line">&#123;</div><div class="line">   int i;</div><div class="line">   i=0;</div><div class="line">   while((s[i]=t[i])!='/0')</div><div class="line">          i++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为参数是通过值传递的，所以在strcpy函数中可以以任何方式使用参数s和t。</p>
<p>下面是指针实现的几个版本：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">void strcpy(char *s,char *t)</div><div class="line">&#123;</div><div class="line">   while((*s=*t)!='/0')&#123;</div><div class="line">          s++;</div><div class="line">          t++;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最简版本：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">strcpy</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">char</span> *t)</span></span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">while</span>(*s++=*t++)</div><div class="line">          ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里，s和t的自增运算放到了循环的测试部分中。表达式*t++的值是执行自增运算之前t所指向的字符。后缀运算符++表示在读取该字符之后才改变t的值。同样，在s执行自增运算之前，字符就被存储到了指针s指向的旧位置。上面的版本中表达式同’/0’的比较是多余的，因为只需要判断表达式的值是否为0即可。</p>
<h3 id="指针数组和指向指针的指针">指针数组和指向指针的指针</h3><p>这两个词次听起来挺新颖的，到底是什么意思呢？<br>由于指针本身也是变量，所以它们也可以像其他变量一样存储在数组中。这一点很容易理解。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">int</span> i;</div><div class="line">   <span class="keyword">char</span> b[]=&#123;<span class="string">"wustrive_2008"</span>&#125;;</div><div class="line">   <span class="keyword">char</span> *a[<span class="number">1</span>];</div><div class="line">   *a=b;</div><div class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(b);i++)</div><div class="line">          <span class="built_in">printf</span>(<span class="string">"%c"</span>,*(a[<span class="number">0</span>]+i));</div><div class="line">   <span class="built_in">printf</span>(<span class="string">"/n"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：wustrive_2008<br>这里库函数strlen，strlen为string类的标准库函数，所以要包含#include<string.h>。</string.h></p>
<p>下面我们来自己写一个strlen函数，我们把上面的例子该成这样：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">#include&lt;stdio.h&gt;</div><div class="line"></div><div class="line">int strlen(char *s)</div><div class="line">&#123;</div><div class="line">   char *p=s;</div><div class="line">   while(*p!='/0')</div><div class="line">          p++;</div><div class="line">   return p-s;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void main()</div><div class="line">&#123;</div><div class="line">   int i;</div><div class="line">   char b[]=&#123;"wustrive_2008"&#125;;</div><div class="line">   char *a[1];</div><div class="line">   *a=b;</div><div class="line">   for(i=0;i&lt;strlen(b);i++)</div><div class="line">          printf("%c",*(a[0]+i));</div><div class="line">   printf("/n");</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个运行结果和上个例子一样，不一样的只是我们自己实现了strlen函数，我们再编程时使用的库函数，都是语言的开发者或者系统为我们写好了的函数，其实我们也可以自己写。<br>这个例子很好的演示了指针数组的用法，指针数组a的值a[1]是一个指针，指向字符数组第一个字符。<br>指针的指针也很好理解，就是一个指针里放的是另一个指针的地址，而另一个指针可能指向一个变量的地址，还可能指向另一个指针。</p>
<h3 id="指针和多维数组">指针和多维数组</h3><p>看两个定义语句：int  a[5][10];    int  *b[5];</p>
<p>从语法角度讲，a[3][4]和b[3][4]都是对一个int对象的合法引用。但a是一个真正的二维数组，它分配了50个int类型长度的存储空间。但b定义仅仅分配了5个指针，并且没有初始化，它们必须进行显示的初始化，假设b的每个元素都指向一个有10个元素的数组，那么编译器就要为它分配50个int类型长度的存储空间以及5个指针存储空间。指针数组的一个重要优点在于，数组的每一行长度可以不同，也就是说，b的每个元素不必都指向一个有10个元素的向量。</p>
<h3 id="指向函数的指针：">指向函数的指针：</h3><p>在C语言中，函数虽然不是变量，但可以定义指向函数的指针。这种类型的指针可以被赋值，存放在数组中，传递给函数以及作为函数的返回值等。</p>
<p>如果下面的语句为一个函数的参数，表示什么意思：</p>
<p>int  (<em>p)(void  </em>,void  *)</p>
<p>它表明p是一个指向函数的指针，该函数具有两个void<em>类型的参数，其返回值类型为int。语句if((</em>p)(v[i],v[left])&lt;0)中，p的使用和其声明是一致的，p是一个指向函数的指针，<em>p代表一个函数。如果写成这样：int </em>p(void <em>,void </em>)则表明p是一个函数，该函数返回一个int类型的指针。</p>
<p>下面来看两个声明：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>  *f（）;      <span class="comment">//f是一个函数，它返回一个指向int类型的指针</span></div><div class="line"><span class="keyword">int</span>   (*pf)();     <span class="comment">//pf是一个指向函数的指针，该函数返回一个int类型的对象。</span></div></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="指针">指针</h3><p>相信大家对下面的代码不陌生：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class=]]>
    </summary>
    
      <category term="c" scheme="https://wustrive2008.github.io/tags/c/"/>
    
      <category term="数组" scheme="https://wustrive2008.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="指针" scheme="https://wustrive2008.github.io/tags/%E6%8C%87%E9%92%88/"/>
    
      <category term="cORc++" scheme="https://wustrive2008.github.io/categories/cORc/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[最大子序列问题]]></title>
    <link href="https://wustrive2008.github.io/2016/12/03/%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%88%97%E5%92%8C%E9%97%AE%E9%A2%98/"/>
    <id>https://wustrive2008.github.io/2016/12/03/算法/最大子序列和问题/</id>
    <published>2016-12-02T16:57:33.000Z</published>
    <updated>2016-12-02T17:27:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="最大子序列问题">最大子序列问题</h2><h3 id="问题描述：">问题描述：</h3><p>有这样一个序列：23,-23,11,43,-45,29,34,0,23,-12 ，求出这个序列中的最大子序列的和，例如从第0个元素到第3个元素是一个子序列，其和为54，最短的子序列可以只有一个元素，最长的子序列可以包含所有元素。</p>
<h3 id="算法1">算法1</h3><p>也是我们第一个想到的算法，是非常容易理解的一个算法，但是它效率最低，平均时间复杂度为O(n^3):</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMaxSubVector1</span><span class="params">(<span class="keyword">int</span>[] m)</span></span>&#123;  </div><div class="line">    <span class="keyword">int</span> maxSubVector=<span class="number">0</span>;  </div><div class="line">    <span class="keyword">int</span> i,j=<span class="number">0</span>,k=<span class="number">0</span>;  </div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m.length;i++)&#123;  </div><div class="line">        <span class="keyword">for</span>(j=i;j&lt;m.length;j++)&#123;  </div><div class="line">            <span class="keyword">int</span> sum=<span class="number">0</span>;  </div><div class="line">            <span class="keyword">for</span>( k=i;k&lt;j;k++)&#123;  </div><div class="line">                sum+=m[k];  </div><div class="line">                maxSubVector=Math.max(maxSubVector,sum);  </div><div class="line">            &#125;     </div><div class="line">        &#125;     </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> maxSubVector;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="算法2">算法2</h3><p>这是一个稍微改进的算法，它的平均时间复杂度为O(n^2)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMaxSubVector2</span><span class="params">(<span class="keyword">int</span>[] m)</span></span>&#123;  </div><div class="line">    <span class="keyword">int</span> maxSubVector=<span class="number">0</span>;  </div><div class="line">    <span class="keyword">int</span> i,j=<span class="number">0</span>;  </div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m.length;i++)&#123;  </div><div class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;  </div><div class="line">        <span class="keyword">for</span>(j=i;j&lt;m.length;j++)&#123;  </div><div class="line">            sum+=m[j];  </div><div class="line">            maxSubVector=Math.max(maxSubVector, sum);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> maxSubVector;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="算法3">算法3</h3><p>我们可以用分治算法的思想来解决这个问题，这样可以将平均时间复杂度降到O(nlogn)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMaxSubVector4</span><span class="params">(<span class="keyword">int</span>[] b,<span class="keyword">int</span> l,<span class="keyword">int</span> u)</span></span>&#123;  </div><div class="line">          </div><div class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;  </div><div class="line">        <span class="keyword">int</span> m = (l+u)/<span class="number">2</span>;  </div><div class="line">        <span class="keyword">if</span>(l&gt;u) <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">        <span class="keyword">if</span>(l==u) <span class="keyword">return</span> Math.max(<span class="number">0</span>,b[<span class="number">1</span>]);  </div><div class="line">        <span class="keyword">int</span> lmax=sum=<span class="number">0</span>;  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=m;i&gt;=<span class="number">1</span>;i--)&#123;  </div><div class="line">            sum+=b[i];  </div><div class="line">            lmax=Math.max(lmax, sum);  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">int</span> rmax=sum=<span class="number">0</span>;  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=u;i&gt;m;i--)&#123;  </div><div class="line">            sum+=b[i];  </div><div class="line">            rmax=Math.max(rmax, sum);     </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> max3(lmax+rmax, getMaxSubVector4(b,l,m),getMaxSubVector4(b,m+<span class="number">1</span>,u));  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">int</span> <span class="title">max3</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;  </div><div class="line">        <span class="keyword">if</span>(x&lt;y)&#123;  </div><div class="line">            x=y;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">if</span>(x&gt;z)&#123;  </div><div class="line">            <span class="keyword">return</span> x;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> z;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="算法4">算法4</h3><p>这个算法是一种扫描的思想，是一种线性时间O(n)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMaxSubVector5</span><span class="params">(<span class="keyword">int</span>[] b)</span></span>&#123;  </div><div class="line">    <span class="keyword">int</span> maxSubVector=<span class="number">0</span>;  </div><div class="line">    <span class="keyword">int</span> maxEnding=<span class="number">0</span>;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.length;i++)&#123;  </div><div class="line">        maxEnding=Math.max(maxEnding+b[i], <span class="number">0</span>);  </div><div class="line">        maxSubVector=Math.max(maxSubVector, maxEnding);  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> maxSubVector;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考">参考</h3><p>以上算法思想参考《编程珠玑》第二版</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="最大子序列问题">最大子序列问题</h2><h3 id="问题描述：">问题描述：</h3><p>有这样一个序列：23,-23,11,43,-45,29,34,0,23,-12 ，求出这个序列中的最大子序列的和，例如从第0个元素到第3个元素是一个子序列，其和为54]]>
    </summary>
    
      <category term="java" scheme="https://wustrive2008.github.io/tags/java/"/>
    
      <category term="算法" scheme="https://wustrive2008.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="最大子序列问题" scheme="https://wustrive2008.github.io/tags/%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98/"/>
    
      <category term="算法" scheme="https://wustrive2008.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git钩子详解]]></title>
    <link href="https://wustrive2008.github.io/2016/12/02/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/git%E9%92%A9%E5%AD%90%E8%AF%A6%E8%A7%A3/"/>
    <id>https://wustrive2008.github.io/2016/12/02/版本控制/git钩子详解/</id>
    <published>2016-12-02T15:12:11.000Z</published>
    <updated>2016-12-02T16:45:08.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Git钩子详解">Git钩子详解</h2><h3 id="钩子">钩子</h3><p>Git钩子是在Git仓库中特定事件发生时自动运行的脚本。可以定制一些钩子，这些钩子可以在特定的情况下被执行，分为Client端的钩子和Server端的钩子。Client端钩子被operation触发，比如commit，merge等，Server端钩子被网络动作触发。</p>
<h3 id="钩子位置">钩子位置</h3><p>$project_name/.git/hooks</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">-rwxr-xr-x  1 wubaoguo  staff   478B 11  6 00:34 applypatch-msg.sample</div><div class="line">-rwxr-xr-x  1 wubaoguo  staff   896B 11  6 00:34 commit-msg.sample</div><div class="line">-rwxr-xr-x  1 wubaoguo  staff   189B 11  6 00:34 post-update.sample</div><div class="line">-rwxr-xr-x  1 wubaoguo  staff   424B 11  6 00:34 pre-applypatch.sample</div><div class="line">-rwxr-xr-x  1 wubaoguo  staff   1.6K 11  6 00:34 pre-commit.sample</div><div class="line">-rwxr-xr-x  1 wubaoguo  staff   1.3K 11  6 00:34 pre-push.sample</div><div class="line">-rwxr-xr-x  1 wubaoguo  staff   4.8K 11  6 00:34 pre-rebase.sample</div><div class="line">-rwxr-xr-x  1 wubaoguo  staff   1.2K 11  6 00:34 prepare-commit-msg.sample</div><div class="line">-rwxr-xr-x  1 wubaoguo  staff   3.5K 11  6 00:34 update.sample</div></pre></td></tr></table></figure>
<h3 id="常见钩子">常见钩子</h3><ul>
<li>pre-commit  pre-commit脚本在每次你运行git commit命令时，Git向你询问提交信息或者产生提交对象时被执行。</li>
<li>prepare-commit-msg  prepare-commit-msg钩子在pre-commit钩子在文本编辑器中生成提交信息之后被调用。这被用来方便地修改自动生成的squash或merge提交。</li>
<li>commit-msg  commit-msg钩子和prepare-commit-msg钩子很像，但它会在用户输入提交信息之后被调用。</li>
<li>post-commit  post-commit钩子在commit-msg钩子之后立即被运行 。</li>
<li>post-checkout  post-checkout钩子和post-commit钩子很像，但它在你用git checkout查看引用的时候被调用。</li>
<li>pre-rebase  pre-rebase钩子在git rebase发生更改之前运行</li>
<li>pre-receive p re-receive钩子在有人用git push向仓库推送代码时被执行。</li>
<li>update  update钩子在pre-receive之后被调用，分别被每个推送上来的引用分别调用。</li>
<li>post-receive  post-receive钩子在成功推送后被调用，适合用于发送通知。</li>
</ul>
<h3 id="钩子使用示例">钩子使用示例</h3><p>通过post-commit发送commit通知</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> smtplib</div><div class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</div><div class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> check_output</div><div class="line"></div><div class="line"><span class="comment"># 获得新提交的git log --stat输出</span></div><div class="line">log = check_output([<span class="string">'git'</span>, <span class="string">'log'</span>, <span class="string">'-1'</span>, <span class="string">'--stat'</span>, <span class="string">'HEAD'</span>])</div><div class="line"></div><div class="line"><span class="comment"># 创建一个纯文本的邮件内容</span></div><div class="line">msg = MIMEText(<span class="string">"Look, I'm actually doing some work:\n\n%s"</span> % log)</div><div class="line"></div><div class="line">msg[<span class="string">'Subject'</span>] = <span class="string">'Git post-commit hook notification'</span></div><div class="line">msg[<span class="string">'From'</span>] = <span class="string">'mary@example.com'</span></div><div class="line">msg[<span class="string">'To'</span>] = <span class="string">'boss@example.com'</span></div><div class="line"></div><div class="line"><span class="comment"># 发送信息</span></div><div class="line">SMTP_SERVER = <span class="string">'smtp.example.com'</span></div><div class="line">SMTP_PORT = <span class="number">587</span></div><div class="line"></div><div class="line">session = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)</div><div class="line">session.ehlo()</div><div class="line">session.starttls()</div><div class="line">session.ehlo()</div><div class="line">session.login(msg[<span class="string">'From'</span>], <span class="string">'secretPassword'</span>)</div><div class="line"></div><div class="line">session.sendmail(msg[<span class="string">'From'</span>], msg[<span class="string">'To'</span>], msg.as_string())</div><div class="line">session.quit()</div></pre></td></tr></table></figure>
<h3 id="参考">参考</h3><p><a href="https://github.com/geeeeeeeeek/git-recipes/wiki/5.4-Git%E9%92%A9%E5%AD%90%EF%BC%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BD%A0%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81" target="_blank" rel="external">Git钩子：自定义你的工作流</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Git钩子详解">Git钩子详解</h2><h3 id="钩子">钩子</h3><p>Git钩子是在Git仓库中特定事件发生时自动运行的脚本。可以定制一些钩子，这些钩子可以在特定的情况下被执行，分为Client端的钩子和Server端的钩子。Client端钩子被o]]>
    </summary>
    
      <category term="git" scheme="https://wustrive2008.github.io/tags/git/"/>
    
      <category term="版本控制" scheme="https://wustrive2008.github.io/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
      <category term="项目管理" scheme="https://wustrive2008.github.io/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
      <category term="钩子函数" scheme="https://wustrive2008.github.io/tags/%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/"/>
    
      <category term="版本控制" scheme="https://wustrive2008.github.io/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[简单排序查找算法总结]]></title>
    <link href="https://wustrive2008.github.io/2016/11/28/%E7%AE%97%E6%B3%95/%E7%AE%80%E5%8D%95%E6%8E%92%E5%BA%8F%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://wustrive2008.github.io/2016/11/28/算法/简单排序查找算法总结/</id>
    <published>2016-11-27T16:02:46.000Z</published>
    <updated>2016-11-28T14:14:10.000Z</updated>
    <content type="html"><![CDATA[<h2 id="简单排序查找算法总结">简单排序查找算法总结</h2><h3 id="排序算法">排序算法</h3><h4 id="冒泡排序">冒泡排序</h4><p>存在10个不同大小的气泡，由底至上地把较少的气泡逐步地向上升，这样经过遍历一次后，最小的气泡就会被上升到顶（下标为0），然后再从底至上地这样升，循环直至十个气泡大小有序。<br>即相邻的数据进行两两比较，小数放在前面，大数放在后面，这样一趟下来，最小的数就被排在了第一位，第二趟也是如此，如此类推，直到所有的数据排序完成</p>
<h4 id="插入排序">插入排序</h4><p>将数据分为两部分，有序部分与无序部分，<br>一开始有序部分包含第1个元素，依次将无序的元素插入到有序部分，直到所有元素有序。<br>插入排序又分为直接插入排序、二分插入排序、链表插入等，<br>它是稳定的排序算法，时间复杂度为O(n^2)</p>
<h4 id="快速排序">快速排序</h4><p>快速排序是目前在实践中非常高效的一种排序算法，它不是稳定的排序算法，平均时间复杂度为O(nlogn)，最差情况下复杂度为O(n^2)。<br>它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，<br>其中一部分的所有数据都比另外一部分的所有数据都要小，<br>然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p>
<h4 id="选择排序">选择排序</h4><p>基本原理：先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，<br>然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。<br>以此类推，直到所有元素均排序完毕。</p>
<h4 id="堆排序">堆排序</h4><p>先将初始数据R[1..n]建成一个最大堆，此堆为初始的无序区<br>再将关键字最大的记录R[1]（即堆顶）和无序区的最后一个记录R[n]交换，由此得到新的无序区R[1..n-1]和有序区R[n]，且满足R[1..n-1].keys≤R[n].key<br>由于交换后新的根R[1]可能违反堆性质，故应将当前无序区R[1..n-1]调整为堆。<br>重复2、3步骤，直到无序区只有一个元素为止。</p>
<h4 id="归并排序">归并排序</h4><p>将序列每相邻两个数字进行归并操作（merge)，形成floor(n/2)个序列，排序后每个序列包含两个元素<br>将上述序列再次归并，形成floor(n/4)个序列，每个序列包含四个元素<br>重复步骤2，直到所有元素排序完毕<br>归并排序是稳定的排序算法，其时间复杂度为O(nlogn)如果是使用链表的实现的话，空间复杂度可以达到O(1)，但如果是使用数组来存储数据的话，在归并的过程中，需要临时空间来存储归并好的数据，所以空间复杂度为O(n)</p>
<h3 id="搜索查找算法">搜索查找算法</h3><h4 id="顺序查找">顺序查找</h4><p>从表的一端开始，顺序扫描线性表，依次将扫描到的结点关键宇和给定值K相比较。<br>若当前扫描到的结点关键字与K相等，则查找成功；若扫描结束后，仍未找到关键字等于K的结点，则查找失败。<br>优点: 不要求待查找序列有序<br>缺点: 效率低，特别是待查找序列很大时</p>
<h4 id="块查找">块查找</h4><ol>
<li>首先将查找表分成若干块，在每一块中数据元素的存放是任意的，但块与块之间必须是有序的（假设这种排序是按关键字值递增的，也就是说在第一块中任意一个数据元素的关键字都小于第二块中所有数据元素的关键字，第二块中任意一个数据元素的关键字都小于第三块中所有数据元素的关键字，依次类推）； </li>
<li>建立一个索引表，把每块中最大的关键字值按块的顺序存放在一个辅助数组中，这个索引表也按升序排列； </li>
<li>查找时先用给定的关键字值在索引表中查找，确定满足条件的数据元素存放在哪个块中，查找方法既可以是折半方法，也可以是顺序查找。 </li>
<li>再到相应的块中顺序查找，便可以得到查找的结果。<br>优点：<br>①在表中插入或删除一个记录时，只要找到该记录所属的块，就在该块内进行插入和删除运算。<br>②因块内记录的存放是任意的，所以插入或删除比较容易，无须移动大量记录。<br>分块查找的主要代价是增加一个辅助数组的存储空间和将初始表分块排序的运算。<br>分块查找算法的效率介于顺序查找和二分查找之间。</li>
</ol>
<h4 id="二分查找">二分查找</h4><p>条件：数组递增<br>基本思想： </p>
<ol>
<li>查找区间R[low..high]，首先确定该区间的中点位置：mid = (low + high) / 2; </li>
<li>然后将待查的K值与R[mid]比较：若相等，则查找成功并返回此位置，否则须确定新的查找区间，继续二分查找。<br>① 若R[mid] &gt; K，则由数组的有序性可知R[mid..n]均大于K，因此该结点必定是在位置mid左边的R[0..mid-1]中<br>② 若R[mid] &lt; K，则要查找的K必在mid的右边的R[mid+1..n]中，下一次查找是针对新的查找区间进行的。 </li>
<li>因此，从初始的查找区间R[1..n]开始，每经过一次与当前查找区间的中点位置上的结点关键字的比较，就可确定查找是否成功，不成功则当前的查找区间就缩小一半。这一过程重复直至找到关键字为K的结点，或者直至当前的查找区间为空(即查找失败)时为止。 </li>
</ol>
<h3 id="附录">附录</h3><p><a href="https://github.com/wustrive2008/simple-algorithm" target="_blank" rel="external">简单算法的多语言示例</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="简单排序查找算法总结">简单排序查找算法总结</h2><h3 id="排序算法">排序算法</h3><h4 id="冒泡排序">冒泡排序</h4><p>存在10个不同大小的气泡，由底至上地把较少的气泡逐步地向上升，这样经过遍历一次后，最小的气泡就会被上升到顶（下标]]>
    </summary>
    
      <category term="java" scheme="https://wustrive2008.github.io/tags/java/"/>
    
      <category term="golang" scheme="https://wustrive2008.github.io/tags/golang/"/>
    
      <category term="c" scheme="https://wustrive2008.github.io/tags/c/"/>
    
      <category term="算法" scheme="https://wustrive2008.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="https://wustrive2008.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="查找" scheme="https://wustrive2008.github.io/tags/%E6%9F%A5%E6%89%BE/"/>
    
      <category term="算法" scheme="https://wustrive2008.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[艺术与哲学作品的作用]]></title>
    <link href="https://wustrive2008.github.io/2016/11/04/%E6%91%98%E5%BD%95/%E8%89%BA%E6%9C%AF%E4%B8%8E%E5%93%B2%E5%AD%A6%E4%BD%9C%E5%93%81%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <id>https://wustrive2008.github.io/2016/11/04/摘录/艺术与哲学作品的作用/</id>
    <published>2016-11-04T13:12:26.000Z</published>
    <updated>2016-11-11T14:53:46.000Z</updated>
    <content type="html"><![CDATA[<p>我们在艺术和哲学作品中找打的是我们自己的痛苦和奋斗的客观表述通过声音，语言和形象予以诠释和再现。艺术家和哲学家不仅向我们展示我们的感受，而且以我们做不到的尖锐和智慧表达我们的体验，他们将我们生活的各个层面勾画出来，我们能认出是自己的，但是凭自己决不能理解的那么清楚，他们向我们解释我们的生存条件助我们解惑并减少孤立无援之感。我们也许不得不继续挖地洞，但是通过创造式的作品至少能获得片刻的顿悟，洞察我们的苦难，从而可以免于苦难带来的震惊孤立之感。<br>我们在黑暗中掘地洞之余一定要努力化眼泪为知识。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我们在艺术和哲学作品中找打的是我们自己的痛苦和奋斗的客观表述通过声音，语言和形象予以诠释和再现。艺术家和哲学家不仅向我们展示我们的感受，而且以我们做不到的尖锐和智慧表达我们的体验，他们将我们生活的各个层面勾画出来，我们能认出是自己的，但是凭自己决不能理解的那么清楚，他们向我]]>
    </summary>
    
      <category term="摘录" scheme="https://wustrive2008.github.io/tags/%E6%91%98%E5%BD%95/"/>
    
      <category term="艺术" scheme="https://wustrive2008.github.io/tags/%E8%89%BA%E6%9C%AF/"/>
    
      <category term="哲学" scheme="https://wustrive2008.github.io/tags/%E5%93%B2%E5%AD%A6/"/>
    
      <category term="摘录" scheme="https://wustrive2008.github.io/categories/%E6%91%98%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2016.8.27分享内容]]></title>
    <link href="https://wustrive2008.github.io/2016/08/27/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E5%88%86%E4%BA%AB/2016.8.27%E5%88%86%E4%BA%AB%E5%86%85%E5%AE%B9/"/>
    <id>https://wustrive2008.github.io/2016/08/27/工作与分享/2016.8.27分享内容/</id>
    <published>2016-08-27T14:12:45.000Z</published>
    <updated>2016-11-05T18:14:33.000Z</updated>
    <content type="html"><![CDATA[<h4 id="开发规范">开发规范</h4><h5 id="目的">目的</h5><ul>
<li>提高工作效率<br>  指定规范的最重要目的应该是提高工作效率。在一个没有规范的开发团队中，制定一个能够提高开发效率的规范是困难的，往往需要更多的试错和磨合，同时这也是迫切需要规范的信号。</li>
<li>减少运维成本<br>  规范常常是后期运维的有用依据。项目后期运维的难易往往依赖开发规范的执行力度。</li>
<li>团队传承<br>  熟悉开发规范往往是团队新入的第一个工作任务，有时也是一个新人对团队好坏的第一依据，更是新人更快融入团队的有效工具，可以想象，对于一个新人，面对一个没有任何规范的团队是多么的糟糕。</li>
</ul>
<h5 id="前提">前提</h5><ul>
<li>使用方便，流畅<br>  一个规范首先要让大家用起来爽，不能影响工作的流畅性，规范中的任何一条都不应该是多余的，每一步都应该是必要的。</li>
<li>协调性<br>  管理上应该对规范的顺利执行提供良好的环境，不能忽视执行规范带来的时间成本。保证整个开发周期的协调性，没有一个好的设计规范和运维规范，很难保证一个好的开发规范能够实施顺利。</li>
</ul>
<h5 id="原则">原则</h5><ul>
<li>约束随意性保证创造性<br>  规范不能影响开发工作的创造性，所以规范的灵活度要把握好。一个好的规范往往只是用来约束一小部分人，就像制定法律来约束小部分思想邪恶的“坏人”的行为一样，不能影响到大部分好的行为。一个国家的法律如果缺失灵活性，往往会压制国民的创造性，影响国家的发展。</li>
</ul>
<h5 id="方法">方法</h5><ul>
<li>避免个人偏好<br>  规范是由人来制定的，所以很难避免规范倾向于个人偏好，如果一个规范完全按照某个人的偏好来制定，这个规范在一开始就注定是失败的。</li>
<li>基于行业经验<br>  制定规范一个较好的实践就是参考行业经验，在一些大公司的规范基础上结合自己团队的实际情况，进行优化、改造。就像我们基于马列的社会主义结合我国的国情指定特色社会主义一样。</li>
<li>一人制定 多人讨论定稿<br>  群众是愚蠢的，所以不要在没有任何基础和准备的情况下开会讨论任何事情，在这种情况下的最好也就是一个“中庸”的结果，不要陷入人多力量大这个思维陷阱。一人出方案，多人讨论，集思广益是很好的实践。</li>
</ul>
<h4 id="个人思维思想">个人思维思想</h4><ul>
<li>训练独立思考能力，增强辨别是非能力<br>  网络时代，很多人只会接受信息，但是独立思考能力不强。所谓独立思考，不是特立独行，不是一定要对社会问题有不同寻常的论断，而是说这个论断应该做到知其然知其所以然。</li>
<li>战胜对未知的恐惧<br>  害怕未知的事物是人的本性，是从我们祖先那里遗传下来的。常问自己：“你害怕什么”，多做尝试，通过尝试加强信心，从而慢慢克服恐惧</li>
</ul>
<h4 id="三体与互联网公司">三体与互联网公司</h4><ul>
<li><p>三体观点</p>
<ul>
<li>生存是文明的第一需要</li>
<li>文明不断增长和扩张，但宇宙中的物质总量保持不变</li>
<li>猜疑链：宇宙中的不同文明会猜疑对方并采取各种手段毁灭对方</li>
<li>技术爆炸：任何一个不起眼的小文明在宇宙尺度中很快可以通过技术大爆炸超越自己</li>
</ul>
</li>
<li><p>互联网环境</p>
<ul>
<li>生存是公司的第一需要</li>
<li>公司不断增长和扩张，商业环境中的市场总量有限</li>
<li>垄断主义。商业模式的本质造成只有绝对的垄断，才可以绝对的利用资源提高效率，创造利润。每一个公司为了实现公司战略，必须逼死其他公司，占有绝对的市场垄断</li>
<li>颠覆逆袭。借助互联网的力量，小公司随时可能发生商业模式爆炸，一下子远远走在大公司前面，灭掉大公司</li>
</ul>
</li>
<li><p>隐藏自己 干掉别人<br>  小米、凡客、facebook，这些都是近几年借助互联网思维异军突起颠覆行业格局和品牌影响力的公司。所以在现代商业模式之下，每一个公司都要学会隐藏自己，暴露的越早，面临的危险越大。</p>
</li>
</ul>
<h4 id="《三体》资料">《三体》资料</h4><ul>
<li><a href="http://sanwen8.cn/p/142AwLy.html" target="_blank" rel="external">为啥大佬们都爱看《三体》</a></li>
<li><a href="https://pan.baidu.com/s/1nvjMnIL" target="_blank" rel="external">《三体》电子书下载</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="开发规范">开发规范</h4><h5 id="目的">目的</h5><ul>
<li>提高工作效率<br>  指定规范的最重要目的应该是提高工作效率。在一个没有规范的开发团队中，制定一个能够提高开发效率的规范是困难的，往往需要更多的试错和磨合，同时这也是迫切需要规]]>
    </summary>
    
      <category term="规范" scheme="https://wustrive2008.github.io/tags/%E8%A7%84%E8%8C%83/"/>
    
      <category term="分享" scheme="https://wustrive2008.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
      <category term="三体" scheme="https://wustrive2008.github.io/tags/%E4%B8%89%E4%BD%93/"/>
    
      <category term="分享" scheme="https://wustrive2008.github.io/categories/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[正则表达式]]></title>
    <link href="https://wustrive2008.github.io/2016/03/21/Linux/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://wustrive2008.github.io/2016/03/21/Linux/正则表达式/</id>
    <published>2016-03-21T08:00:05.000Z</published>
    <updated>2016-11-05T18:14:33.000Z</updated>
    <content type="html"><![CDATA[<p>正则表达式，又称正规表示法、常规表示法（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些符合某个模式的文本。<br><a id="more"></a></p>
<h3 id="基础语法">基础语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line">------------------------------------------------------------------------------</div><div class="line">字符         | 说明</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\            | 将下一字符标记为特殊字符、文本、反向引用或八进制转义符</div><div class="line">------------------------------------------------------------------------------</div><div class="line">^            | 匹配输入字符串开始的位置</div><div class="line">------------------------------------------------------------------------------</div><div class="line">$            | 匹配输入字符串结束的位置</div><div class="line">------------------------------------------------------------------------------</div><div class="line">*            | 零次或多次匹配前面的字符或子表达式</div><div class="line">------------------------------------------------------------------------------</div><div class="line">+            | 一次或多次匹配前面的字符或子表达式</div><div class="line">------------------------------------------------------------------------------</div><div class="line">?            | 零次或一次匹配前面的字符或子表达式</div><div class="line">------------------------------------------------------------------------------</div><div class="line">&#123;n&#125;          | n 是非负整数。正好匹配 n 次</div><div class="line">------------------------------------------------------------------------------</div><div class="line">&#123;n,&#125;         | 至少匹配 n 次</div><div class="line">------------------------------------------------------------------------------</div><div class="line">&#123;n,m&#125;        | 匹配至少 n 次，至多 m 次</div><div class="line">------------------------------------------------------------------------------</div><div class="line">?            | 当此字符紧随任何其他限定符（*、+、?、&#123;n&#125;、&#123;n,&#125;、&#123;n,m&#125;）</div><div class="line">              之后时，匹配模式是&quot;非贪心的&quot;。&quot;非贪心的&quot;模式匹配搜索到的、</div><div class="line">              尽可能短的字符串，而默认的&quot;贪心的&quot;模式匹配搜索到的、尽可能长的字符串</div><div class="line">------------------------------------------------------------------------------</div><div class="line">.            | 匹配除&quot;\r\n&quot;之外的任何单个字符</div><div class="line">------------------------------------------------------------------------------</div><div class="line">(pattern)    | 匹配 pattern 并捕获该匹配的子表达式</div><div class="line">------------------------------------------------------------------------------</div><div class="line">(?:pattern)  | 匹配 pattern 但不捕获该匹配的子表达式，即它是一个非捕获匹配，</div><div class="line">              不存储供以后使用的匹配</div><div class="line">------------------------------------------------------------------------------</div><div class="line">(?=pattern)  | 执行正向预测先行搜索的子表达式，该表达式匹配处于匹配 </div><div class="line">              pattern 的字符串的起始点的字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配</div><div class="line">------------------------------------------------------------------------------</div><div class="line">(?!pattern)  | 执行反向预测先行搜索的子表达式，该表达式匹配不处于匹配 </div><div class="line">              pattern 的字符串的起始点的搜索字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配</div><div class="line">------------------------------------------------------------------------------</div><div class="line">x|y          | 匹配 x 或 y</div><div class="line">------------------------------------------------------------------------------</div><div class="line">[xyz]        | 字符集。匹配包含的任一字符</div><div class="line">------------------------------------------------------------------------------</div><div class="line">[^xyz]       | 反向字符集。匹配未包含的任何字符</div><div class="line">------------------------------------------------------------------------------</div><div class="line">[a-z]        | 字符范围。匹配指定范围内的任何字符</div><div class="line">------------------------------------------------------------------------------</div><div class="line">[^a-z]       | 反向范围字符。匹配不在指定的范围内的任何字符</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\b           | 匹配一个字边界，即字与空格间的位置。</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\B           | 非字边界匹配。</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\cx          | 匹配 x 指示的控制字符。例如，\cM 匹配 Control-M 或回车符。</div><div class="line">              x 的值必须在 A-Z 或 a-z 之间</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\d           | 数字字符匹配。等效于 [0-9]。</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\D           | 非数字字符匹配。等效于 [^0-9]。</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\f           | 换页符匹配。等效于 \x0c 和 \cL。</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\n           | 换行符匹配。等效于 \x0a 和 \cJ。</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\r           | 匹配一个回车符。等效于 \x0d 和 \cM。</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\s           | 匹配任何空白字符，包括空格、制表符、换页符等。</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\S           | 匹配任何非空白字符。与 [^ \f\n\r\t\v] 等效。</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\t           | 制表符匹配。与 \x09 和 \cI 等效。</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\v           | 垂直制表符匹配。与 \x0b 和 \cK 等效。</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\w           | 匹配任何字类字符，包括下划线。与&quot;[A-Za-z0-9_]&quot;等效</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\W           | 与任何非单词字符匹配。与&quot;[^A-Za-z0-9_]&quot;等效。</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\xn          | 匹配 n，此处的 n 是一个十六进制转义码。</div><div class="line">              十六进制转义码必须正好是两位数长</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\num         | 匹配 num，此处的 num 是一个正整数。到捕获匹配的反向引用</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\n           | 标识一个八进制转义码或反向引用。如果 \n 前面至少有 n 个</div><div class="line">              捕获子表达式，那么 n 是反向引用。否则，如果 n 是八进制数 (0-7)，那么 n 是八进制转义码。</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\nm          | 标识一个八进制转义码或反向引用。</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\nml         | 当 n 是八进制数 (0-3)，m 和 l 是八进制数 (0-7) 时，</div><div class="line">              匹配八进制转义码 nml。</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\un          | 匹配 n，其中 n 是以四位十六进制数表示的 Unicode 字符。</div><div class="line">              例如，\u00A9 匹配版权符号 (©)。</div><div class="line">------------------------------------------------------------------------------</div></pre></td></tr></table></figure>
<h3 id="常用正则表达式">常用正则表达式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">用户名：/^[a-z0-9_-]&#123;3,16&#125;$/</div><div class="line">密码：/^[a-z0-9_-]&#123;6,18&#125;$/</div><div class="line">十六进制值：/^#?([a-f0-9]&#123;6&#125;|[a-f0-9]&#123;3&#125;)$/</div><div class="line">电子邮箱：/^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]&#123;2,6&#125;)$/</div><div class="line">URL：/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]&#123;2,6&#125;)([\/\w \.-]*)*\/?$/</div><div class="line">IP 地址：/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/</div><div class="line">HTML 标签：/^&lt;([a-z]+)([^&lt;]+)*(?:&gt;(.*)&lt;\/\1&gt;|\s+\/&gt;)$/</div><div class="line">Unicode编码中的汉字范围：/^[u4e00-u9fa5],&#123;0,&#125;$/</div><div class="line">匹配中文字符的正则表达式： [\u4e00-\u9fa5]</div><div class="line">评注：匹配中文还真是个头疼的事，有了这个表达式就好办了</div><div class="line">匹配双字节字符(包括汉字在内)：[^\x00-\xff]</div><div class="line">评注：可以用来计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）</div><div class="line">匹配空白行的正则表达式：\n\s*\r</div><div class="line">评注：可以用来删除空白行</div><div class="line">匹配HTML标记的正则表达式：&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/\1&gt;|&lt;.*? /&gt;</div><div class="line">评注：网上流传的版本太糟糕，上面这个也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力</div><div class="line">匹配首尾空白字符的正则表达式：^\s*|\s*$</div><div class="line">评注：可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式</div><div class="line">匹配Email地址的正则表达式：\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*</div><div class="line">评注：表单验证时很实用</div><div class="line">匹配网址URL的正则表达式：[a-zA-z]+://[^\s]*</div><div class="line">评注：网上流传的版本功能很有限，上面这个基本可以满足需求</div><div class="line">匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$</div><div class="line">评注：表单验证时很实用</div><div class="line">匹配国内电话号码：\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;</div><div class="line">评注：匹配形式如 0511-4405222 或 021-87888822</div><div class="line">匹配腾讯QQ号：[1-9][0-9]&#123;4,&#125;</div><div class="line">评注：腾讯QQ号从10000开始</div><div class="line">匹配中国大陆邮政编码：[1-9]\d&#123;5&#125;(?!\d)</div><div class="line">评注：中国大陆邮政编码为6位数字</div><div class="line">匹配身份证：\d&#123;15&#125;|\d&#123;18&#125;</div><div class="line">评注：中国大陆的身份证为15位或18位</div><div class="line">匹配ip地址：\d+\.\d+\.\d+\.\d+</div><div class="line">评注：提取ip地址时有用</div><div class="line">匹配特定数字：</div><div class="line">^[1-9]\d*$　 　 //匹配正整数</div><div class="line">^-[1-9]\d*$ 　 //匹配负整数</div><div class="line">^-?[1-9]\d*$　　 //匹配整数</div><div class="line">^[1-9]\d*|0$　 //匹配非负整数（正整数 + 0）</div><div class="line">^-[1-9]\d*|0$　　 //匹配非正整数（负整数 + 0）</div><div class="line">^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$　　 //匹配正浮点数</div><div class="line">^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$　 //匹配负浮点数</div><div class="line">^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$　 //匹配浮点数</div><div class="line">^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$　　 //匹配非负浮点数（正浮点数 + 0）</div><div class="line">^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$　　//匹配非正浮点数（负浮点数 + 0）</div><div class="line">评注：处理大量数据时有用，具体应用时注意修正</div><div class="line">匹配特定字符串：</div><div class="line">^[A-Za-z]+$　　//匹配由26个英文字母组成的字符串</div><div class="line">^[A-Z]+$　　//匹配由26个英文字母的大写组成的字符串</div><div class="line">^[a-z]+$　　//匹配由26个英文字母的小写组成的字符串</div><div class="line">^[A-Za-z0-9]+$　　//匹配由数字和26个英文字母组成的字符串</div><div class="line">^\w+$　　//匹配由数字、26个英文字母或者下划线组成的字符串</div></pre></td></tr></table></figure>
<h3 id="分组捕获_“()”">分组捕获 “()”</h3><h4 id="分组">分组</h4><p>用小括号来指定子表达式(也叫做分组)，然后你就可以指定这个子表达式的重复次数了，你也可以对子表达式进行其它一些操作。<br>默认情况下，每个分组会自动拥有一个组号，规则是：从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。<br>示例：<br>(\d{1,3}.){3}\d{1,3}  是一个简单的IP地址匹配表达式。要理解这个表达式，请按下列顺序分析它：\d{1,3}匹配1到3位的数字，(\d{1,3}.){3}匹配三位数字加上一个英文句号(这个整体也就是这个分组)重复3次，最后再加上一个一到三位的数字(\d{1,3})</p>
<h4 id="反向引用">反向引用</h4><p>后向引用用于重复搜索前面某个分组匹配的文本,示例:<br>\b(\w+)\b\s+\1\b可以用来匹配重复的单词，像go go, 或者kitty kitty。这个表达式首先是一个单词，也就是单词开始处和结束处之间的多于一个的字母或数字(\b(\w+)\b)，这个单词会被捕获到编号为1的分组中，然后是1个或几个空白符(\s+)，最后是分组1中捕获的内容（也就是前面匹配的那个单词）(\1)</p>
<h4 id="自定义组名">自定义组名</h4><p>你也可以自己指定子表达式的组名。要指定一个子表达式的组名，请使用这样的语法：(?<word>\w+)(或者把尖括号换成’也行：(?’Word’\w+)),这样就把\w+的组名指定为Word了。要反向引用这个分组捕获的内容，你可以使用\k<word>,所以上一个例子也可以写成这样：\b(?<word>\w+)\b\s+\k<word>\b。</word></word></word></word></p>
<p>常用的分组语法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">分类        代码/语法              说明</div><div class="line">-------------------------------------------------------------------------------</div><div class="line">捕获        (exp)                  匹配exp,并捕获文本到自动命名的组里</div><div class="line">-------------------------------------------------------------------------------</div><div class="line">            (?&lt;name&gt;exp)           匹配exp,并捕获文本到名称为name的组里，</div><div class="line">                                   也可以写成(?&apos;name&apos;exp)   </div><div class="line">-------------------------------------------------------------------------------</div><div class="line">            (?:exp)                匹配exp,不捕获匹配的文本，也不给此分组分配</div><div class="line">                                   组号</div><div class="line">-------------------------------------------------------------------------------</div><div class="line">零宽断言    (?=exp)                匹配exp前面的位置</div><div class="line">-------------------------------------------------------------------------------</div><div class="line">            (?&lt;=exp)               匹配exp后面的位置</div><div class="line">-------------------------------------------------------------------------------</div><div class="line">            (?!exp)                匹配后面跟的不是exp的位置</div><div class="line">-------------------------------------------------------------------------------</div><div class="line">            (?&lt;!exp)               匹配前面不是exp的位置</div></pre></td></tr></table></figure></p>
<h3 id="零宽断言">零宽断言</h3><h4 id="零宽断言-1">零宽断言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(?=exp)也叫零宽度正预测先行断言，它断言自身出现的位置的后面能匹配表达式exp。比如\b\w+(?=ing\b)，匹配以ing结尾的单词的前面部分(除了ing以外的部分)，如查找I&apos;m singing while you&apos;re dancing.时，它会匹配sing和danc。</div><div class="line">(?&lt;=exp)也叫零宽度正回顾后发断言，它断言自身出现的位置的前面能匹配表达式exp。比如(?&lt;=\bre)\w+\b会匹配以re开头的单词的后半部分(除了re以外的部分)，例如在查找reading a book时，它匹配ading。</div></pre></td></tr></table></figure>
<h4 id="负向零宽断言">负向零宽断言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">\b\w*q[^u]\w*\b匹配包含后面不是字母u的字母q的单词。但是如果多做测试(或者你思维足够敏锐，直接就观察出来了)，你会发现，如果q出现在单词的结尾的话，像Iraq,Benq，这个表达式就会出错。这是因为[^u]总要匹配一个字符，所以如果q是单词的最后一个字符的话，后面的[^u]将会匹配q后面的单词分隔符(可能是空格，或者是句号或其它的什么)，后面的\w*\b将会匹配下一个单词，于是\b\w*q[^u]\w*\b就能匹配整个Iraq fighting。负向零宽断言能解决这样的问题，因为它只匹配一个位置，并不消费任何字符。现在，我们可以这样来解决这个问题：\b\w*q(?!u)\w*\b。</div><div class="line">零宽度负预测先行断言(?!exp)，断言此位置的后面不能匹配表达式exp。例如：\d&#123;3&#125;(?!\d)匹配三位数字，而且这三位数字的后面不能是数字；\b((?!abc)\w)+\b匹配不包含连续字符串abc的单词。</div><div class="line">同理，我们可以用</div><div class="line">(?&lt;!exp),零宽度负回顾后发断言来断言此位置的前面不能匹配表达式exp：(?&lt;![a-z])\d&#123;7&#125;匹配前面不是小写字母的七位数字</div></pre></td></tr></table></figure>
<h3 id="贪婪与懒惰">贪婪与懒惰</h3><p>当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能多的字符。以这个表达式为例：a.<em>b，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，它会匹配整个字符串aabab。这被称为贪婪匹配。<br>有时，我们更需要懒惰匹配，也就是匹配尽可能少的字符。前面给出的限定符都可以被转化为懒惰匹配模式，只要在它后面加上一个问号?。这样.</em>?就意味着匹配任意数量的重复，但是在能使整个匹配成功的前提下使用最少的重复。现在看看懒惰版的例子吧：<br>a.*?b匹配最短的，以a开始，以b结束的字符串。如果把它应用于aabab的话，它会匹配aab（第一到第三个字符）和ab（第四到第五个字符）</p>
<h3 id="正则表达式编写建议">正则表达式编写建议</h3><h4 id="常见问题">常见问题</h4><p>误匹配：指正则表达式所匹配的内容范围超出了所需要范围，有些文本明明不符合要求，但是被所写的正则式“击中了”。例如，如果使用\d{11}来匹配11位的手机号，\d{11}不单能匹配正确的手机号，它还会匹配98765432100这样的明显不是手机号的字符串。我们把这样的匹配称之为误匹配。<br>漏匹配：指正则表达式所匹配的内容所规定的范围太狭窄，有些文本确实是所需要的，但是所写的正则没有将这种情况囊括在内。例如，使用\d{18}来匹配18位的身份证号码，就会漏掉结尾是字母X的情况。</p>
<p>写出一条正则表达式，既可能只出现误匹配（条件写得极宽松，其范围大于目标文本），也可能只出现漏匹配（只描述了目标文本中多种情况种的一种），还可能既有误匹配又有漏匹配。例如，使用\w+.com来匹配.com结尾的域名，既会误匹配abc_.com这样的字串（合法的域名中不含下划线，\w包含了下划线这种情况），又会漏掉ab-c.com这样的域名（合法域名中可以含中划线，但是\w不匹配中划线）。</p>
<h4 id="编写建议">编写建议</h4><ul>
<li><p>掌握语法细节。正则表达式在各种语言中，其语法大致相同，细节各有千秋。明确所使用语言的正则的语法的细节，是写出正确、高效正则表达式的基础。例如，perl中与\w等效的匹配范围是[a-zA-Z0-9_]；perl正则式不支持肯定逆序环视中使用可变的重复（variable repetition inside lookbehind，例如(?&lt;=.*)abc），但是.Net语法是支持这一特性的；又如，JavaScript连逆序环视（Lookbehind,如(?&lt;=ab)c）都不支持，而perl和python是支持的。《精通正则表达式》第3章《正则表达式的特性和流派概览》明确地列出了各大派系正则的异同，这篇文章也简要地列出了几种常用语言、工具中正则的比较。对于具体使用者而言，至少应该详细了解正在使用的那种工作语言里正则的语法细节。</p>
</li>
<li><p>先粗后精，先加后减。使用正则表达式语法对于目标文本进行描述和界定，可以像画素描一样，先大致勾勒出框架，再逐步在局步实现细节。仍举刚才的手机号的例子，先界定\d{11}，总不会错；再细化为1[358]\d{9}，就向前迈了一大步（至于第二位是不是3、5、8，这里无意深究，只举这样一个例子，说明逐步细化的过程）。这样做的目的是先消除漏匹配（刚开始先尽可能多地匹配，做加法），然后再一点一点地消除误匹配（做减法）。这样有先有后，在考虑时才不易出错，从而向“不误不漏”这个目标迈进。</p>
</li>
<li><p>留有余地。所能看到的文本sample是有限的，而待匹配检验的文本是海量的，暂时不可见的。对于这样的情况，在写正则表达式时要跳出所能见到的文本的圈子，开拓思路，作出“战略性前瞻”。例如，经常收到这样的垃圾短信：“发<em>票”、“发#漂”。如果要写规则屏蔽这样烦人的垃圾短信，不但要能写出可以匹配当前文本的正则表达式 发[</em>#](?:票|漂)，还要能够想到 发.(?:票|漂|飘)之类可能出现的“变种”。这在具体的领域或许会有针对性的规则，不多言。这样做的目的是消除漏匹配，延长正则表达式的生命周期。</p>
</li>
<li><p>明确。具体说来，就是谨慎用点号这样的元字符，尽可能不用星号和加号这样的任意量词。只要能确定范围的，例如\w，就不要用点号；只要能够预测重复次数的，就不要用任意量词。例如，写析取twitter消息的脚本，假设一条消息的xml正文部分结构是<span class="”msg”">…</span>且正文中无尖括号，那么<span class="”msg”">[^&lt;]{1,480}</span>这种写法的思路要好于<span class="”msg”">.*</span>，原因有二：一是使用[^&lt;]，它保证了文本的范围不会超出下一个小于号所在的位置；二是明确长度范围，{1,480}，其依据是一条twitter消息大致能的字符长度范围。当然，480这个长度是否正确还可推敲，但是这种思路是值得借鉴的。说得狠一点，“滥用点号、星号和加号是不环保、不负责任的做法”。</p>
</li>
<li><p>不要让稻草压死骆驼。每使用一个普通括号()而不是非捕获型括号(?:…)，就会保留一部分内存等着你再次访问。这样的正则表达式、无限次地运行次数，无异于一根根稻草的堆加，终于能将骆驼压死。养成合理使用(?:…)括号的习惯。</p>
</li>
<li><p>宁简勿繁。将一条复杂的正则表达式拆分为两条或多条简单的正则表达式，编程难度会降低，运行效率会提升。例如用来消除行首和行尾空白字符的正则表达式s/^\s+|\s+$//g;，其运行效率理论上要低于s/^\s+//g; s/\s+$//g; 。这个例子出自《精通正则表达式》第五章，书中对它的评论是“它几乎总是最快的，而且显然最容易理解”。既快又容易理解，何乐而不为？工作中我们还有其它的理由要将C==(A|B)这样的正则表达式拆为A和B两条表达式分别执行。例如，虽然A和B这两种情况只要有一种能够击中所需要的文本模式就会成功匹配，但是如果只要有一条子表达式（例如A）会产生误匹配，那么不论其它的子表达式（例如B）效率如何之高，范围如何精准，C的总体精准度也会因A而受到影响。</p>
</li>
<li><p>巧妙定位。有时候，我们需要匹配的the，是作为单词的the（两边有空格），而不是作为单词一部分的t-h-e的有序排列（例如together中的the）。在适当的时候用上^，$，\b等等定位锚点，能有效提升找到成功匹配、淘汰不成功匹配的效率。</p>
</li>
</ul>
<h3 id="参考博文">参考博文</h3><ol>
<li><a href="http://www.jb51.net/tools/zhengze.html" target="_blank" rel="external">正则表达式30分钟入门教程</a></li>
<li><a href="http://www.jb51.net/tools/regex.htm" target="_blank" rel="external">常用正则表达式</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>正则表达式，又称正规表示法、常规表示法（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些符合某个模式的文本。<br>]]>
    
    </summary>
    
      <category term="linux" scheme="https://wustrive2008.github.io/tags/linux/"/>
    
      <category term="regex" scheme="https://wustrive2008.github.io/tags/regex/"/>
    
      <category term="正则表达式" scheme="https://wustrive2008.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="Linux" scheme="https://wustrive2008.github.io/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javaScript数组方法总结]]></title>
    <link href="https://wustrive2008.github.io/2016/01/14/js/arrayFunction/"/>
    <id>https://wustrive2008.github.io/2016/01/14/js/arrayFunction/</id>
    <published>2016-01-14T14:06:43.000Z</published>
    <updated>2016-11-05T18:14:33.000Z</updated>
    <content type="html"><![CDATA[<h2 id="javaScript数组方法总结">javaScript数组方法总结</h2><h3 id="Array-prototype-indexOf&amp;lastIndexOf_检索">Array.prototype.indexOf&amp;lastIndexOf 检索</h3><p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">2</span>));</div><div class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">10</span>));</div><div class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">1</span>,<span class="number">1</span>));</div><div class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">1</span>,<span class="number">-3</span>));</div><div class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">2</span>,<span class="number">-1</span>));</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="number">2</span>));</div><div class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="number">2</span>,<span class="number">-2</span>));</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">-1</div><div class="line">4</div><div class="line">4</div><div class="line">5</div><div class="line">5</div><div class="line">1</div><div class="line">[Finished in 0.2s]</div></pre></td></tr></table></figure></p>
<h3 id="Array-prototype-join_将数组转为字符串">Array.prototype.join 将数组转为字符串</h3><p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.join());</div><div class="line"><span class="built_in">console</span>.log(arr.join(<span class="string">"_"</span>));</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeatString</span>(<span class="params">str,n</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Array</span>(n+<span class="number">1</span>).join(str)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span>).join(<span class="string">"js"</span>));</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(repeatString(<span class="string">"a."</span>,<span class="number">4</span>));</div><div class="line"><span class="built_in">console</span>.log(repeatString(<span class="string">"hello_"</span>,<span class="number">6</span>));</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1,2,3</div><div class="line">1_2_3</div><div class="line">js</div><div class="line">a.a.a.a.</div><div class="line">hello_hello_hello_hello_hello_hello_</div><div class="line">[Finished in 0.2s]</div></pre></td></tr></table></figure></p>
<h3 id="Array-prototype-reverse_逆序">Array.prototype.reverse 逆序</h3><p>示例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">arr.reverse();</div><div class="line"><span class="built_in">console</span>.log(arr);</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[ 5, 4, 3, 2, 1 ]</div><div class="line">[Finished in 0.2s]</div></pre></td></tr></table></figure></p>
<h3 id="Array-prototype-sort_排序">Array.prototype.sort 排序</h3><p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'c'</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'e'</span>];</div><div class="line"><span class="keyword">var</span> sortArr = arr.sort();</div><div class="line"><span class="built_in">console</span>.log(arr);</div><div class="line"><span class="built_in">console</span>.log(sortArr);</div><div class="line"></div><div class="line"><span class="comment">//默认转字符串排序</span></div><div class="line">arr = [<span class="number">12</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">43</span>,<span class="number">5</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.sort());</div><div class="line"></div><div class="line"><span class="comment">//可以通过下面的方式实现数字排序</span></div><div class="line"><span class="keyword">var</span> numberSortArr = arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> a - b;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(numberSortArr);</div><div class="line"></div><div class="line"><span class="comment">//对象属性排序</span></div><div class="line"><span class="keyword">var</span> arr = [&#123;<span class="attr">age</span>:<span class="number">25</span>&#125;,&#123;<span class="attr">age</span>:<span class="number">20</span>&#125;,&#123;<span class="attr">age</span>:<span class="number">30</span>&#125;];</div><div class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> a.age - b.age;</div><div class="line">&#125;);</div><div class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'age'</span>,item.age);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[ &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;e&apos; ]</div><div class="line">[ &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;e&apos; ]</div><div class="line">[ 12, 14, 3, 43, 5 ]</div><div class="line">[ 3, 5, 12, 14, 43 ]</div><div class="line">age 20</div><div class="line">age 25</div><div class="line">age 30</div><div class="line">[Finished in 0.2s]</div></pre></td></tr></table></figure></p>
<h3 id="Array-prototype-concat_合并数组">Array.prototype.concat 合并数组</h3><p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.concat(<span class="number">4</span>,<span class="number">5</span>));</div><div class="line"><span class="built_in">console</span>.log(arr);</div><div class="line"></div><div class="line"><span class="comment">//合并时只拆一级</span></div><div class="line"><span class="built_in">console</span>.log(arr.concat([<span class="number">12</span>,<span class="number">33</span>],<span class="number">14</span>));</div><div class="line"><span class="built_in">console</span>.log(arr.concat([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>]]));</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[ 1, 2, 3, 4, 5 ]</div><div class="line">[ 1, 2, 3 ]</div><div class="line">[ 1, 2, 3, 12, 33, 14 ]</div><div class="line">[ 1, 2, 3, 1, 2, 3, [ 4, 5 ] ]</div><div class="line">[Finished in 0.2s]</div></pre></td></tr></table></figure></p>
<h3 id="Array-prototype-slice_截取数组">Array.prototype.slice 截取数组</h3><p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//右不包含</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">1</span>,<span class="number">4</span>));</div><div class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">-1</span>));</div><div class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">-4</span>,<span class="number">4</span>));</div><div class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">-4</span>,<span class="number">-1</span>));</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[ 2, 3, 4 ]</div><div class="line">[ 6 ]</div><div class="line">[ 3, 4 ]</div><div class="line">[ 3, 4, 5 ]</div><div class="line">[Finished in 0.3s]</div></pre></td></tr></table></figure></p>
<h3 id="Array-prototype-splice_数组拼接">Array.prototype.splice 数组拼接</h3><p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//删除元素</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">2</span>));</div><div class="line"><span class="built_in">console</span>.log(arr);</div><div class="line"></div><div class="line">arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">2</span>,<span class="number">2</span>));</div><div class="line"><span class="built_in">console</span>.log(arr);</div><div class="line"></div><div class="line"><span class="comment">//拼接</span></div><div class="line">arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">1</span>,<span class="number">1</span>,<span class="string">'a'</span>,<span class="string">'b'</span>));</div><div class="line"><span class="built_in">console</span>.log(arr);</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[ 3, 4, 5 ]</div><div class="line">[ 1, 2 ]</div><div class="line">[ 3, 4 ]</div><div class="line">[ 1, 2, 5 ]</div><div class="line">[ 2 ]</div><div class="line">[ 1, &apos;a&apos;, &apos;b&apos;, 3, 4, 5 ]</div><div class="line">[Finished in 0.2s]</div></pre></td></tr></table></figure></p>
<h3 id="Array-prototype-forEach_遍历">Array.prototype.forEach 遍历</h3><p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//x:值  index:索引 a:数组本身</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">x,index,a</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(x + <span class="string">'|'</span> + index + <span class="string">'|'</span> + (a === arr));</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1|0|true</div><div class="line">2|1|true</div><div class="line">3|2|true</div><div class="line">4|3|true</div><div class="line">5|4|true</div></pre></td></tr></table></figure></p>
<h3 id="Array-prototype-map_映射">Array.prototype.map 映射</h3><p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//原数组不变</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> mapArr = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> x + <span class="number">10</span>;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(mapArr);</div><div class="line"><span class="built_in">console</span>.log(arr);</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[ 11, 12, 13, 14, 15 ]</div><div class="line">[ 1, 2, 3, 4, 5 ]</div></pre></td></tr></table></figure></p>
<h3 id="Array-prototype-filter_过滤">Array.prototype.filter 过滤</h3><p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</div><div class="line"><span class="keyword">var</span> filterArr = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x,index</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> index % <span class="number">2</span> === <span class="number">0</span> || x &gt; <span class="number">4</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(filterArr);</div><div class="line"><span class="built_in">console</span>.log(arr);</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[ 1, 3, 5, 6, 7 ]</div><div class="line">[ 1, 2, 3, 4, 5, 6, 7 ]</div></pre></td></tr></table></figure></p>
<h3 id="Array-prototype-every&amp;some_数组判断">Array.prototype.every&amp;some 数组判断</h3><p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="comment">//判断是否所有元素都小于10</span></div><div class="line"><span class="built_in">console</span>.log(arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> x &lt; <span class="number">10</span>;</div><div class="line">&#125;));</div><div class="line"></div><div class="line"><span class="comment">//判断是否所有元素都大于5</span></div><div class="line"><span class="built_in">console</span>.log(arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> x &gt; <span class="number">5</span>;</div><div class="line">&#125;));</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//是否有元素等于3</span></div><div class="line"><span class="built_in">console</span>.log(arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> x === <span class="number">3</span>;</div><div class="line">&#125;));</div><div class="line"></div><div class="line"><span class="comment">//是否有元素等于10</span></div><div class="line"><span class="built_in">console</span>.log(arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> x === <span class="number">10</span>;</div><div class="line">&#125;));</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">true</div><div class="line">false</div><div class="line">true</div><div class="line">false</div></pre></td></tr></table></figure></p>
<h3 id="Array-prototype-reduce&amp;reduceRight_元素之间运算">Array.prototype.reduce&amp;reduceRight 元素之间运算</h3><p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="comment">//0+1 1+2 3+3</span></div><div class="line"><span class="keyword">var</span> sum = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> x + y;</div><div class="line">&#125;,<span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(sum);</div><div class="line"><span class="built_in">console</span>.log(arr);</div><div class="line"></div><div class="line"></div><div class="line">arr = [<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>];</div><div class="line"><span class="keyword">var</span> max = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(x + <span class="string">"|"</span> + y);</div><div class="line">    <span class="keyword">return</span> x &gt; y ? x : y;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(max);</div><div class="line"></div><div class="line"><span class="comment">//从右到左运算</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>];</div><div class="line"><span class="keyword">var</span> max = arr.reduceRight(<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(x + <span class="string">"|"</span> + y);</div><div class="line">    <span class="keyword">return</span> x &gt; y ? x : y;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(max);</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">6</div><div class="line">[ 1, 2, 3 ]</div><div class="line">3|6</div><div class="line">6|9</div><div class="line">9</div><div class="line">9|6</div><div class="line">9|3</div><div class="line">9</div><div class="line">[Finished in 0.2s]</div></pre></td></tr></table></figure></p>
<h3 id="Array-isArray_判断是否是数组">Array.isArray 判断是否是数组</h3><p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray([]));</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log([] <span class="keyword">instanceof</span> <span class="built_in">Array</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log((&#123;&#125;).toString.apply([]) === <span class="string">'[object Array]'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log([].constructor === <span class="built_in">Array</span>);</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">true</div><div class="line">true</div><div class="line">true</div><div class="line">true</div><div class="line">[Finished in 0.3s]</div></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="javaScript数组方法总结">javaScript数组方法总结</h2><h3 id="Array-prototype-indexOf&amp;lastIndexOf_检索">Array.prototype.indexOf&amp;lastIndexOf 检]]>
    </summary>
    
      <category term="js" scheme="https://wustrive2008.github.io/tags/js/"/>
    
      <category term="array" scheme="https://wustrive2008.github.io/tags/array/"/>
    
      <category term="前端" scheme="https://wustrive2008.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="https://wustrive2008.github.io/categories/js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git全解析之远程仓库交互]]></title>
    <link href="https://wustrive2008.github.io/2016/01/11/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Git%E5%85%A8%E8%A7%A3%E6%9E%90%E4%B9%8B%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E4%BA%A4%E4%BA%92/"/>
    <id>https://wustrive2008.github.io/2016/01/11/版本控制/Git全解析之远程仓库交互/</id>
    <published>2016-01-11T14:02:51.000Z</published>
    <updated>2016-11-05T18:14:33.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Git全解析之远程仓库交互">Git全解析之远程仓库交互</h2><h3 id="中央仓库的概念">中央仓库的概念</h3><p>虽然说git是分布式版本控制工具，但同样有远程仓库的概念。出于各种目的，我们有时需要有一个共享的远程仓库，如GitHub上的仓库，我们公司项目中用来测试和部署的仓库等。<br>一般的操作步骤是先在公共服务器上创建一个仓库，然后每个开发人员都clone这个仓库进行各自的开发，开发完成后再push到远程仓库进行测试部署。</p>
<p>从远程仓库clone项目：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[centos@bogon gitwork]$ </div><div class="line">[centos@bogon gitwork]$ git <span class="built_in">clone</span> git@github.com:wustrive2008/gittest.git</div><div class="line">Initialized empty Git repository <span class="keyword">in</span> /home/centos/gitwork/gittest/.git/</div><div class="line">remote: Counting objects: 4, done.</div><div class="line">remote: Compressing objects: 100% (3/3), done.</div><div class="line">remote: Total 4 (delta 0), reused 0 (delta 0), pack-reused 0</div><div class="line">Receiving objects: 100% (4/4), 4.15 KiB, done.</div></pre></td></tr></table></figure></p>
<p>上面示例的远程仓库在github上，当然如果我们做的是公司的项目，出于安全性和访问效率的考虑很少会将公司的私有项目放到github上。一般的做法是搭建自己的git服务器，这里推荐两种git服务器工具：</p>
<ol>
<li><a href="http://git-scm.com/book/zh/v1/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-Gitolite" target="_blank" rel="external">Gitolite</a></li>
<li><a href="https://about.gitlab.com/" target="_blank" rel="external">GitLab</a></li>
</ol>
<p>这两个工具网上都有很多教程。</p>
<p>说明：github也有付费的企业版，试用过，也很好用</p>
<h3 id="本地分支与远程分支">本地分支与远程分支</h3><p>平时我们使用 git branch 查看的都是本地分支,如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[centos@bogon gittest]$ git branch</div><div class="line">* master</div></pre></td></tr></table></figure></p>
<p>但是当需要经常与中央仓库同步代码时，特别是分支很多时，需要查看本地当前有哪些远程分支的引用，比便于在不同的分支之间进行切换开发。关于git分支的较好实践可以参考：<a href="https://github.com/nvie/gitflow" target="_blank" rel="external">git flow</a><br>查看远程分支的引用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[centos@bogon gittest]$ </div><div class="line">[centos@bogon gittest]$ git branch <span class="_">-a</span></div><div class="line">* master</div><div class="line">  remotes/origin/HEAD -&gt; origin/master</div><div class="line">  remotes/origin/master</div></pre></td></tr></table></figure></p>
<p>上面的结果表示：<br>当前本地有一个master分支，并且有一个remotes/origin/master(远程master)分支的引用，至于remotes/origin/HEAD分支可以理解为origin/master分支的一个引用。<br>其中origin为远程仓库引用的别名，此名称可以修改，也可以有多个，可以参考git remote命令了解更多</p>
<p>接下来在本地创建一个develop分支，用于正常的开发流程：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[centos@bogon gittest]$ git checkout -b develop</div><div class="line">Switched to a new branch <span class="string">'develop'</span></div><div class="line">[centos@bogon gittest]$ git br</div><div class="line">* develop</div><div class="line">  master</div><div class="line">[centos@bogon gittest]$ git br <span class="_">-a</span></div><div class="line">* develop</div><div class="line">  master</div><div class="line">  remotes/origin/HEAD -&gt; origin/master</div><div class="line">  remotes/origin/master</div></pre></td></tr></table></figure></p>
<p>在develop分支上进行开发，并提交：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[centos@bogon gittest]$ touch file1.txt</div><div class="line">[centos@bogon gittest]$ git add .</div><div class="line">[centos@bogon gittest]$ git commit -am <span class="string">"create file file1.txt"</span></div><div class="line">[develop 21053d7] create file file1.txt</div><div class="line"> 0 files changed, 0 insertions(+), 0 deletions(-)</div><div class="line"> create mode 100644 file1.txt</div></pre></td></tr></table></figure></p>
<p>开发完成后将develop分支推送到服务器：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[centos@bogon gittest]$ git push origin </div><div class="line">Counting objects: 4, done.</div><div class="line">Compressing objects: 100% (2/2), done.</div><div class="line">Writing objects: 100% (3/3), 311 bytes, done.</div><div class="line">Total 3 (delta 0), reused 0 (delta 0)</div><div class="line">To git@github.com:wustrive2008/gittest.git</div><div class="line">   8a9a114..21053d7  develop -&gt; develop</div></pre></td></tr></table></figure></p>
<p>接下来正常的流程是测试人员拉取到远程的develop分支，然后对develop分支上提交的内容进行测试，测试通过后，合并到master分支，最后推送到部署服务器进行上线部署。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[centos@bogon gittest]$ git checkout master</div><div class="line">Switched to branch <span class="string">'master'</span></div><div class="line">[centos@bogon gittest]$ git merge develop</div><div class="line">Updating 8a9a114..21053d7</div><div class="line">Fast-forward</div><div class="line"> 0 files changed, 0 insertions(+), 0 deletions(-)</div><div class="line"> create mode 100644 file1.txt</div><div class="line">[centos@bogon gittest]$ git push origin master</div><div class="line">Total 0 (delta 0), reused 0 (delta 0)</div><div class="line">To git@github.com:wustrive2008/gittest.git</div><div class="line">   8a9a114..21053d7  master -&gt; master</div></pre></td></tr></table></figure>
<h3 id="pull与fetch">pull与fetch</h3><p>如果要拉取远程仓库的代码，需要用到pull与fetch命令<br>这两个命令的区别是pull=fetch+merge</p>
<p>先来演示一下git pull，有其他开发者已经在develop分支上提交了新的内容，现在需要同步到本地<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">[centos@bogon gittest]$ git br</div><div class="line">* develop</div><div class="line">  master</div><div class="line">[centos@bogon gittest]$ git <span class="built_in">log</span></div><div class="line">commit 21053d768d7af0c5cf90f63dc105891726094b43</div><div class="line">Author: wubaoguo &lt;wustrive_2008@126.com&gt;</div><div class="line">Date:   Mon Jan 11 22:35:50 2016 +0800</div><div class="line"></div><div class="line">    create file file1.txt</div><div class="line"></div><div class="line">commit 8a9a114ecbacfd5555ee417ab1dbe02a20db9a03</div><div class="line">Author: wubaoguo &lt;wustrive2008@users.noreply.github.com&gt;</div><div class="line">Date:   Mon Jan 11 22:08:39 2016 +0800</div><div class="line"></div><div class="line">    Initial commit</div><div class="line">[centos@bogon gittest]$ git pull origin develop</div><div class="line">remote: Counting objects: 2, done.</div><div class="line">remote: Compressing objects: 100% (2/2), done.</div><div class="line">remote: Total 2 (delta 1), reused 1 (delta 0), pack-reused 0</div><div class="line">Unpacking objects: 100% (2/2), done.</div><div class="line">From github.com:wustrive2008/gittest</div><div class="line"> * branch            develop    -&gt; FETCH_HEAD</div><div class="line">Updating 21053d7..2296978</div><div class="line">Fast-forward</div><div class="line"> 0 files changed, 0 insertions(+), 0 deletions(-)</div><div class="line"> create mode 100644 file2.txt</div><div class="line">[centos@bogon gittest]$ git <span class="built_in">log</span></div><div class="line">commit 22969782f467<span class="built_in">cd</span>04410c9ed3cf5c80e3987d212b</div><div class="line">Author: wubaoguo &lt;wustrive_2008@126.com&gt;</div><div class="line">Date:   Mon Jan 11 22:52:18 2016 +0800</div><div class="line"></div><div class="line">    create file file2.txt</div><div class="line"></div><div class="line">commit 21053d768d7af0c5cf90f63dc105891726094b43</div><div class="line">Author: wubaoguo &lt;wustrive_2008@126.com&gt;</div><div class="line">Date:   Mon Jan 11 22:35:50 2016 +0800</div><div class="line"></div><div class="line">    create file file1.txt</div><div class="line"></div><div class="line">commit 8a9a114ecbacfd5555ee417ab1dbe02a20db9a03</div><div class="line">Author: wubaoguo &lt;wustrive2008@users.noreply.github.com&gt;</div><div class="line">Date:   Mon Jan 11 22:08:39 2016 +0800</div><div class="line"></div><div class="line">    Initial commit</div></pre></td></tr></table></figure></p>
<p>很清楚的看到，新的代码已经拉取并合并到本地了，可以基于最新的代码进行开发了。</p>
<p>如果开发者B说他向远程仓库推送了新的分支fixbug，需要你在此基础上继续修改bug，可以这样做<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">[centos@bogon gittest]$ git br <span class="_">-a</span>     <span class="comment">#可以看到这时本地并没有新的分支与引用</span></div><div class="line">* develop</div><div class="line">  master</div><div class="line">  remotes/origin/HEAD -&gt; origin/master</div><div class="line">  remotes/origin/develop</div><div class="line">  remotes/origin/master</div><div class="line">[centos@bogon gittest]$ git fetch    <span class="comment">#拉取远程所有的变动</span></div><div class="line">remote: Counting objects: 3, done.</div><div class="line">remote: Compressing objects: 100% (1/1), done.</div><div class="line">remote: Total 3 (delta 1), reused 3 (delta 1), pack-reused 0</div><div class="line">Unpacking objects: 100% (3/3), done.</div><div class="line">From github.com:wustrive2008/gittest</div><div class="line">   21053d7..2296978  develop    -&gt; origin/develop</div><div class="line"> * [new branch]      fixbug     -&gt; origin/fixbug   <span class="comment">#注意这里拉取到一个新分支</span></div><div class="line">[centos@bogon gittest]$ git br  <span class="comment">#这时本地并没有fixbug分支</span></div><div class="line">* develop</div><div class="line">  master</div><div class="line">[centos@bogon gittest]$ git checkout fixbug  <span class="comment">#创建并切换到fixbug分支,引用origin/fixbug分支</span></div><div class="line">Branch fixbug <span class="built_in">set</span> up to track remote branch fixbug from origin.</div><div class="line">Switched to a new branch <span class="string">'fixbug'</span></div></pre></td></tr></table></figure></p>
<p>与远程仓库的交互操作基本就这些，还有一点要注意，推送之前最好先拉取一下，因为如果远程分支版本比本地新，直接推送会失败。</p>
<h3 id="关于捐赠">关于捐赠</h3><p>如何觉得本文章对你有帮助，欢迎通过支付宝捐赠来支持博主</p>
<p><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexo%E6%94%AF%E4%BB%98%E5%AE%9D%E4%BB%98%E6%AC%BE%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%9C%80%E5%B0%8F.png" alt="捐赠"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Git全解析之远程仓库交互">Git全解析之远程仓库交互</h2><h3 id="中央仓库的概念">中央仓库的概念</h3><p>虽然说git是分布式版本控制工具，但同样有远程仓库的概念。出于各种目的，我们有时需要有一个共享的远程仓库，如GitHub上的仓库，我们]]>
    </summary>
    
      <category term="git" scheme="https://wustrive2008.github.io/tags/git/"/>
    
      <category term="版本控制" scheme="https://wustrive2008.github.io/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
      <category term="项目管理" scheme="https://wustrive2008.github.io/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
      <category term="版本控制" scheme="https://wustrive2008.github.io/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[python闭包与装饰器]]></title>
    <link href="https://wustrive2008.github.io/2016/01/08/python/python%E9%97%AD%E5%8C%85%E4%B8%8E%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>https://wustrive2008.github.io/2016/01/08/python/python闭包与装饰器/</id>
    <published>2016-01-08T14:48:25.000Z</published>
    <updated>2016-11-05T18:14:33.000Z</updated>
    <content type="html"><![CDATA[<h2 id="python闭包与装饰器">python闭包与装饰器</h2><h3 id="闭包">闭包</h3><p>如果在一个内部函数里，对在外部作用域（但不是在全局作用域）的变量进行引用，那么内部函数就被认为是闭包（closure）。它只不过是个“内层”的函数，由一个名字（变量）来指代，而这个名字（变量）对于“外层”包含它的函数而言，是本地变量。<br>实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_passline</span><span class="params">(passline)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cmp</span><span class="params">(val)</span>:</span></div><div class="line">        <span class="keyword">if</span> val &gt;= passline:</div><div class="line">            <span class="keyword">print</span> (<span class="string">'pass'</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> (<span class="string">'failed'</span>)</div><div class="line">    <span class="keyword">return</span> cmp</div><div class="line"></div><div class="line">f_100 = set_passline(<span class="number">60</span>)</div><div class="line">f_100(<span class="number">89</span>)</div><div class="line"></div><div class="line">f_150 = set_passline(<span class="number">90</span>)</div><div class="line">f_150(<span class="number">89</span>)</div></pre></td></tr></table></figure></p>
<h3 id="装饰器">装饰器</h3><p>简单地来说装饰器就是在不改变原有函数的前提下，为函数加入新的功能。</p>
<p>实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">in_dec</span><span class="params">(*arg)</span>:</span></div><div class="line">        <span class="keyword">if</span> len(arg) == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> val <span class="keyword">in</span> arg:</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> isinstance(val , int):</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> func(*arg)</div><div class="line">    <span class="keyword">return</span> in_dec</div><div class="line"></div><div class="line"><span class="meta">@dec</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sum</span><span class="params">(*arg)</span>:</span></div><div class="line">    <span class="keyword">return</span> sum(arg)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_average</span><span class="params">(*arg)</span>:</span></div><div class="line">    <span class="keyword">return</span> sum(arg)/len(arg)</div><div class="line"><span class="comment">#my_sum = dec(my_sum)</span></div><div class="line">my_average = dec(my_average)</div><div class="line"></div><div class="line"><span class="keyword">print</span> (my_sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>))</div><div class="line"></div><div class="line"><span class="keyword">print</span> (my_sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">'6'</span>))</div></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="python闭包与装饰器">python闭包与装饰器</h2><h3 id="闭包">闭包</h3><p>如果在一个内部函数里，对在外部作用域（但不是在全局作用域）的变量进行引用，那么内部函数就被认为是闭包（closure）。它只不过是个“内层”的函数，由一个名字]]>
    </summary>
    
      <category term="python" scheme="https://wustrive2008.github.io/tags/python/"/>
    
      <category term="脚本语言" scheme="https://wustrive2008.github.io/tags/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80/"/>
    
      <category term="闭包" scheme="https://wustrive2008.github.io/tags/%E9%97%AD%E5%8C%85/"/>
    
      <category term="python" scheme="https://wustrive2008.github.io/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git全解析之用起来先]]></title>
    <link href="https://wustrive2008.github.io/2016/01/06/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Git%E5%85%A8%E8%A7%A3%E6%9E%90%E4%B9%8B%E5%85%88%E7%94%A8%E8%B5%B7%E6%9D%A5/"/>
    <id>https://wustrive2008.github.io/2016/01/06/版本控制/Git全解析之先用起来/</id>
    <published>2016-01-06T14:23:16.000Z</published>
    <updated>2016-11-05T18:14:33.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Git全解析之用起来先">Git全解析之用起来先</h2><h3 id="先安装Git环境">先安装Git环境</h3><p>下载安装：<a href="http://git-scm.com/download/" target="_blank" rel="external">http://git-scm.com/download/</a></p>
<h3 id="配置">配置</h3><p>配置user与email,用来标识用户<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"wustrive"</span></div><div class="line">$ git config --global user.email <span class="string">"wustrive2008@gmail.com"</span></div></pre></td></tr></table></figure></p>
<p>也可以直接编辑配置文件，配置文件默认路径在用户目录下的.gitconfig文件中，结构是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[user]</div><div class="line">    name = wustrive</div><div class="line">    email = wustrive2008@gmail.com</div></pre></td></tr></table></figure></p>
<h3 id="简单了解Git">简单了解Git</h3><p>Git是一个快速的分布式版本控制系统</p>
<h4 id="Git对象模型_SHA">Git对象模型 SHA</h4><p>所有用来表示项目历史信息的文件是通过一个40个字符“对象名”来索引的。每一个“对象名”都是对“对象”内容做SHAI哈希计算来的。这个对象名是全局唯一的，不同的对象生成的“对象名”不同。</p>
<p>Git中四种类型的对象：”blob”,”tree”,”commit”和”tag”。每个对象包括三个部分：类型，大小和内容。</p>
<ul>
<li>blob用来存储文件数据</li>
<li>tree有点像一个目录，用来管理一些blob与tree</li>
<li>commit，一个commit只指向一个tree，用来标记项目某一个特定时间点的状态，即一次提交</li>
<li>tag，一个tag用来标记一个commit</li>
</ul>
<h4 id="Git目录与工作目录">Git目录与工作目录</h4><p>git目录是为你的项目存储所有历史和元信息的目录，包括所有对象，这些对象指向不同的分支，每个项目只能有一个Git目录,这个叫’.git’的目录一般在项目的根目录下，<br>这个目录下的重要文件有：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">|-- FETCH_HEAD <span class="comment">#指向着目前已经从远程仓库取下来的分支的末端版本。</span></div><div class="line">|-- HEAD <span class="comment">#这个git项目当前处在哪个分支里</span></div><div class="line">|-- ORIG_HEAD <span class="comment">#HEAD指针的前一个状态</span></div><div class="line">|-- branches/ <span class="comment">#项目的所有分支</span></div><div class="line">|-- config/ <span class="comment">#项目的配置信息，git config命令会改动它</span></div><div class="line">|-- description <span class="comment">#项目的描述信息</span></div><div class="line">|-- hooks/ <span class="comment">#系统默认钩子脚本目录</span></div><div class="line">|-- index <span class="comment">#索引文件</span></div><div class="line">|-- info/ <span class="comment">#包含仓库的一些信息</span></div><div class="line">|-- logs/ <span class="comment">#各个refs的历史信息</span></div><div class="line">|-- objects/ <span class="comment">#Git本地仓库的所有对象 (commits, trees, blobs, tags)</span></div><div class="line">|-- packed-refs <span class="comment">#运行 git gc, refs 下的所有文件都会消失。Git 会将这些文件挪到 .git/packed-refs 文件中去以提高效率</span></div><div class="line">|-- refs/ <span class="comment">#标识你项目里的每个分支指向了哪个提交(commit)</span></div></pre></td></tr></table></figure></p>
<p>工作目录就是你的项目源代码目录，即是你签出(checkout)用来编辑的文件，当在不同的分支间切换时，工作目录里的内容会随之替换或删除，所有的操作历史都保存在Git目录中，工作目录是用来临时保存checkout文件的地方。</p>
<h3 id="可以开始使用了">可以开始使用了</h3><h4 id="获取仓库">获取仓库</h4><ul>
<li><p>创建仓库，在工作目录下执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init .</div></pre></td></tr></table></figure>
</li>
<li><p>clone一个仓库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#通过http(s)协议</span></div><div class="line">git <span class="built_in">clone</span> https://github.com/git/git.git</div><div class="line"><span class="comment">#通过ssh协议</span></div><div class="line">git <span class="built_in">clone</span> git@github.com:git/git.git</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>提示：创建和clone后默认的分支是master，默认的repository引用名称origin</strong></p>
<h4 id="正常的工作流程">正常的工作流程</h4><ol>
<li><p>修改文件，将它们更新的内容添加到索引中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git add file1 file2 file3</div><div class="line"><span class="comment">#也可以通过git add . 来添加所有变动到暂存区</span></div><div class="line">git add .</div></pre></td></tr></table></figure>
</li>
<li><p>查看当状态</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line"><span class="comment"># On branch master</span></div><div class="line"><span class="comment"># Changes to be committed:</span></div><div class="line"><span class="comment"># (use "git reset HEAD &lt;file&gt;..." to unstage)</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># modified: file1</span></div><div class="line"><span class="comment"># modified: file2</span></div><div class="line"><span class="comment"># modified: file3</span></div><div class="line"><span class="comment">#</span></div></pre></td></tr></table></figure>
</li>
<li><p>提交commit</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#执行后会进入编辑器进行注释编辑</span></div><div class="line">$ git commit</div><div class="line"></div><div class="line"><span class="comment">#如果注释很短也可以使用</span></div><div class="line">$ git commit -m <span class="string">"注释内容"</span></div><div class="line"></div><div class="line"><span class="comment">#如果只是修改了文件，没有添加新的文件，可以省略git add</span></div><div class="line">$ git commit -am <span class="string">"注释内容"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="分支与合并">分支与合并</h4><h5 id="基本操作命令">基本操作命令</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#查看本地分支 *代表当前所在分支</span></div><div class="line">[centos@bogon gittest]$ git branch</div><div class="line">* master</div><div class="line"></div><div class="line"><span class="comment">#新建分支</span></div><div class="line">[centos@bogon gittest]$ git branch br1</div><div class="line">[centos@bogon gittest]$ git branch</div><div class="line">  br1</div><div class="line">* master</div><div class="line"></div><div class="line"><span class="comment">#切换分支</span></div><div class="line">[centos@bogon gittest]$ git checkout br1</div><div class="line">Switched to branch <span class="string">'br1'</span></div><div class="line">[centos@bogon gittest]$ git branch</div><div class="line">* br1</div><div class="line">  master</div><div class="line"></div><div class="line"><span class="comment">#切换并合并分支，以当前分支为基础新建分支</span></div><div class="line">[centos@bogon gittest]$ ll</div><div class="line">total 0</div><div class="line">-rw-rw-r--. 1 centos centos 0 Jan  6 23:32 file1</div><div class="line">-rw-rw-r--. 1 centos centos 0 Jan  6 23:32 file2</div><div class="line">-rw-rw-r--. 1 centos centos 0 Jan  6 23:32 file3</div><div class="line">[centos@bogon gittest]$ git branch</div><div class="line">* br1</div><div class="line">  master</div><div class="line">[centos@bogon gittest]$ git checkout -b br2</div><div class="line">Switched to a new branch <span class="string">'br2'</span></div><div class="line">[centos@bogon gittest]$ ll</div><div class="line">total 0</div><div class="line">-rw-rw-r--. 1 centos centos 0 Jan  6 23:32 file1</div><div class="line">-rw-rw-r--. 1 centos centos 0 Jan  6 23:32 file2</div><div class="line">-rw-rw-r--. 1 centos centos 0 Jan  6 23:32 file3</div><div class="line">[centos@bogon gittest]$ git branch</div><div class="line">  br1</div><div class="line">* br2</div><div class="line">  master</div><div class="line"></div><div class="line"><span class="comment">#合并分支，将其他分支合并到当前分支</span></div><div class="line">[centos@bogon gittest]$ ll</div><div class="line">total 0</div><div class="line">-rw-rw-r--. 1 centos centos 0 Jan  6 23:32 file1</div><div class="line">-rw-rw-r--. 1 centos centos 0 Jan  6 23:32 file2</div><div class="line">-rw-rw-r--. 1 centos centos 0 Jan  6 23:32 file3</div><div class="line">[centos@bogon gittest]$ git merge br2</div><div class="line">Updating da5068b..f9da174</div><div class="line">Fast-forward</div><div class="line"> br2-file |    1 +</div><div class="line"> 1 files changed, 1 insertions(+), 0 deletions(-)</div><div class="line"> create mode 100644 br2-file</div><div class="line">[centos@bogon gittest]$ ll</div><div class="line">total 4</div><div class="line">-rw-rw-r--. 1 centos centos 10 Jan  6 23:44 br2-file</div><div class="line">-rw-rw-r--. 1 centos centos  0 Jan  6 23:32 file1</div><div class="line">-rw-rw-r--. 1 centos centos  0 Jan  6 23:32 file2</div><div class="line">-rw-rw-r--. 1 centos centos  0 Jan  6 23:32 file3   </div><div class="line"></div><div class="line"><span class="comment">#删除分支，删除已经被合并过的分支，安全删除分支</span></div><div class="line">[centos@bogon gittest]$ git branch</div><div class="line">  br1</div><div class="line">  br2</div><div class="line">* master</div><div class="line">[centos@bogon gittest]$ git branch <span class="_">-d</span> br2</div><div class="line">Deleted branch br2 (was f9da174).</div><div class="line">[centos@bogon gittest]$ git branch</div><div class="line">  br1</div><div class="line">* master</div><div class="line"></div><div class="line"><span class="comment">#强制删除分支</span></div><div class="line">[centos@bogon gittest]$ git branch</div><div class="line">  br1</div><div class="line">* master</div><div class="line">[centos@bogon gittest]$ git branch -D br1</div><div class="line">Deleted branch br1 (was da5068b).</div><div class="line">[centos@bogon gittest]$ git branch</div><div class="line">* master</div></pre></td></tr></table></figure>
<h5 id="分支冲突">分支冲突</h5><p>如果执行自动合并没有成功的话，git会在索引和工作树里设置一个特殊的状态， 提示你如何解决合并中出现的冲突。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[centos@bogon gittest]$ git merge br1</div><div class="line">Auto-merging file1</div><div class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> file1</div><div class="line">Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</div><div class="line">[centos@bogon gittest]$ git status</div><div class="line"><span class="comment"># On branch master</span></div><div class="line"><span class="comment"># Unmerged paths:</span></div><div class="line"><span class="comment">#   (use "git add/rm &lt;file&gt;..." as appropriate to mark resolution)</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#   both modified:      file1</span></div><div class="line"><span class="comment">#</span></div><div class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</div></pre></td></tr></table></figure></p>
<p>有冲突(conflicts)的文件会保存在索引中，在commit之前要解决冲突，解决冲突的方式就是编辑冲突文件，重新commit。</p>
<h5 id="撤销合并">撤销合并</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#如果合并分支后又后悔了，可以撤销合并</span></div><div class="line">[centos@bogon gittest]$ git reset --hard HEAD</div><div class="line">HEAD is now at 2fa716d file1 master</div><div class="line">[centos@bogon gittest]$ git status</div><div class="line"><span class="comment"># On branch master</span></div><div class="line">nothing to commit (working directory clean)</div><div class="line"></div><div class="line"><span class="comment">#如果已经把合并后的代码提交了，可以执行</span></div><div class="line">[centos@bogon gittest]$ git reset --hard ORIG_HEAD</div><div class="line">HEAD is now at 2fa716d file1 master</div></pre></td></tr></table></figure>
<h4 id="log记录">log记录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> v2.5.. <span class="comment"># commits since (not reachable from) v2.5</span></div><div class="line">$ git <span class="built_in">log</span> test..master <span class="comment"># commits reachable from master but not test</span></div><div class="line">$ git <span class="built_in">log</span> master..test <span class="comment"># commits reachable from test but not master</span></div><div class="line">$ git <span class="built_in">log</span> master...test <span class="comment"># commits reachable from either test or</span></div><div class="line"><span class="comment"># master, but not both</span></div><div class="line">$ git <span class="built_in">log</span> --since=<span class="string">"2 weeks ago"</span> <span class="comment"># commits from the last 2 weeks</span></div><div class="line">$ git <span class="built_in">log</span> Makefile <span class="comment"># commits that modify Makefile</span></div><div class="line">$ git <span class="built_in">log</span> fs/ <span class="comment"># commits that modify any file under fs/</span></div><div class="line">$ git <span class="built_in">log</span> -S<span class="string">'foo()\'</span> <span class="comment"># commits that add or remove any file data</span></div><div class="line"><span class="comment"># matching the string 'foo()'</span></div><div class="line">$ git <span class="built_in">log</span> --no-merges <span class="comment"># dont show merge commits</span></div></pre></td></tr></table></figure>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">#查看当前分支log</div><div class="line">[centos@bogon gittest]$ git log</div><div class="line">commit 2fa716df1d841ac2347cd9b6d371cfdf71682dfe</div><div class="line">Author: wubaoguo &lt;wustrive_2008@126.com&gt;</div><div class="line">Date:   Wed Jan 6 23:53:20 2016 +0800</div><div class="line"></div><div class="line">    file1 master</div><div class="line"></div><div class="line">commit f9da1748bddb6cfcc0f492f60328abcd54f97663</div><div class="line">Author: wubaoguo &lt;wustrive_2008@126.com&gt;</div><div class="line">Date:   Wed Jan 6 23:44:08 2016 +0800</div><div class="line"></div><div class="line">    br2</div><div class="line"></div><div class="line">commit da5068b35246dc26b77105a6dc6c2aa6e430fcad</div><div class="line">Author: wubaoguo &lt;wustrive_2008@126.com&gt;</div><div class="line">Date:   Wed Jan 6 23:38:39 2016 +0800</div><div class="line"></div><div class="line">    init</div><div class="line"></div><div class="line">#查看详细变动</div><div class="line">[centos@bogon gittest]$ git log --stat</div><div class="line">commit 2fa716df1d841ac2347cd9b6d371cfdf71682dfe</div><div class="line">Author: wubaoguo &lt;wustrive_2008@126.com&gt;</div><div class="line">Date:   Wed Jan 6 23:53:20 2016 +0800</div><div class="line"></div><div class="line">    file1 master</div><div class="line"></div><div class="line"> file1 |    1 +</div><div class="line"> 1 files changed, 1 insertions(+), 0 deletions(-)</div><div class="line"></div><div class="line">commit f9da1748bddb6cfcc0f492f60328abcd54f97663</div><div class="line">Author: wubaoguo &lt;wustrive_2008@126.com&gt;</div><div class="line">Date:   Wed Jan 6 23:44:08 2016 +0800</div><div class="line"></div><div class="line">    br2</div><div class="line"></div><div class="line"> br2-file |    1 +</div><div class="line"> 1 files changed, 1 insertions(+), 0 deletions(-)</div><div class="line"></div><div class="line">commit da5068b35246dc26b77105a6dc6c2aa6e430fcad</div><div class="line">Author: wubaoguo &lt;wustrive_2008@126.com&gt;</div><div class="line">Date:   Wed Jan 6 23:38:39 2016 +0800</div><div class="line"></div><div class="line">    init</div><div class="line"></div><div class="line"></div><div class="line">#格式化log输出结果</div><div class="line">[centos@bogon gittest]$ git log --pretty=oneline</div><div class="line">2fa716df1d841ac2347cd9b6d371cfdf71682dfe file1 master</div><div class="line">f9da1748bddb6cfcc0f492f60328abcd54f97663 br2</div><div class="line">da5068b35246dc26b77105a6dc6c2aa6e430fcad init</div><div class="line"></div><div class="line">#更友好的格式化，历史多了效果明显</div><div class="line">[centos@bogon gittest]$ git log --pretty=format:&apos;%h : %s&apos; --graph</div><div class="line">* 2fa716d : file1 master</div><div class="line">* f9da174 : br2</div><div class="line">* da5068b : init</div></pre></td></tr></table></figure></p>
<h4 id="比较差异DIFF">比较差异DIFF</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#比较分支间的差异</span></div><div class="line">[centos@bogon gittest]$ git diff master..br1</div><div class="line">diff --git a/file1 b/file1</div><div class="line">index 3325d54..76e65f5 100644</div><div class="line">--- a/file1</div><div class="line">+++ b/file1</div><div class="line">@@ -1 +1 @@</div><div class="line">-file1 master</div><div class="line">+file1 br1</div><div class="line"></div><div class="line"><span class="comment">#工作目录与暂存区(staged)差异</span></div><div class="line">[centos@bogon gittest]$ git diff</div><div class="line">diff --git a/file2 b/file2</div><div class="line">index e69de29..35d5537 100644</div><div class="line">--- a/file2</div><div class="line">+++ b/file2</div><div class="line">@@ -0,0 +1,2 @@</div><div class="line">+diff 的使用</div><div class="line">+</div><div class="line"></div><div class="line"><span class="comment">#暂存区与上次提交之间的差异</span></div><div class="line">[centos@bogon gittest]$ git add .</div><div class="line">[centos@bogon gittest]$ git diff --cached</div><div class="line">diff --git a/file2 b/file2</div><div class="line">index e69de29..35d5537 100644</div><div class="line">--- a/file2</div><div class="line">+++ b/file2</div><div class="line">@@ -0,0 +1,2 @@</div><div class="line">+diff 的使用</div><div class="line">+</div><div class="line"></div><div class="line"><span class="comment">#工作目录与上次提交之间的差异</span></div><div class="line">[centos@bogon gittest]$ git diff HEAD</div><div class="line">diff --git a/file2 b/file2</div><div class="line">index e69de29..35d5537 100644</div><div class="line">--- a/file2</div><div class="line">+++ b/file2</div><div class="line">@@ -0,0 +1,2 @@</div><div class="line">+diff 的使用</div><div class="line">+</div><div class="line">diff --git a/file3 b/file3</div><div class="line">index e69de29..1bf6afb 100644</div><div class="line">--- a/file3</div><div class="line">+++ b/file3</div><div class="line">@@ -0,0 +1 @@</div><div class="line">+还没commit  工作目录又改动了</div></pre></td></tr></table></figure>
<h3 id="附录_-gitconfig文件配置参考">附录 .gitconfig文件配置参考</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">[user]</div><div class="line">    name = zhangsan</div><div class="line">    email = zhangsan@gmail.com</div><div class="line">[color]</div><div class="line">    branch = auto</div><div class="line">    diff = auto</div><div class="line">    status = auto</div><div class="line">    ui = auto</div><div class="line"></div><div class="line">[core]</div><div class="line">    quotepath=<span class="literal">false</span></div><div class="line">    edit = vim</div><div class="line">    autocrlf = <span class="literal">true</span></div><div class="line">    filemode = <span class="literal">false</span></div><div class="line">[i18n]</div><div class="line">    commitencoding = UTF-8</div><div class="line">[gui]</div><div class="line">    encoding = utf-8</div><div class="line">[<span class="built_in">alias</span>]</div><div class="line">    stage = add</div><div class="line">    unstage = reset HEAD</div><div class="line">    hb = merge --no-ff</div><div class="line">    rmv = remote -v</div><div class="line">    ci = commit</div><div class="line">    cia = commit --amend</div><div class="line">    co = checkout</div><div class="line">    br = branch</div><div class="line">    st = status</div><div class="line">    dc = diff --cached</div><div class="line">    dw = diff --word-diff</div><div class="line">    aa = add -A</div><div class="line">    rmall = !git ls-files --deleted | xargs git rm</div><div class="line">    ll = <span class="built_in">log</span> --pretty=format:<span class="string">"%C(yellow)%h%Cred%d%Creset\\ %cn\\ %Cblue%cr%Creset\\ %Cgreen%s%Creset"</span> --decorate --numstat</div><div class="line">    lg = <span class="built_in">log</span> --pretty=format:<span class="string">"%C(yellow)%h%Cred%d%Creset\\ %cn\\ %Cblue%cr%Creset\\ %Cgreen%s%Creset"</span> --decorate</div><div class="line">    lt = <span class="built_in">log</span> --pretty=format:<span class="string">"%C(yellow)%h%Cred%d%Creset\\ %cn\\ %Cblue%cr%Creset\\ %Cgreen%s%Creset"</span> --graph</div><div class="line">[receive]</div><div class="line">    denyCurrentBranch = ignore</div></pre></td></tr></table></figure>
<p>更多配置文件参考: <a href="https://github.com/wustrive2008/conf-file" target="_blank" rel="external">https://github.com/wustrive2008/conf-file</a></p>
<h3 id="参考">参考</h3><p>《Git Community Book》</p>
<h3 id="关于捐赠">关于捐赠</h3><p>如何觉得本文章对你有帮助，欢迎通过支付宝捐赠来支持博主</p>
<p><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexo%E6%94%AF%E4%BB%98%E5%AE%9D%E4%BB%98%E6%AC%BE%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%9C%80%E5%B0%8F.png" alt="捐赠"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Git全解析之用起来先">Git全解析之用起来先</h2><h3 id="先安装Git环境">先安装Git环境</h3><p>下载安装：<a href="http://git-scm.com/download/" target="_blank" rel="exte]]>
    </summary>
    
      <category term="git" scheme="https://wustrive2008.github.io/tags/git/"/>
    
      <category term="版本控制" scheme="https://wustrive2008.github.io/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
      <category term="项目管理" scheme="https://wustrive2008.github.io/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
      <category term="版本控制" scheme="https://wustrive2008.github.io/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[python基础语法]]></title>
    <link href="https://wustrive2008.github.io/2016/01/05/python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>https://wustrive2008.github.io/2016/01/05/python/python基础语法/</id>
    <published>2016-01-05T14:00:30.000Z</published>
    <updated>2016-11-05T18:14:33.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Python基础语法">Python基础语法</h2><h3 id="python版本">python版本</h3><p>虽然python3已经发布很长时间了，但现在大部分开发者使用的版本还是python2。主要原因是python3的改动比较大，并且向下兼容性不是很好，但是python3是未来的发展方向，所以作为初学者还是推荐学习python3版本。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[centos@bogon ~]$ python</div><div class="line">Python <span class="number">2.6</span><span class="number">.6</span> (r266:<span class="number">84292</span>, Nov <span class="number">22</span> <span class="number">2013</span>, <span class="number">12</span>:<span class="number">16</span>:<span class="number">22</span>) </div><div class="line">[GCC <span class="number">4.4</span><span class="number">.7</span> <span class="number">20120313</span> (Red Hat <span class="number">4.4</span><span class="number">.7</span><span class="number">-4</span>)] on linux2</div><div class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line">[centos@bogon ~]$ python3</div><div class="line">Python <span class="number">3.4</span><span class="number">.4</span> (default, Jan  <span class="number">5</span> <span class="number">2016</span>, <span class="number">21</span>:<span class="number">54</span>:<span class="number">11</span>) </div><div class="line">[GCC <span class="number">4.4</span><span class="number">.7</span> <span class="number">20120313</span> (Red Hat <span class="number">4.4</span><span class="number">.7</span><span class="number">-16</span>)] on linux</div><div class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h3 id="python的安装">python的安装</h3><p>下面主要介绍在python2的基础上安装python3(python2与python3版本共存)，因为现在大部分linux发现版本自带的python版本还是python2</p>
<ol>
<li>安装环境</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum install gcc </div><div class="line">yum install zlib-devel </div><div class="line">yum install make</div></pre></td></tr></table></figure>
<ol>
<li>下载python3版本<br>进入网站选择python版本：<a href="https://www.python.org/ftp/python/" target="_blank" rel="external">https://www.python.org/ftp/python/</a><br>这里选择的是Python-3.4.4.tgz </li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://www.python.org/ftp/python/3.4.4/Python-3.4.4.tgz</div></pre></td></tr></table></figure>
<ol>
<li>解压、编辑和安装</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">tar -zxvf Python-3.4.0.tgz </div><div class="line"><span class="built_in">cd</span> Python-3.4.0 </div><div class="line">./configure –prefix=/opt/python3 </div><div class="line">make all </div><div class="line">make install</div></pre></td></tr></table></figure>
<ol>
<li>链接到bin目录</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln <span class="_">-s</span> /opt/python3/bin/python3 /usr/bin/python3</div></pre></td></tr></table></figure>
<p><strong>提示：在python交互模式下方向键变字母的问题</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#安装readline-devel</span></div><div class="line"><span class="variable">$yum</span> install readline-devl</div><div class="line"><span class="comment">#重新安装python</span></div><div class="line">$./configure</div><div class="line"><span class="variable">$sudo</span> make install</div></pre></td></tr></table></figure>
<h3 id="字符串">字符串</h3><h4 id="三种引号的区别">三种引号的区别</h4><p>实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'hello python3'</span></div><div class="line"><span class="string">'hello python3'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"this's python3"</span></div><div class="line"><span class="string">"this's python3"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"""hello python3</span></div><div class="line"><span class="meta">... </span>this's python3"""</div><div class="line"><span class="string">"hello python3\nthis's python3"</span></div></pre></td></tr></table></figure></p>
<p><strong>提示：具体使用哪种方式根据需求灵活选择</strong></p>
<h4 id="字符串连接">字符串连接</h4><p>实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"michael"</span>+<span class="string">" "</span>+<span class="string">"jackson"</span></div><div class="line"><span class="string">'michael jackson'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"micheal"</span> <span class="string">"jackson"</span></div><div class="line"><span class="string">'michealjackson'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"micheal "</span> <span class="string">"jackson"</span></div><div class="line"><span class="string">'micheal jackson'</span></div></pre></td></tr></table></figure></p>
<p><strong>注意：不推荐使用第二种方式</strong></p>
<h4 id="格式说明符">格式说明符</h4><p>实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"John %s%s"</span> % (<span class="string">"Every"</span>, <span class="string">"Man"</span>)</div><div class="line"><span class="string">'John EveryMan'</span></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"%s %s %10s"</span> % (<span class="string">"John"</span> , <span class="string">"Every"</span> , <span class="string">"Man"</span>)</div><div class="line"><span class="string">'John Every        Man'</span></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"%-8s %s %10s"</span> % (<span class="string">"John"</span> , <span class="string">"Every"</span> , <span class="string">"Man"</span>)</div><div class="line"><span class="string">'John     Every        Man'</span></div></pre></td></tr></table></figure></p>
<h4 id="原始字符串与Unicode">原始字符串与Unicode</h4><p>原始字符串r:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Hello.\npython!'</span>)</div><div class="line">Hello.</div><div class="line">python!</div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">r'Hello.\npython!'</span>)</div><div class="line">Hello.\npython!</div></pre></td></tr></table></figure></p>
<p>Unicode对象：<br>python中的普通字符串在内部是以8位的ASCII码形式存储的，而Unicode字符串则存储为16的Unicode字符，这样能够表示更多的字符集。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">u'Hello.world!'</span></div><div class="line"><span class="string">'Hello.world!'</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>
<h3 id="数值与运算符">数值与运算符</h3><p>三种数值类型<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; type(1)</div><div class="line">&lt;class 'int'&gt;</div><div class="line">&gt;&gt;&gt;</div><div class="line">&gt;&gt;&gt; type(1.0)</div><div class="line">&lt;class 'float'&gt;</div><div class="line">&gt;&gt;&gt;</div><div class="line">&gt;&gt;&gt; type(1j)</div><div class="line">&lt;class 'complex'&gt;</div></pre></td></tr></table></figure></p>
<p>简单数值运算</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>+<span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>+<span class="number">1.0</span></div><div class="line"><span class="number">2.0</span></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2e23445</span>*<span class="number">3e45464</span></div><div class="line">inf</div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">33</span>/<span class="number">11</span></div><div class="line"><span class="number">3.0</span></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4.0</span>/<span class="number">2.0</span></div><div class="line"><span class="number">2.0</span></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span>/<span class="number">3</span></div><div class="line"><span class="number">1.6666666666666667</span></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span>%<span class="number">3</span></div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure>
<p>数值格式化</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"%.2f"</span> % <span class="number">2.322551</span>)</div><div class="line"><span class="number">2.32</span></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"%0.f"</span> % (<span class="number">343</span>*<span class="number">0.2</span>))</div><div class="line"><span class="number">69</span></div></pre></td></tr></table></figure>
<h3 id="参考">参考</h3><p>《Python编程入门经典》</p>
<h3 id="捐赠">捐赠</h3><p>如何觉得本文章对你有帮助，欢迎捐赠</p>
<p><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexo%E6%94%AF%E4%BB%98%E5%AE%9D%E4%BB%98%E6%AC%BE%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%9C%80%E5%B0%8F.png" alt="捐赠"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Python基础语法">Python基础语法</h2><h3 id="python版本">python版本</h3><p>虽然python3已经发布很长时间了，但现在大部分开发者使用的版本还是python2。主要原因是python3的改动比较大，并且向下兼容性不是]]>
    </summary>
    
      <category term="python" scheme="https://wustrive2008.github.io/tags/python/"/>
    
      <category term="脚本语言" scheme="https://wustrive2008.github.io/tags/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80/"/>
    
      <category term="python" scheme="https://wustrive2008.github.io/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[UML类图的6种关系]]></title>
    <link href="https://wustrive2008.github.io/2016/01/02/UML/UML%E7%B1%BB%E5%9B%BE%E7%9A%846%E7%A7%8D%E5%85%B3%E7%B3%BB/"/>
    <id>https://wustrive2008.github.io/2016/01/02/UML/UML类图的6种关系/</id>
    <published>2016-01-02T12:54:32.000Z</published>
    <updated>2016-11-05T18:14:33.000Z</updated>
    <content type="html"><![CDATA[<p>在UML类图中，常见的有以下几种关系:泛化（Generalization）,  实现（Realization）,关联（Association）,聚合（Aggregation）,组合(Composition)，依赖(Dependency)</p>
<h3 id="泛化(Generalization)关系">泛化(Generalization)关系</h3><p>一种继承关系,它指定了子类如何特化父类的所有特征和行为例如：兔子是动物的一种,男人是一类人。</p>
<p>图形：带三角箭头的实线，箭头指向父类</p>
<p><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexo%E6%B3%9B%E5%8C%96.gif" alt="泛化"></p>
<h3 id="实现(Realization)关系">实现(Realization)关系</h3><p>一种类与接口的关系，表示类是接口所有特征和行为的实现</p>
<p>图形：带三角箭头的虚线，箭头指向接口</p>
<p><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexo%E5%AE%9E%E7%8E%B0.gif" alt="实现"></p>
<h3 id="关联(Association)关系">关联(Association)关系</h3><p>一种拥有的关系,它使一个类知道另一个类的属性和方法；如：老师与学生，丈夫与妻子<br>关联可以是双向的，也可以是单向的。双向的关联可以有两个箭头或者没有箭头，单向的关联有一个箭头。</p>
<p>图形：带普通箭头的实心线，指向被拥有者</p>
<p><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexo%E5%85%B3%E8%81%94.gif" alt="关联"></p>
<h3 id="聚合(Aggregation)关系">聚合(Aggregation)关系</h3><p>整体与部分的关系.如车和轮胎是整体和部分的关系，聚合关系是关联关系的一种，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关系。</p>
<p>图形：带空心菱形的实心线，菱形指向整体</p>
<p><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexo%E8%81%9A%E5%90%88.gif" alt="聚合"></p>
<h3 id="组合(Composition)关系">组合(Composition)关系</h3><p>整体与部分的关系,没有公司就不存在部门，组合关系是关联关系的一种，是比聚合关系还要强的关系，它要求普通的聚合关系中代表整体的对象负责代表部分的对象的生命周期</p>
<p>图形：带实心菱形的实线，菱形指向整体</p>
<p><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexo%E7%BB%84%E5%90%88.gif" alt="组合"></p>
<h3 id="依赖(Dependency)关系">依赖(Dependency)关系</h3><p>一种使用关系，特定事物的改变有可能会影响到使用该事物的其他事物，在需要表示一个事物使用另一个事物时使用依赖关系。大多数情况下，依赖关系体现在某个类的方法使用另一个类的对象作为参数。</p>
<p>图形：带箭头的虚线表示，由依赖的一方指向被依赖的一方</p>
<p><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexo%E4%BE%9D%E8%B5%96.gif" alt="依赖"></p>
<h3 id="综合示例">综合示例</h3><p><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexo%E7%BB%BC%E5%90%88.gif" alt="示例"></p>
<p>转载自：<a href="http://blog.csdn.net/tianhai110/article/details/6339565" target="_blank" rel="external">UML类图几种关系的总结</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在UML类图中，常见的有以下几种关系:泛化（Generalization）,  实现（Realization）,关联（Association）,聚合（Aggregation）,组合(Composition)，依赖(Dependency)</p>
<h3 id="泛化(Gen]]>
    </summary>
    
      <category term="oop" scheme="https://wustrive2008.github.io/tags/oop/"/>
    
      <category term="UML" scheme="https://wustrive2008.github.io/tags/UML/"/>
    
      <category term="关系" scheme="https://wustrive2008.github.io/tags/%E5%85%B3%E7%B3%BB/"/>
    
      <category term="UML" scheme="https://wustrive2008.github.io/categories/UML/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入理解jvm之垃圾收集器]]></title>
    <link href="https://wustrive2008.github.io/2015/12/25/java/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3jvm%E4%B9%8B%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/"/>
    <id>https://wustrive2008.github.io/2015/12/25/java/深入理解jvm之垃圾收集器/</id>
    <published>2015-12-25T13:00:59.000Z</published>
    <updated>2016-11-05T18:14:33.000Z</updated>
    <content type="html"><![CDATA[<h2 id="判断对象是否存活">判断对象是否存活</h2><h3 id="可达性分析算法">可达性分析算法</h3><p>通过一系列称为”GC Roots”的对象作为起点，从这些节点开始向下搜索，搜索所有走过的路径称为引用链，当一个对象到GC Roots没有任何引用链相连时(从GC Roots到此对象不可达)，则证明此对象是不可用的。<br>可作为GC Roots的对象包括：</p>
<ul>
<li>虚拟机栈中所引用的对象</li>
<li>方法区中类静态属性引用的对象</li>
<li>方法区中常量引用的对象</li>
<li>本地方法栈中JNI引用的对象</li>
</ul>
<p>引用的分类</p>
<ul>
<li>强引用(Strong Reference): 在代码中普遍存在的，类似”Object obj = new Object()”这类引用，只要强引用还在，垃圾收集器永远不会回收掉被引用的对象</li>
<li>软引用(Sofe Reference): 有用但并非必须的对象，可用SoftReference类来实现软引用，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行二次回收。如果这次回收还没有足够的内存，才会抛出内存异常异常。</li>
<li>弱引用(Weak Reference): 被弱引用关联的对象只能生存到下一次垃圾收集发生之前，JDK提供了WeakReference类来实现弱引用</li>
<li>虚引用(Phantom Reference):也称为幽灵引用或幻影引用，是最弱的一种引用关系，JDK提供了PhantomReference类来实现虚引用。</li>
</ul>
<blockquote>
<p>不要使用finalize()方法来挽救对象。</p>
</blockquote>
<p>JVM判定无用的类的条件：</p>
<ul>
<li>该类的所有实例已经被回收，java堆中不存在该类的任何示例</li>
<li>加载该类的ClassLoader已经被回收</li>
<li>该类对应的java.lang.Class对象没有在任何地方被引用</li>
</ul>
<h2 id="垃圾收集算法">垃圾收集算法</h2><h3 id="标记-清除算法">标记-清除算法</h3><p>即先标记所有需要回收的对象，在标记完成后统一进行回收。该算法的两个不足：一个是效率问题，标记和清除两个过程效率不高；另一个是空间问题，标记清除后产生大量不连续的内存碎片，空间碎片太多导致为较大对象分配内存时，找不到足够大的连续内存。</p>
<h3 id="复制算法">复制算法</h3><p>将可用内存按容量划分为大小相对的两块，每次只使用其中一块，当这一块内存使用完，将还存活的对象复制到另一块，然后将已使用过的内存一次清理掉，很明显这种方式虽然解决了内存碎片问题，但是可用内存缩小为原来的一半，太浪费了。现在大部分的虚拟机都使用这种方式来回收新生代，即Eden区与两个Survivor区，默认Eden:一个Survivor=8:1</p>
<h3 id="标记-复制算法">标记-复制算法</h3><p>标记过程如标记-清除算法一样，后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉边界以外的内存。</p>
<h2 id="垃圾收集器">垃圾收集器</h2><p>这里主要列举现在常用的收集器</p>
<h3 id="CMS收集器">CMS收集器</h3><p>现在常用的一种垃圾收集器，基于标记-清除算法，收集过程包含4个步骤：</p>
<ul>
<li>初始标记</li>
<li>并发标记</li>
<li>重新标记</li>
<li>并发清除</li>
</ul>
<p>其中初始标记、重新标记这两个步骤仍然需要“Stop The World”。初始标记仅仅是标记一下GC Roots能直接关联到的对象，速度很快，并发标记就是进行GC Roots Trancing的过程，而重新标记阶段则是为了修正并发标记期间因用户程序继续运行而导致标记产生变动那一部分对象的标记记录，这个阶段的停顿时间比初始标记稍长一些，但远比并发标记时间短。<br>由于整个过程耗时最长的并发标记和并发清除过程收集器线程都可以与用户线程一起工作，所以从整体上看，CMS收集器的内存回收过程是与用户线程并发执行的。</p>
<p>CMS收集器的缺点：</p>
<ul>
<li>对CPU资源敏感 虽然不会导致用户线程停顿，但会占用一部分线程导致应用程序变慢，总吞吐量会降低。CMS默认启动的回收线程数是(CPU数量+3)/4 </li>
<li>无法处理浮动垃圾 可能出现”Concurrent Mode Failure”失败而导致另一次Full GC的产生。浮动垃圾是回收的过程与用户线程并行时用户线程产生的垃圾。</li>
<li>产生内存碎片 使用标记-清除算法</li>
</ul>
<h3 id="G1收集器">G1收集器</h3><p>一款面向服务端应用的比较新的垃圾收集器，具备以下特点：</p>
<ul>
<li>并行与并发 G1能够充分利用多CPU、多核环境下的硬件优势，使用多个CPU核心来缩短Stop The World的停顿时间</li>
<li>分代收集 </li>
<li>空间整合 同时使用标记-整理与复制算法不会产生内存空间碎片 </li>
<li>可预测的停顿 能让使用者指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒</li>
</ul>
<p>G1的垃圾收集步骤：</p>
<ul>
<li>初始标记</li>
<li>并发标记</li>
<li>最终标记</li>
<li>筛选回收</li>
</ul>
<h2 id="内存分配与回收策略">内存分配与回收策略</h2><ol>
<li><p>对象优先在Eden分配，当Eden没有足够的空间时，虚拟机发起一次Minor GC。可以通过JVM参数:-XX:+PrintGCDetails打印GC日志查看垃圾收集情况。</p>
<p> 示例：<br> JVM Args： -Xms20m -Xmx20m -Xmn10m<br> 堆大小共20m，其中新生代10m，老年代10m，默认-XX:SurvivorRatio=8决定了新生代中Eden区与一个Survivor区的空间比例是8:1</p>
</li>
<li><p>大对象直接进入老年代，如长字符串及数组，jvm提供了一个-XX:PretenureSizeThreshold参数，令大于这个设置值的对象直接在老年代分配内存，避免在Eden与Survivor之间发生大量内存复制。</p>
</li>
<li><p>长期存活的对象进入老年代 虚拟机给每个对象定义了一个对象年龄计数器。如果对象在Eden出生并经过一次Minor GC后仍然存活，并且能被Survivor容纳，将被移动到Survivor空间，并且对象年龄设为1，对象在Survivor空间每熬过一次Minor GC，年龄就增加1岁，当年龄到达一定长度(默认15)，将会被晋升都老年代。如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，无须等到PretenureSizeThreshold中要求的年龄。</p>
</li>
<li><p>空间分配担保，在发生Minor GC之前，虚拟机会先检查老年代最大可用连续空间是否大于新生代所有对象总空间，如果是则Minor GC是安全的。如果不是虚拟机会查看HandlePromotionFailure设置值是否允许担保失败。如果允许，那么会继续检查老年代最大可用连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试进行一次Minor GC，尽管这次Minor GC是有风险的；如果小于或者HandlePromotionFailure设置不允许冒险，那这是要进行一次Full GC。因为在极端的情况下，即新生代所有对象都存活，就需要把Survivor无法容纳的对象直接放入老年代。</p>
</li>
</ol>
<h3 id="参考">参考</h3><p>《深入理解java虚拟机 JVM高级特性与最佳实践》</p>
<h3 id="捐赠">捐赠</h3><p>如何觉得本文章对你有帮助，欢迎捐赠</p>
<p><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexo%E6%94%AF%E4%BB%98%E5%AE%9D%E4%BB%98%E6%AC%BE%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%9C%80%E5%B0%8F.png" alt="捐赠"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="判断对象是否存活">判断对象是否存活</h2><h3 id="可达性分析算法">可达性分析算法</h3><p>通过一系列称为”GC Roots”的对象作为起点，从这些节点开始向下搜索，搜索所有走过的路径称为引用链，当一个对象到GC Roots没有任何引用链相连时(]]>
    </summary>
    
      <category term="java" scheme="https://wustrive2008.github.io/tags/java/"/>
    
      <category term="虚拟机" scheme="https://wustrive2008.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
      <category term="性能" scheme="https://wustrive2008.github.io/tags/%E6%80%A7%E8%83%BD/"/>
    
      <category term="jvm" scheme="https://wustrive2008.github.io/tags/jvm/"/>
    
      <category term="垃圾收集器" scheme="https://wustrive2008.github.io/tags/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/"/>
    
      <category term="java" scheme="https://wustrive2008.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入理解jvm之内存区域与内存溢出]]></title>
    <link href="https://wustrive2008.github.io/2015/12/24/java/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3jvm%E4%B9%8B%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA/"/>
    <id>https://wustrive2008.github.io/2015/12/24/java/深入理解jvm之内存区域与内存溢出/</id>
    <published>2015-12-24T13:21:29.000Z</published>
    <updated>2016-11-05T18:14:33.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Java内存区域与内存溢出异常">Java内存区域与内存溢出异常</h2><h3 id="运行时数据区域">运行时数据区域</h3><p><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-blog%2Fjava%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%86%85%E5%AD%98%E5%88%86%E5%8C%BA.jpg" alt="java虚拟机内存分区"></p>
<h4 id="程序计数器">程序计数器</h4><ul>
<li>当前线程所执行的字节码的行号指示器</li>
<li>当前线程私有</li>
<li>不会出现OutOfMemoryError情况</li>
</ul>
<h4 id="java虚拟机栈">java虚拟机栈</h4><ul>
<li>线程私有，生命周期与线程相同</li>
<li>java方法执行的内存模型，每个方法执行的同时都会创建一个栈帧，存储局部变量表(基本类型、对象引用)、操作数栈、动态链接、方法出口等信息</li>
<li>StackOverflowError异常：当线程请求的栈深度大于虚拟机所允许的深度</li>
<li>OutOfMemoryError异常：如果栈的扩展时无法申请到足够的内存</li>
</ul>
<h4 id="本地方法栈">本地方法栈</h4><p>与虚拟机栈相似，主要为虚拟机使用到的Native方法服务，在HotSpot虚拟机中直接把本地方法栈与虚拟机栈二合一</p>
<h4 id="Java堆(Java_Heap)">Java堆(Java Heap)</h4><p>java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此区域的唯一目的就是存储对象实例。java堆是垃圾收集器管理的主要区域。java堆还可以细分为：新生代与老年代。在细一点有Eden空间、Form Survivor空间、To Survivor空间等。</p>
<ul>
<li>可以通过-Xmx和-Xms控制堆的大小</li>
<li>OutOfMemoryError异常：当在堆中没有内存完成实例分配，且堆也无法再扩展时。</li>
</ul>
<h4 id="方法区">方法区</h4><ul>
<li>线程间共享</li>
<li>用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据</li>
<li>OutOfMemoryError异常：当方法区无法满足内存的分配需求时</li>
</ul>
<h4 id="运行时常量池">运行时常量池</h4><ul>
<li>方法区的一部分</li>
<li>用于存放编译期生成的各种字面量与符号引用</li>
<li>OutOfMemoryError异常：当常量池无法再申请到内存时</li>
</ul>
<h4 id="直接内存">直接内存</h4><ul>
<li>NIO可以使用Native函数库直接分配堆外内存，堆中的DirectByteBuffer对象作为这块内存的引用进行操作</li>
<li>大小不受Java堆大小的限制，受本机(服务器)内存限制</li>
<li>OutOfMemoryError异常：系统内存不足时</li>
</ul>
<h3 id="HotSpot虚拟机">HotSpot虚拟机</h3><h4 id="对象的创建">对象的创建</h4><p>虚拟机遇到一条new指令时，首先将去检查这个对象的参数是否在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，必须先执行类的加载过程。<br>在类加载检查通过后，虚拟机将为新生对象分配内存。对象所需内存大小再类加载完成后便可确定。内存分配可以采用“指针碰撞”与“空闲列表”的方式。</p>
<h4 id="对象的访问定位">对象的访问定位</h4><p>java程序需要通过栈上的reference数据来操作堆上的具体对象。访问方式有使用句柄和直接指针两种。</p>
<ul>
<li>句柄访问 java堆中将会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息</li>
<li>直接指针访问 java堆对象的布局中必须考虑如何放置访问类型数据的相关信息，reference中存储的就是对象地址</li>
</ul>
<h3 id="OOM异常的解决思路">OOM异常的解决思路</h3><p>生成Dump快照文件：</p>
<ul>
<li>通过jvm参数—XX:-HeapDumpOnOutOfMemoryError可以让JVM在出现内存溢出是Dump出当前的内存转储快照</li>
<li>用jmap生产dump文件，win通过任务管理器查看tomcat的进程pid，linux用ps命令查看进程pid,然后用jmap命令</li>
</ul>
<p>先通过内存映像分析工具(如Eclipse的Memory Analyzer)进行分析，常见的情况有：</p>
<ul>
<li>内存泄露，对象已经死了，无法通过垃圾收集器进行自动回收，通过找出泄露的代码位置和原因，才好确定解决方案；</li>
<li>内存溢出，内存中的对象都还必须存活着，这说明Java堆分配空间不足，检查堆设置大小（-Xmx与-Xms），检查代码是否存在对象生命周期太长、持有状态时间过长的情况。</li>
</ul>
<p>OOM异常示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">package oom;</div><div class="line"></div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">/**</div><div class="line"> * VM Args: -Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError</div><div class="line">* @ClassName: HeapOOM </div><div class="line">*</div><div class="line"> */</div><div class="line">public class HeapOOM &#123;</div><div class="line">    static class OOMObject&#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        List&lt;OOMObject&gt; list = new ArrayList&lt;OOMObject&gt;();</div><div class="line">        while(true)&#123;</div><div class="line">            list.add(new OOMObject());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="参考">参考</h3><p>《深入理解java虚拟机 JVM高级特性与最佳实践》</p>
<h3 id="捐赠">捐赠</h3><p>如何觉得本文章对你有帮助，欢迎捐赠</p>
<p><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexo%E6%94%AF%E4%BB%98%E5%AE%9D%E4%BB%98%E6%AC%BE%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%9C%80%E5%B0%8F.png" alt="捐赠"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Java内存区域与内存溢出异常">Java内存区域与内存溢出异常</h2><h3 id="运行时数据区域">运行时数据区域</h3><p><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-blog%2]]>
    </summary>
    
      <category term="java" scheme="https://wustrive2008.github.io/tags/java/"/>
    
      <category term="虚拟机" scheme="https://wustrive2008.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
      <category term="性能" scheme="https://wustrive2008.github.io/tags/%E6%80%A7%E8%83%BD/"/>
    
      <category term="jvm" scheme="https://wustrive2008.github.io/tags/jvm/"/>
    
      <category term="HotSpot" scheme="https://wustrive2008.github.io/tags/HotSpot/"/>
    
      <category term="java" scheme="https://wustrive2008.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[重构之代码的坏味道]]></title>
    <link href="https://wustrive2008.github.io/2015/10/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%87%8D%E6%9E%84%E4%B9%8B%E4%BB%A3%E7%A0%81%E7%9A%84%E5%9D%8F%E5%91%B3%E9%81%93/"/>
    <id>https://wustrive2008.github.io/2015/10/24/设计模式/重构之代码的坏味道/</id>
    <published>2015-10-24T12:38:16.000Z</published>
    <updated>2016-11-05T18:14:33.000Z</updated>
    <content type="html"><![CDATA[<p>1个好的程序员顶10个普通的程序员，程序员之间的差异很大，这是大家的共识，这个差异应该主要表现在设计思想和方法上面。清晰的代码结构和优雅的设计方法在软件开发中的重要性不用多说。成功的原因各不相同，失败的原因却总是相似的。如果一段代码是不稳定或者有一些潜在问题的，那么代码往往会包含一些明显的痕迹。正如食物要腐坏之前，经常会发出一些异味一样。我们管这些痕迹叫做“代码坏味道”。下面主要介绍代码的坏味道，开发中要特别注意这样的代码，他们往往是失败的软件的开始。<br><a id="more"></a></p>
<h3 id="可度量的味道">可度量的味道</h3><h4 id="过长的方法">过长的方法</h4><ol>
<li>过长的方法往往难以理解，特别是在理解别人的代码的时候，发现这样的方法，往往有抵触心理，大多数人都不喜欢读太长的方法。</li>
<li>过长的方法不易维护，一个方法里面的逻辑过多，在后期维护、扩展的时候可能会出现各种问题，复杂条件式和循环体常常是提炼的信号。</li>
</ol>
<h4 id="大类">大类</h4><ol>
<li>类太大往往是因为做了太多事情，有些事情不是自己该做的，可能是抽象不够</li>
<li>类太大通常会出现太多的实例变量</li>
</ol>
<h4 id="过多的参数">过多的参数</h4><ol>
<li>方法的参数过多不易理解和使用，考虑是否可用对方法进行拆分或使用默认参数</li>
</ol>
<h4 id="过多的注释">过多的注释</h4><ol>
<li>注释太多让人厌烦，就像演讲一样，尽说废话，没人想听，应该言简意赅，让人一听就明白。</li>
<li>当你感觉需要注释，请先尝试重构，试着让所有的注释都变得多余，好的代码本身就应该是自注释的。</li>
</ol>
<h3 id="不必要的复杂性">不必要的复杂性</h3><h4 id="过度设计">过度设计</h4><ol>
<li>超出需求过多的设计往往是过度设计，对某种变化的应对，而这种变化没有发生，也许永远都不会发生。</li>
</ol>
<h3 id="重复">重复</h3><h4 id="重复代码">重复代码</h4><ol>
<li>往往由于设计的问题导致多处存在相似或相同的一段代码，考虑将这些代码提取到一个方法中。</li>
</ol>
<h4 id="异曲同工的类">异曲同工的类</h4><ol>
<li>如果出现多个类在做同样或相似的事情，考虑将这些类进行提炼融合，保证代码的简洁性。</li>
</ol>
<h3 id="条件逻辑">条件逻辑</h3><h4 id="switch语句太长">switch语句太长</h4><ol>
<li>switch语句太长容易导致重复的代码，考虑使用模式或多态来替换。</li>
</ol>
<h4 id="基本类型太多">基本类型太多</h4><ol>
<li>软件中，基本类型被过度使用。在某些场合下，应该使用一些小的类来代替这些基本类型。</li>
</ol>
<h4 id="纯稚的数据类">纯稚的数据类</h4><ol>
<li>这些类拥有一些字段，并提供了对应的Getter和Setter方法，除此以外一无所有。这些类只是一些不会说话的数据容器， 而且它们必定会被其他类过分琐细地操作。</li>
</ol>
<h4 id="数据泥团">数据泥团</h4><ol>
<li>反复出现的一组参数，有关联的多个数组换成类</li>
</ol>
<h4 id="令人迷惑的暂时值域">令人迷惑的暂时值域</h4><ol>
<li>有时候你会看到一个对象的实例变量仅为某些特定的场合而设。这样的代码将导致难以理解，因为你期望一个对象需要它所有的变量。很多情况下，这些值域应该不属于此class ，而应该单独的提取成新的类。</li>
</ol>
<h4 id="被拒绝的遗赠">被拒绝的遗赠</h4><ol>
<li>子类继承父类的方法和数据，但是它们只需要使用其中的一部分，考虑用代理替代继承关系。</li>
</ol>
<h4 id="亲密关系">亲密关系</h4><ol>
<li>有时候，类之间的关系变得非常亲密，并且需要花费大量时间来探究彼此之间的私有成分。考虑对他们进行拆散合并。</li>
</ol>
<h4 id="冗赘类">冗赘类</h4><ol>
<li>不要创建没有价值的类</li>
</ol>
<h3 id="职责">职责</h3><h4 id="发散式变化">发散式变化</h4><ol>
<li>如果某个类经常因为不同的原因在不同的方向上发生变化就会产生发散式变化。也就是说，一个类拥有多个引起它发生变化的原因。</li>
</ol>
<h4 id="霰弹式修改">霰弹式修改</h4><ol>
<li>霰弹式修改与发散式变化类似，却又存在相反的一面。每次进行某种修改时，你都必须对多个不同的类进行很多对应的小修改。</li>
</ol>
<h4 id="平行继承体系">平行继承体系</h4><ol>
<li>平行继承体系是霰弹式修改的一个特例。在这种情况下，当你为某个类增加一个子类时，你不得不为另一个类也相应增加一个子类。你也许能够识别到这种味道，因为一个继承体系中类的类名前缀与另一个体系中的类名前缀一样。</li>
</ol>
<h3 id="库类">库类</h3><h4 id="不完善的程序库类">不完善的程序库类</h4><ol>
<li>库类在使用时一定要小心，特别是在我们不知道一个库是否完整时。</li>
</ol>
<h3 id="参考">参考</h3><ol>
<li>《重构——改善既有代码的设计》</li>
<li><a href="http://blog.csdn.net/lovelion/article/details/9301691" target="_blank" rel="external">刘伟技术博客</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>1个好的程序员顶10个普通的程序员，程序员之间的差异很大，这是大家的共识，这个差异应该主要表现在设计思想和方法上面。清晰的代码结构和优雅的设计方法在软件开发中的重要性不用多说。成功的原因各不相同，失败的原因却总是相似的。如果一段代码是不稳定或者有一些潜在问题的，那么代码往往会包含一些明显的痕迹。正如食物要腐坏之前，经常会发出一些异味一样。我们管这些痕迹叫做“代码坏味道”。下面主要介绍代码的坏味道，开发中要特别注意这样的代码，他们往往是失败的软件的开始。<br>]]>
    
    </summary>
    
      <category term="oop" scheme="https://wustrive2008.github.io/tags/oop/"/>
    
      <category term="重构" scheme="https://wustrive2008.github.io/tags/%E9%87%8D%E6%9E%84/"/>
    
      <category term="软件设计" scheme="https://wustrive2008.github.io/tags/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="设计模式" scheme="https://wustrive2008.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>