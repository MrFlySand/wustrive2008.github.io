<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[wustrive's blog]]></title>
  <subtitle><![CDATA[好记性不如写博客]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="https://wustrive2008.github.io/"/>
  <updated>2016-11-27T16:06:27.000Z</updated>
  <id>https://wustrive2008.github.io/</id>
  
  <author>
    <name><![CDATA[wustrive]]></name>
    <email><![CDATA[wustrive_2008@126.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[简单排序查找算法总结]]></title>
    <link href="https://wustrive2008.github.io/2016/11/28/%E7%AE%97%E6%B3%95/%E7%AE%80%E5%8D%95%E6%8E%92%E5%BA%8F%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://wustrive2008.github.io/2016/11/28/算法/简单排序查找算法总结/</id>
    <published>2016-11-27T16:02:46.000Z</published>
    <updated>2016-11-27T16:06:27.000Z</updated>
    <content type="html"><![CDATA[<h2 id="简单排序查找算法总结">简单排序查找算法总结</h2><h3 id="排序算法">排序算法</h3><h4 id="冒泡排序">冒泡排序</h4><p>相邻的数据进行两两比较，小数放在前面，大数放在后面，<br>这样一趟下来，最小的数就被排在了第一位，第二趟也是如此，<br>如此类推，直到所有的数据排序完成</p>
<h4 id="插入排序">插入排序</h4><p>将数据分为两部分，有序部分与无序部分，<br>一开始有序部分包含第1个元素，依次将无序的元素插入到有序部分，直到所有元素有序。<br>插入排序又分为直接插入排序、二分插入排序、链表插入等，<br>它是稳定的排序算法，时间复杂度为O(n^2)</p>
<h4 id="快速排序">快速排序</h4><p>快速排序是目前在实践中非常高效的一种排序算法，它不是稳定的排序算法，平均时间复杂度为O(nlogn)，最差情况下复杂度为O(n^2)。<br>它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，<br>其中一部分的所有数据都比另外一部分的所有数据都要小，<br>然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p>
<h4 id="选择排序">选择排序</h4><p>基本原理：先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，<br>然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。<br>以此类推，直到所有元素均排序完毕。</p>
<h4 id="堆排序">堆排序</h4><p>先将初始数据R[1..n]建成一个最大堆，此堆为初始的无序区<br>再将关键字最大的记录R[1]（即堆顶）和无序区的最后一个记录R[n]交换，由此得到新的无序区R[1..n-1]和有序区R[n]，且满足R[1..n-1].keys≤R[n].key<br>由于交换后新的根R[1]可能违反堆性质，故应将当前无序区R[1..n-1]调整为堆。<br>重复2、3步骤，直到无序区只有一个元素为止。</p>
<h4 id="归并排序">归并排序</h4><p>将序列每相邻两个数字进行归并操作（merge)，形成floor(n/2)个序列，排序后每个序列包含两个元素<br>将上述序列再次归并，形成floor(n/4)个序列，每个序列包含四个元素<br>重复步骤2，直到所有元素排序完毕<br>归并排序是稳定的排序算法，其时间复杂度为O(nlogn)如果是使用链表的实现的话，空间复杂度可以达到O(1)，但如果是使用数组来存储数据的话，在归并的过程中，需要临时空间来存储归并好的数据，所以空间复杂度为O(n)</p>
<h3 id="搜索查找算法">搜索查找算法</h3><h4 id="顺序查找">顺序查找</h4><p>从表的一端开始，顺序扫描线性表，依次将扫描到的结点关键宇和给定值K相比较。<br>若当前扫描到的结点关键字与K相等，则查找成功；若扫描结束后，仍未找到关键字等于K的结点，则查找失败。<br>优点: 不要求待查找序列有序<br>缺点: 效率低，特别是待查找序列很大时</p>
<h4 id="块查找">块查找</h4><ol>
<li>首先将查找表分成若干块，在每一块中数据元素的存放是任意的，但块与块之间必须是有序的（假设这种排序是按关键字值递增的，也就是说在第一块中任意一个数据元素的关键字都小于第二块中所有数据元素的关键字，第二块中任意一个数据元素的关键字都小于第三块中所有数据元素的关键字，依次类推）； </li>
<li>建立一个索引表，把每块中最大的关键字值按块的顺序存放在一个辅助数组中，这个索引表也按升序排列； </li>
<li>查找时先用给定的关键字值在索引表中查找，确定满足条件的数据元素存放在哪个块中，查找方法既可以是折半方法，也可以是顺序查找。 </li>
<li>再到相应的块中顺序查找，便可以得到查找的结果。<br>优点：<br>①在表中插入或删除一个记录时，只要找到该记录所属的块，就在该块内进行插入和删除运算。<br>②因块内记录的存放是任意的，所以插入或删除比较容易，无须移动大量记录。<br>分块查找的主要代价是增加一个辅助数组的存储空间和将初始表分块排序的运算。<br>分块查找算法的效率介于顺序查找和二分查找之间。</li>
</ol>
<h4 id="二分查找">二分查找</h4><p>条件：数组递增<br>基本思想： </p>
<ol>
<li>查找区间R[low..high]，首先确定该区间的中点位置：mid = (low + high) / 2; </li>
<li>然后将待查的K值与R[mid]比较：若相等，则查找成功并返回此位置，否则须确定新的查找区间，继续二分查找。<br>① 若R[mid] &gt; K，则由数组的有序性可知R[mid..n]均大于K，因此该结点必定是在位置mid左边的R[0..mid-1]中<br>② 若R[mid] &lt; K，则要查找的K必在mid的右边的R[mid+1..n]中，下一次查找是针对新的查找区间进行的。 </li>
<li>因此，从初始的查找区间R[1..n]开始，每经过一次与当前查找区间的中点位置上的结点关键字的比较，就可确定查找是否成功，不成功则当前的查找区间就缩小一半。这一过程重复直至找到关键字为K的结点，或者直至当前的查找区间为空(即查找失败)时为止。 </li>
</ol>
<h3 id="附录">附录</h3><p><a href="https://github.com/wustrive2008/simple-algorithm" target="_blank" rel="external">简单算法的多语言示例</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="简单排序查找算法总结">简单排序查找算法总结</h2><h3 id="排序算法">排序算法</h3><h4 id="冒泡排序">冒泡排序</h4><p>相邻的数据进行两两比较，小数放在前面，大数放在后面，<br>这样一趟下来，最小的数就被排在了第一位，第二趟也是如]]>
    </summary>
    
      <category term="java" scheme="https://wustrive2008.github.io/tags/java/"/>
    
      <category term="golang" scheme="https://wustrive2008.github.io/tags/golang/"/>
    
      <category term="c" scheme="https://wustrive2008.github.io/tags/c/"/>
    
      <category term="算法" scheme="https://wustrive2008.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="https://wustrive2008.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="查找" scheme="https://wustrive2008.github.io/tags/%E6%9F%A5%E6%89%BE/"/>
    
      <category term="算法" scheme="https://wustrive2008.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[艺术与哲学作品的作用]]></title>
    <link href="https://wustrive2008.github.io/2016/11/04/%E6%91%98%E5%BD%95/%E8%89%BA%E6%9C%AF%E4%B8%8E%E5%93%B2%E5%AD%A6%E4%BD%9C%E5%93%81%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <id>https://wustrive2008.github.io/2016/11/04/摘录/艺术与哲学作品的作用/</id>
    <published>2016-11-04T13:12:26.000Z</published>
    <updated>2016-11-11T14:53:46.000Z</updated>
    <content type="html"><![CDATA[<p>我们在艺术和哲学作品中找打的是我们自己的痛苦和奋斗的客观表述通过声音，语言和形象予以诠释和再现。艺术家和哲学家不仅向我们展示我们的感受，而且以我们做不到的尖锐和智慧表达我们的体验，他们将我们生活的各个层面勾画出来，我们能认出是自己的，但是凭自己决不能理解的那么清楚，他们向我们解释我们的生存条件助我们解惑并减少孤立无援之感。我们也许不得不继续挖地洞，但是通过创造式的作品至少能获得片刻的顿悟，洞察我们的苦难，从而可以免于苦难带来的震惊孤立之感。<br>我们在黑暗中掘地洞之余一定要努力化眼泪为知识。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我们在艺术和哲学作品中找打的是我们自己的痛苦和奋斗的客观表述通过声音，语言和形象予以诠释和再现。艺术家和哲学家不仅向我们展示我们的感受，而且以我们做不到的尖锐和智慧表达我们的体验，他们将我们生活的各个层面勾画出来，我们能认出是自己的，但是凭自己决不能理解的那么清楚，他们向我]]>
    </summary>
    
      <category term="摘录" scheme="https://wustrive2008.github.io/tags/%E6%91%98%E5%BD%95/"/>
    
      <category term="艺术" scheme="https://wustrive2008.github.io/tags/%E8%89%BA%E6%9C%AF/"/>
    
      <category term="哲学" scheme="https://wustrive2008.github.io/tags/%E5%93%B2%E5%AD%A6/"/>
    
      <category term="摘录" scheme="https://wustrive2008.github.io/categories/%E6%91%98%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2016.8.27分享内容]]></title>
    <link href="https://wustrive2008.github.io/2016/08/27/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E5%88%86%E4%BA%AB/2016.8.27%E5%88%86%E4%BA%AB%E5%86%85%E5%AE%B9/"/>
    <id>https://wustrive2008.github.io/2016/08/27/工作与分享/2016.8.27分享内容/</id>
    <published>2016-08-27T14:12:45.000Z</published>
    <updated>2016-11-05T18:14:33.000Z</updated>
    <content type="html"><![CDATA[<h4 id="开发规范">开发规范</h4><h5 id="目的">目的</h5><ul>
<li>提高工作效率<br>  指定规范的最重要目的应该是提高工作效率。在一个没有规范的开发团队中，制定一个能够提高开发效率的规范是困难的，往往需要更多的试错和磨合，同时这也是迫切需要规范的信号。</li>
<li>减少运维成本<br>  规范常常是后期运维的有用依据。项目后期运维的难易往往依赖开发规范的执行力度。</li>
<li>团队传承<br>  熟悉开发规范往往是团队新入的第一个工作任务，有时也是一个新人对团队好坏的第一依据，更是新人更快融入团队的有效工具，可以想象，对于一个新人，面对一个没有任何规范的团队是多么的糟糕。</li>
</ul>
<h5 id="前提">前提</h5><ul>
<li>使用方便，流畅<br>  一个规范首先要让大家用起来爽，不能影响工作的流畅性，规范中的任何一条都不应该是多余的，每一步都应该是必要的。</li>
<li>协调性<br>  管理上应该对规范的顺利执行提供良好的环境，不能忽视执行规范带来的时间成本。保证整个开发周期的协调性，没有一个好的设计规范和运维规范，很难保证一个好的开发规范能够实施顺利。</li>
</ul>
<h5 id="原则">原则</h5><ul>
<li>约束随意性保证创造性<br>  规范不能影响开发工作的创造性，所以规范的灵活度要把握好。一个好的规范往往只是用来约束一小部分人，就像制定法律来约束小部分思想邪恶的“坏人”的行为一样，不能影响到大部分好的行为。一个国家的法律如果缺失灵活性，往往会压制国民的创造性，影响国家的发展。</li>
</ul>
<h5 id="方法">方法</h5><ul>
<li>避免个人偏好<br>  规范是由人来制定的，所以很难避免规范倾向于个人偏好，如果一个规范完全按照某个人的偏好来制定，这个规范在一开始就注定是失败的。</li>
<li>基于行业经验<br>  制定规范一个较好的实践就是参考行业经验，在一些大公司的规范基础上结合自己团队的实际情况，进行优化、改造。就像我们基于马列的社会主义结合我国的国情指定特色社会主义一样。</li>
<li>一人制定 多人讨论定稿<br>  群众是愚蠢的，所以不要在没有任何基础和准备的情况下开会讨论任何事情，在这种情况下的最好也就是一个“中庸”的结果，不要陷入人多力量大这个思维陷阱。一人出方案，多人讨论，集思广益是很好的实践。</li>
</ul>
<h4 id="个人思维思想">个人思维思想</h4><ul>
<li>训练独立思考能力，增强辨别是非能力<br>  网络时代，很多人只会接受信息，但是独立思考能力不强。所谓独立思考，不是特立独行，不是一定要对社会问题有不同寻常的论断，而是说这个论断应该做到知其然知其所以然。</li>
<li>战胜对未知的恐惧<br>  害怕未知的事物是人的本性，是从我们祖先那里遗传下来的。常问自己：“你害怕什么”，多做尝试，通过尝试加强信心，从而慢慢克服恐惧</li>
</ul>
<h4 id="三体与互联网公司">三体与互联网公司</h4><ul>
<li><p>三体观点</p>
<ul>
<li>生存是文明的第一需要</li>
<li>文明不断增长和扩张，但宇宙中的物质总量保持不变</li>
<li>猜疑链：宇宙中的不同文明会猜疑对方并采取各种手段毁灭对方</li>
<li>技术爆炸：任何一个不起眼的小文明在宇宙尺度中很快可以通过技术大爆炸超越自己</li>
</ul>
</li>
<li><p>互联网环境</p>
<ul>
<li>生存是公司的第一需要</li>
<li>公司不断增长和扩张，商业环境中的市场总量有限</li>
<li>垄断主义。商业模式的本质造成只有绝对的垄断，才可以绝对的利用资源提高效率，创造利润。每一个公司为了实现公司战略，必须逼死其他公司，占有绝对的市场垄断</li>
<li>颠覆逆袭。借助互联网的力量，小公司随时可能发生商业模式爆炸，一下子远远走在大公司前面，灭掉大公司</li>
</ul>
</li>
<li><p>隐藏自己 干掉别人<br>  小米、凡客、facebook，这些都是近几年借助互联网思维异军突起颠覆行业格局和品牌影响力的公司。所以在现代商业模式之下，每一个公司都要学会隐藏自己，暴露的越早，面临的危险越大。</p>
</li>
</ul>
<h4 id="《三体》资料">《三体》资料</h4><ul>
<li><a href="http://sanwen8.cn/p/142AwLy.html" target="_blank" rel="external">为啥大佬们都爱看《三体》</a></li>
<li><a href="https://pan.baidu.com/s/1nvjMnIL" target="_blank" rel="external">《三体》电子书下载</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="开发规范">开发规范</h4><h5 id="目的">目的</h5><ul>
<li>提高工作效率<br>  指定规范的最重要目的应该是提高工作效率。在一个没有规范的开发团队中，制定一个能够提高开发效率的规范是困难的，往往需要更多的试错和磨合，同时这也是迫切需要规]]>
    </summary>
    
      <category term="规范" scheme="https://wustrive2008.github.io/tags/%E8%A7%84%E8%8C%83/"/>
    
      <category term="分享" scheme="https://wustrive2008.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
      <category term="三体" scheme="https://wustrive2008.github.io/tags/%E4%B8%89%E4%BD%93/"/>
    
      <category term="分享" scheme="https://wustrive2008.github.io/categories/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[正则表达式]]></title>
    <link href="https://wustrive2008.github.io/2016/03/21/Linux/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://wustrive2008.github.io/2016/03/21/Linux/正则表达式/</id>
    <published>2016-03-21T08:00:05.000Z</published>
    <updated>2016-11-05T18:14:33.000Z</updated>
    <content type="html"><![CDATA[<p>正则表达式，又称正规表示法、常规表示法（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些符合某个模式的文本。<br><a id="more"></a></p>
<h3 id="基础语法">基础语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line">------------------------------------------------------------------------------</div><div class="line">字符         | 说明</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\            | 将下一字符标记为特殊字符、文本、反向引用或八进制转义符</div><div class="line">------------------------------------------------------------------------------</div><div class="line">^            | 匹配输入字符串开始的位置</div><div class="line">------------------------------------------------------------------------------</div><div class="line">$            | 匹配输入字符串结束的位置</div><div class="line">------------------------------------------------------------------------------</div><div class="line">*            | 零次或多次匹配前面的字符或子表达式</div><div class="line">------------------------------------------------------------------------------</div><div class="line">+            | 一次或多次匹配前面的字符或子表达式</div><div class="line">------------------------------------------------------------------------------</div><div class="line">?            | 零次或一次匹配前面的字符或子表达式</div><div class="line">------------------------------------------------------------------------------</div><div class="line">&#123;n&#125;          | n 是非负整数。正好匹配 n 次</div><div class="line">------------------------------------------------------------------------------</div><div class="line">&#123;n,&#125;         | 至少匹配 n 次</div><div class="line">------------------------------------------------------------------------------</div><div class="line">&#123;n,m&#125;        | 匹配至少 n 次，至多 m 次</div><div class="line">------------------------------------------------------------------------------</div><div class="line">?            | 当此字符紧随任何其他限定符（*、+、?、&#123;n&#125;、&#123;n,&#125;、&#123;n,m&#125;）</div><div class="line">              之后时，匹配模式是&quot;非贪心的&quot;。&quot;非贪心的&quot;模式匹配搜索到的、</div><div class="line">              尽可能短的字符串，而默认的&quot;贪心的&quot;模式匹配搜索到的、尽可能长的字符串</div><div class="line">------------------------------------------------------------------------------</div><div class="line">.            | 匹配除&quot;\r\n&quot;之外的任何单个字符</div><div class="line">------------------------------------------------------------------------------</div><div class="line">(pattern)    | 匹配 pattern 并捕获该匹配的子表达式</div><div class="line">------------------------------------------------------------------------------</div><div class="line">(?:pattern)  | 匹配 pattern 但不捕获该匹配的子表达式，即它是一个非捕获匹配，</div><div class="line">              不存储供以后使用的匹配</div><div class="line">------------------------------------------------------------------------------</div><div class="line">(?=pattern)  | 执行正向预测先行搜索的子表达式，该表达式匹配处于匹配 </div><div class="line">              pattern 的字符串的起始点的字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配</div><div class="line">------------------------------------------------------------------------------</div><div class="line">(?!pattern)  | 执行反向预测先行搜索的子表达式，该表达式匹配不处于匹配 </div><div class="line">              pattern 的字符串的起始点的搜索字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配</div><div class="line">------------------------------------------------------------------------------</div><div class="line">x|y          | 匹配 x 或 y</div><div class="line">------------------------------------------------------------------------------</div><div class="line">[xyz]        | 字符集。匹配包含的任一字符</div><div class="line">------------------------------------------------------------------------------</div><div class="line">[^xyz]       | 反向字符集。匹配未包含的任何字符</div><div class="line">------------------------------------------------------------------------------</div><div class="line">[a-z]        | 字符范围。匹配指定范围内的任何字符</div><div class="line">------------------------------------------------------------------------------</div><div class="line">[^a-z]       | 反向范围字符。匹配不在指定的范围内的任何字符</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\b           | 匹配一个字边界，即字与空格间的位置。</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\B           | 非字边界匹配。</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\cx          | 匹配 x 指示的控制字符。例如，\cM 匹配 Control-M 或回车符。</div><div class="line">              x 的值必须在 A-Z 或 a-z 之间</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\d           | 数字字符匹配。等效于 [0-9]。</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\D           | 非数字字符匹配。等效于 [^0-9]。</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\f           | 换页符匹配。等效于 \x0c 和 \cL。</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\n           | 换行符匹配。等效于 \x0a 和 \cJ。</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\r           | 匹配一个回车符。等效于 \x0d 和 \cM。</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\s           | 匹配任何空白字符，包括空格、制表符、换页符等。</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\S           | 匹配任何非空白字符。与 [^ \f\n\r\t\v] 等效。</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\t           | 制表符匹配。与 \x09 和 \cI 等效。</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\v           | 垂直制表符匹配。与 \x0b 和 \cK 等效。</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\w           | 匹配任何字类字符，包括下划线。与&quot;[A-Za-z0-9_]&quot;等效</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\W           | 与任何非单词字符匹配。与&quot;[^A-Za-z0-9_]&quot;等效。</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\xn          | 匹配 n，此处的 n 是一个十六进制转义码。</div><div class="line">              十六进制转义码必须正好是两位数长</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\num         | 匹配 num，此处的 num 是一个正整数。到捕获匹配的反向引用</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\n           | 标识一个八进制转义码或反向引用。如果 \n 前面至少有 n 个</div><div class="line">              捕获子表达式，那么 n 是反向引用。否则，如果 n 是八进制数 (0-7)，那么 n 是八进制转义码。</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\nm          | 标识一个八进制转义码或反向引用。</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\nml         | 当 n 是八进制数 (0-3)，m 和 l 是八进制数 (0-7) 时，</div><div class="line">              匹配八进制转义码 nml。</div><div class="line">------------------------------------------------------------------------------</div><div class="line">\un          | 匹配 n，其中 n 是以四位十六进制数表示的 Unicode 字符。</div><div class="line">              例如，\u00A9 匹配版权符号 (©)。</div><div class="line">------------------------------------------------------------------------------</div></pre></td></tr></table></figure>
<h3 id="常用正则表达式">常用正则表达式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">用户名：/^[a-z0-9_-]&#123;3,16&#125;$/</div><div class="line">密码：/^[a-z0-9_-]&#123;6,18&#125;$/</div><div class="line">十六进制值：/^#?([a-f0-9]&#123;6&#125;|[a-f0-9]&#123;3&#125;)$/</div><div class="line">电子邮箱：/^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]&#123;2,6&#125;)$/</div><div class="line">URL：/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]&#123;2,6&#125;)([\/\w \.-]*)*\/?$/</div><div class="line">IP 地址：/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/</div><div class="line">HTML 标签：/^&lt;([a-z]+)([^&lt;]+)*(?:&gt;(.*)&lt;\/\1&gt;|\s+\/&gt;)$/</div><div class="line">Unicode编码中的汉字范围：/^[u4e00-u9fa5],&#123;0,&#125;$/</div><div class="line">匹配中文字符的正则表达式： [\u4e00-\u9fa5]</div><div class="line">评注：匹配中文还真是个头疼的事，有了这个表达式就好办了</div><div class="line">匹配双字节字符(包括汉字在内)：[^\x00-\xff]</div><div class="line">评注：可以用来计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）</div><div class="line">匹配空白行的正则表达式：\n\s*\r</div><div class="line">评注：可以用来删除空白行</div><div class="line">匹配HTML标记的正则表达式：&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/\1&gt;|&lt;.*? /&gt;</div><div class="line">评注：网上流传的版本太糟糕，上面这个也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力</div><div class="line">匹配首尾空白字符的正则表达式：^\s*|\s*$</div><div class="line">评注：可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式</div><div class="line">匹配Email地址的正则表达式：\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*</div><div class="line">评注：表单验证时很实用</div><div class="line">匹配网址URL的正则表达式：[a-zA-z]+://[^\s]*</div><div class="line">评注：网上流传的版本功能很有限，上面这个基本可以满足需求</div><div class="line">匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$</div><div class="line">评注：表单验证时很实用</div><div class="line">匹配国内电话号码：\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;</div><div class="line">评注：匹配形式如 0511-4405222 或 021-87888822</div><div class="line">匹配腾讯QQ号：[1-9][0-9]&#123;4,&#125;</div><div class="line">评注：腾讯QQ号从10000开始</div><div class="line">匹配中国大陆邮政编码：[1-9]\d&#123;5&#125;(?!\d)</div><div class="line">评注：中国大陆邮政编码为6位数字</div><div class="line">匹配身份证：\d&#123;15&#125;|\d&#123;18&#125;</div><div class="line">评注：中国大陆的身份证为15位或18位</div><div class="line">匹配ip地址：\d+\.\d+\.\d+\.\d+</div><div class="line">评注：提取ip地址时有用</div><div class="line">匹配特定数字：</div><div class="line">^[1-9]\d*$　 　 //匹配正整数</div><div class="line">^-[1-9]\d*$ 　 //匹配负整数</div><div class="line">^-?[1-9]\d*$　　 //匹配整数</div><div class="line">^[1-9]\d*|0$　 //匹配非负整数（正整数 + 0）</div><div class="line">^-[1-9]\d*|0$　　 //匹配非正整数（负整数 + 0）</div><div class="line">^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$　　 //匹配正浮点数</div><div class="line">^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$　 //匹配负浮点数</div><div class="line">^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$　 //匹配浮点数</div><div class="line">^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$　　 //匹配非负浮点数（正浮点数 + 0）</div><div class="line">^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$　　//匹配非正浮点数（负浮点数 + 0）</div><div class="line">评注：处理大量数据时有用，具体应用时注意修正</div><div class="line">匹配特定字符串：</div><div class="line">^[A-Za-z]+$　　//匹配由26个英文字母组成的字符串</div><div class="line">^[A-Z]+$　　//匹配由26个英文字母的大写组成的字符串</div><div class="line">^[a-z]+$　　//匹配由26个英文字母的小写组成的字符串</div><div class="line">^[A-Za-z0-9]+$　　//匹配由数字和26个英文字母组成的字符串</div><div class="line">^\w+$　　//匹配由数字、26个英文字母或者下划线组成的字符串</div></pre></td></tr></table></figure>
<h3 id="分组捕获_“()”">分组捕获 “()”</h3><h4 id="分组">分组</h4><p>用小括号来指定子表达式(也叫做分组)，然后你就可以指定这个子表达式的重复次数了，你也可以对子表达式进行其它一些操作。<br>默认情况下，每个分组会自动拥有一个组号，规则是：从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。<br>示例：<br>(\d{1,3}.){3}\d{1,3}  是一个简单的IP地址匹配表达式。要理解这个表达式，请按下列顺序分析它：\d{1,3}匹配1到3位的数字，(\d{1,3}.){3}匹配三位数字加上一个英文句号(这个整体也就是这个分组)重复3次，最后再加上一个一到三位的数字(\d{1,3})</p>
<h4 id="反向引用">反向引用</h4><p>后向引用用于重复搜索前面某个分组匹配的文本,示例:<br>\b(\w+)\b\s+\1\b可以用来匹配重复的单词，像go go, 或者kitty kitty。这个表达式首先是一个单词，也就是单词开始处和结束处之间的多于一个的字母或数字(\b(\w+)\b)，这个单词会被捕获到编号为1的分组中，然后是1个或几个空白符(\s+)，最后是分组1中捕获的内容（也就是前面匹配的那个单词）(\1)</p>
<h4 id="自定义组名">自定义组名</h4><p>你也可以自己指定子表达式的组名。要指定一个子表达式的组名，请使用这样的语法：(?<word>\w+)(或者把尖括号换成’也行：(?’Word’\w+)),这样就把\w+的组名指定为Word了。要反向引用这个分组捕获的内容，你可以使用\k<word>,所以上一个例子也可以写成这样：\b(?<word>\w+)\b\s+\k<word>\b。</word></word></word></word></p>
<p>常用的分组语法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">分类        代码/语法              说明</div><div class="line">-------------------------------------------------------------------------------</div><div class="line">捕获        (exp)                  匹配exp,并捕获文本到自动命名的组里</div><div class="line">-------------------------------------------------------------------------------</div><div class="line">            (?&lt;name&gt;exp)           匹配exp,并捕获文本到名称为name的组里，</div><div class="line">                                   也可以写成(?&apos;name&apos;exp)   </div><div class="line">-------------------------------------------------------------------------------</div><div class="line">            (?:exp)                匹配exp,不捕获匹配的文本，也不给此分组分配</div><div class="line">                                   组号</div><div class="line">-------------------------------------------------------------------------------</div><div class="line">零宽断言    (?=exp)                匹配exp前面的位置</div><div class="line">-------------------------------------------------------------------------------</div><div class="line">            (?&lt;=exp)               匹配exp后面的位置</div><div class="line">-------------------------------------------------------------------------------</div><div class="line">            (?!exp)                匹配后面跟的不是exp的位置</div><div class="line">-------------------------------------------------------------------------------</div><div class="line">            (?&lt;!exp)               匹配前面不是exp的位置</div></pre></td></tr></table></figure></p>
<h3 id="零宽断言">零宽断言</h3><h4 id="零宽断言-1">零宽断言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(?=exp)也叫零宽度正预测先行断言，它断言自身出现的位置的后面能匹配表达式exp。比如\b\w+(?=ing\b)，匹配以ing结尾的单词的前面部分(除了ing以外的部分)，如查找I&apos;m singing while you&apos;re dancing.时，它会匹配sing和danc。</div><div class="line">(?&lt;=exp)也叫零宽度正回顾后发断言，它断言自身出现的位置的前面能匹配表达式exp。比如(?&lt;=\bre)\w+\b会匹配以re开头的单词的后半部分(除了re以外的部分)，例如在查找reading a book时，它匹配ading。</div></pre></td></tr></table></figure>
<h4 id="负向零宽断言">负向零宽断言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">\b\w*q[^u]\w*\b匹配包含后面不是字母u的字母q的单词。但是如果多做测试(或者你思维足够敏锐，直接就观察出来了)，你会发现，如果q出现在单词的结尾的话，像Iraq,Benq，这个表达式就会出错。这是因为[^u]总要匹配一个字符，所以如果q是单词的最后一个字符的话，后面的[^u]将会匹配q后面的单词分隔符(可能是空格，或者是句号或其它的什么)，后面的\w*\b将会匹配下一个单词，于是\b\w*q[^u]\w*\b就能匹配整个Iraq fighting。负向零宽断言能解决这样的问题，因为它只匹配一个位置，并不消费任何字符。现在，我们可以这样来解决这个问题：\b\w*q(?!u)\w*\b。</div><div class="line">零宽度负预测先行断言(?!exp)，断言此位置的后面不能匹配表达式exp。例如：\d&#123;3&#125;(?!\d)匹配三位数字，而且这三位数字的后面不能是数字；\b((?!abc)\w)+\b匹配不包含连续字符串abc的单词。</div><div class="line">同理，我们可以用</div><div class="line">(?&lt;!exp),零宽度负回顾后发断言来断言此位置的前面不能匹配表达式exp：(?&lt;![a-z])\d&#123;7&#125;匹配前面不是小写字母的七位数字</div></pre></td></tr></table></figure>
<h3 id="贪婪与懒惰">贪婪与懒惰</h3><p>当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能多的字符。以这个表达式为例：a.<em>b，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，它会匹配整个字符串aabab。这被称为贪婪匹配。<br>有时，我们更需要懒惰匹配，也就是匹配尽可能少的字符。前面给出的限定符都可以被转化为懒惰匹配模式，只要在它后面加上一个问号?。这样.</em>?就意味着匹配任意数量的重复，但是在能使整个匹配成功的前提下使用最少的重复。现在看看懒惰版的例子吧：<br>a.*?b匹配最短的，以a开始，以b结束的字符串。如果把它应用于aabab的话，它会匹配aab（第一到第三个字符）和ab（第四到第五个字符）</p>
<h3 id="正则表达式编写建议">正则表达式编写建议</h3><h4 id="常见问题">常见问题</h4><p>误匹配：指正则表达式所匹配的内容范围超出了所需要范围，有些文本明明不符合要求，但是被所写的正则式“击中了”。例如，如果使用\d{11}来匹配11位的手机号，\d{11}不单能匹配正确的手机号，它还会匹配98765432100这样的明显不是手机号的字符串。我们把这样的匹配称之为误匹配。<br>漏匹配：指正则表达式所匹配的内容所规定的范围太狭窄，有些文本确实是所需要的，但是所写的正则没有将这种情况囊括在内。例如，使用\d{18}来匹配18位的身份证号码，就会漏掉结尾是字母X的情况。</p>
<p>写出一条正则表达式，既可能只出现误匹配（条件写得极宽松，其范围大于目标文本），也可能只出现漏匹配（只描述了目标文本中多种情况种的一种），还可能既有误匹配又有漏匹配。例如，使用\w+.com来匹配.com结尾的域名，既会误匹配abc_.com这样的字串（合法的域名中不含下划线，\w包含了下划线这种情况），又会漏掉ab-c.com这样的域名（合法域名中可以含中划线，但是\w不匹配中划线）。</p>
<h4 id="编写建议">编写建议</h4><ul>
<li><p>掌握语法细节。正则表达式在各种语言中，其语法大致相同，细节各有千秋。明确所使用语言的正则的语法的细节，是写出正确、高效正则表达式的基础。例如，perl中与\w等效的匹配范围是[a-zA-Z0-9_]；perl正则式不支持肯定逆序环视中使用可变的重复（variable repetition inside lookbehind，例如(?&lt;=.*)abc），但是.Net语法是支持这一特性的；又如，JavaScript连逆序环视（Lookbehind,如(?&lt;=ab)c）都不支持，而perl和python是支持的。《精通正则表达式》第3章《正则表达式的特性和流派概览》明确地列出了各大派系正则的异同，这篇文章也简要地列出了几种常用语言、工具中正则的比较。对于具体使用者而言，至少应该详细了解正在使用的那种工作语言里正则的语法细节。</p>
</li>
<li><p>先粗后精，先加后减。使用正则表达式语法对于目标文本进行描述和界定，可以像画素描一样，先大致勾勒出框架，再逐步在局步实现细节。仍举刚才的手机号的例子，先界定\d{11}，总不会错；再细化为1[358]\d{9}，就向前迈了一大步（至于第二位是不是3、5、8，这里无意深究，只举这样一个例子，说明逐步细化的过程）。这样做的目的是先消除漏匹配（刚开始先尽可能多地匹配，做加法），然后再一点一点地消除误匹配（做减法）。这样有先有后，在考虑时才不易出错，从而向“不误不漏”这个目标迈进。</p>
</li>
<li><p>留有余地。所能看到的文本sample是有限的，而待匹配检验的文本是海量的，暂时不可见的。对于这样的情况，在写正则表达式时要跳出所能见到的文本的圈子，开拓思路，作出“战略性前瞻”。例如，经常收到这样的垃圾短信：“发<em>票”、“发#漂”。如果要写规则屏蔽这样烦人的垃圾短信，不但要能写出可以匹配当前文本的正则表达式 发[</em>#](?:票|漂)，还要能够想到 发.(?:票|漂|飘)之类可能出现的“变种”。这在具体的领域或许会有针对性的规则，不多言。这样做的目的是消除漏匹配，延长正则表达式的生命周期。</p>
</li>
<li><p>明确。具体说来，就是谨慎用点号这样的元字符，尽可能不用星号和加号这样的任意量词。只要能确定范围的，例如\w，就不要用点号；只要能够预测重复次数的，就不要用任意量词。例如，写析取twitter消息的脚本，假设一条消息的xml正文部分结构是<span class="”msg”">…</span>且正文中无尖括号，那么<span class="”msg”">[^&lt;]{1,480}</span>这种写法的思路要好于<span class="”msg”">.*</span>，原因有二：一是使用[^&lt;]，它保证了文本的范围不会超出下一个小于号所在的位置；二是明确长度范围，{1,480}，其依据是一条twitter消息大致能的字符长度范围。当然，480这个长度是否正确还可推敲，但是这种思路是值得借鉴的。说得狠一点，“滥用点号、星号和加号是不环保、不负责任的做法”。</p>
</li>
<li><p>不要让稻草压死骆驼。每使用一个普通括号()而不是非捕获型括号(?:…)，就会保留一部分内存等着你再次访问。这样的正则表达式、无限次地运行次数，无异于一根根稻草的堆加，终于能将骆驼压死。养成合理使用(?:…)括号的习惯。</p>
</li>
<li><p>宁简勿繁。将一条复杂的正则表达式拆分为两条或多条简单的正则表达式，编程难度会降低，运行效率会提升。例如用来消除行首和行尾空白字符的正则表达式s/^\s+|\s+$//g;，其运行效率理论上要低于s/^\s+//g; s/\s+$//g; 。这个例子出自《精通正则表达式》第五章，书中对它的评论是“它几乎总是最快的，而且显然最容易理解”。既快又容易理解，何乐而不为？工作中我们还有其它的理由要将C==(A|B)这样的正则表达式拆为A和B两条表达式分别执行。例如，虽然A和B这两种情况只要有一种能够击中所需要的文本模式就会成功匹配，但是如果只要有一条子表达式（例如A）会产生误匹配，那么不论其它的子表达式（例如B）效率如何之高，范围如何精准，C的总体精准度也会因A而受到影响。</p>
</li>
<li><p>巧妙定位。有时候，我们需要匹配的the，是作为单词的the（两边有空格），而不是作为单词一部分的t-h-e的有序排列（例如together中的the）。在适当的时候用上^，$，\b等等定位锚点，能有效提升找到成功匹配、淘汰不成功匹配的效率。</p>
</li>
</ul>
<h3 id="参考博文">参考博文</h3><ol>
<li><a href="http://www.jb51.net/tools/zhengze.html" target="_blank" rel="external">正则表达式30分钟入门教程</a></li>
<li><a href="http://www.jb51.net/tools/regex.htm" target="_blank" rel="external">常用正则表达式</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>正则表达式，又称正规表示法、常规表示法（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些符合某个模式的文本。<br>]]>
    
    </summary>
    
      <category term="linux" scheme="https://wustrive2008.github.io/tags/linux/"/>
    
      <category term="regex" scheme="https://wustrive2008.github.io/tags/regex/"/>
    
      <category term="正则表达式" scheme="https://wustrive2008.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="Linux" scheme="https://wustrive2008.github.io/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javaScript数组方法总结]]></title>
    <link href="https://wustrive2008.github.io/2016/01/14/js/arrayFunction/"/>
    <id>https://wustrive2008.github.io/2016/01/14/js/arrayFunction/</id>
    <published>2016-01-14T14:06:43.000Z</published>
    <updated>2016-11-05T18:14:33.000Z</updated>
    <content type="html"><![CDATA[<h2 id="javaScript数组方法总结">javaScript数组方法总结</h2><h3 id="Array-prototype-indexOf&amp;lastIndexOf_检索">Array.prototype.indexOf&amp;lastIndexOf 检索</h3><p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">2</span>));</div><div class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">10</span>));</div><div class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">1</span>,<span class="number">1</span>));</div><div class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">1</span>,<span class="number">-3</span>));</div><div class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">2</span>,<span class="number">-1</span>));</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="number">2</span>));</div><div class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="number">2</span>,<span class="number">-2</span>));</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">-1</div><div class="line">4</div><div class="line">4</div><div class="line">5</div><div class="line">5</div><div class="line">1</div><div class="line">[Finished in 0.2s]</div></pre></td></tr></table></figure></p>
<h3 id="Array-prototype-join_将数组转为字符串">Array.prototype.join 将数组转为字符串</h3><p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.join());</div><div class="line"><span class="built_in">console</span>.log(arr.join(<span class="string">"_"</span>));</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeatString</span>(<span class="params">str,n</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Array</span>(n+<span class="number">1</span>).join(str)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span>).join(<span class="string">"js"</span>));</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(repeatString(<span class="string">"a."</span>,<span class="number">4</span>));</div><div class="line"><span class="built_in">console</span>.log(repeatString(<span class="string">"hello_"</span>,<span class="number">6</span>));</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1,2,3</div><div class="line">1_2_3</div><div class="line">js</div><div class="line">a.a.a.a.</div><div class="line">hello_hello_hello_hello_hello_hello_</div><div class="line">[Finished in 0.2s]</div></pre></td></tr></table></figure></p>
<h3 id="Array-prototype-reverse_逆序">Array.prototype.reverse 逆序</h3><p>示例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">arr.reverse();</div><div class="line"><span class="built_in">console</span>.log(arr);</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[ 5, 4, 3, 2, 1 ]</div><div class="line">[Finished in 0.2s]</div></pre></td></tr></table></figure></p>
<h3 id="Array-prototype-sort_排序">Array.prototype.sort 排序</h3><p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'c'</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'e'</span>];</div><div class="line"><span class="keyword">var</span> sortArr = arr.sort();</div><div class="line"><span class="built_in">console</span>.log(arr);</div><div class="line"><span class="built_in">console</span>.log(sortArr);</div><div class="line"></div><div class="line"><span class="comment">//默认转字符串排序</span></div><div class="line">arr = [<span class="number">12</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">43</span>,<span class="number">5</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.sort());</div><div class="line"></div><div class="line"><span class="comment">//可以通过下面的方式实现数字排序</span></div><div class="line"><span class="keyword">var</span> numberSortArr = arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> a - b;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(numberSortArr);</div><div class="line"></div><div class="line"><span class="comment">//对象属性排序</span></div><div class="line"><span class="keyword">var</span> arr = [&#123;<span class="attr">age</span>:<span class="number">25</span>&#125;,&#123;<span class="attr">age</span>:<span class="number">20</span>&#125;,&#123;<span class="attr">age</span>:<span class="number">30</span>&#125;];</div><div class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> a.age - b.age;</div><div class="line">&#125;);</div><div class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'age'</span>,item.age);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[ &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;e&apos; ]</div><div class="line">[ &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;e&apos; ]</div><div class="line">[ 12, 14, 3, 43, 5 ]</div><div class="line">[ 3, 5, 12, 14, 43 ]</div><div class="line">age 20</div><div class="line">age 25</div><div class="line">age 30</div><div class="line">[Finished in 0.2s]</div></pre></td></tr></table></figure></p>
<h3 id="Array-prototype-concat_合并数组">Array.prototype.concat 合并数组</h3><p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.concat(<span class="number">4</span>,<span class="number">5</span>));</div><div class="line"><span class="built_in">console</span>.log(arr);</div><div class="line"></div><div class="line"><span class="comment">//合并时只拆一级</span></div><div class="line"><span class="built_in">console</span>.log(arr.concat([<span class="number">12</span>,<span class="number">33</span>],<span class="number">14</span>));</div><div class="line"><span class="built_in">console</span>.log(arr.concat([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>]]));</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[ 1, 2, 3, 4, 5 ]</div><div class="line">[ 1, 2, 3 ]</div><div class="line">[ 1, 2, 3, 12, 33, 14 ]</div><div class="line">[ 1, 2, 3, 1, 2, 3, [ 4, 5 ] ]</div><div class="line">[Finished in 0.2s]</div></pre></td></tr></table></figure></p>
<h3 id="Array-prototype-slice_截取数组">Array.prototype.slice 截取数组</h3><p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//右不包含</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">1</span>,<span class="number">4</span>));</div><div class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">-1</span>));</div><div class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">-4</span>,<span class="number">4</span>));</div><div class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">-4</span>,<span class="number">-1</span>));</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[ 2, 3, 4 ]</div><div class="line">[ 6 ]</div><div class="line">[ 3, 4 ]</div><div class="line">[ 3, 4, 5 ]</div><div class="line">[Finished in 0.3s]</div></pre></td></tr></table></figure></p>
<h3 id="Array-prototype-splice_数组拼接">Array.prototype.splice 数组拼接</h3><p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//删除元素</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">2</span>));</div><div class="line"><span class="built_in">console</span>.log(arr);</div><div class="line"></div><div class="line">arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">2</span>,<span class="number">2</span>));</div><div class="line"><span class="built_in">console</span>.log(arr);</div><div class="line"></div><div class="line"><span class="comment">//拼接</span></div><div class="line">arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">1</span>,<span class="number">1</span>,<span class="string">'a'</span>,<span class="string">'b'</span>));</div><div class="line"><span class="built_in">console</span>.log(arr);</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[ 3, 4, 5 ]</div><div class="line">[ 1, 2 ]</div><div class="line">[ 3, 4 ]</div><div class="line">[ 1, 2, 5 ]</div><div class="line">[ 2 ]</div><div class="line">[ 1, &apos;a&apos;, &apos;b&apos;, 3, 4, 5 ]</div><div class="line">[Finished in 0.2s]</div></pre></td></tr></table></figure></p>
<h3 id="Array-prototype-forEach_遍历">Array.prototype.forEach 遍历</h3><p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//x:值  index:索引 a:数组本身</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">x,index,a</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(x + <span class="string">'|'</span> + index + <span class="string">'|'</span> + (a === arr));</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1|0|true</div><div class="line">2|1|true</div><div class="line">3|2|true</div><div class="line">4|3|true</div><div class="line">5|4|true</div></pre></td></tr></table></figure></p>
<h3 id="Array-prototype-map_映射">Array.prototype.map 映射</h3><p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//原数组不变</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> mapArr = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> x + <span class="number">10</span>;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(mapArr);</div><div class="line"><span class="built_in">console</span>.log(arr);</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[ 11, 12, 13, 14, 15 ]</div><div class="line">[ 1, 2, 3, 4, 5 ]</div></pre></td></tr></table></figure></p>
<h3 id="Array-prototype-filter_过滤">Array.prototype.filter 过滤</h3><p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</div><div class="line"><span class="keyword">var</span> filterArr = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x,index</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> index % <span class="number">2</span> === <span class="number">0</span> || x &gt; <span class="number">4</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(filterArr);</div><div class="line"><span class="built_in">console</span>.log(arr);</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[ 1, 3, 5, 6, 7 ]</div><div class="line">[ 1, 2, 3, 4, 5, 6, 7 ]</div></pre></td></tr></table></figure></p>
<h3 id="Array-prototype-every&amp;some_数组判断">Array.prototype.every&amp;some 数组判断</h3><p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="comment">//判断是否所有元素都小于10</span></div><div class="line"><span class="built_in">console</span>.log(arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> x &lt; <span class="number">10</span>;</div><div class="line">&#125;));</div><div class="line"></div><div class="line"><span class="comment">//判断是否所有元素都大于5</span></div><div class="line"><span class="built_in">console</span>.log(arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> x &gt; <span class="number">5</span>;</div><div class="line">&#125;));</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//是否有元素等于3</span></div><div class="line"><span class="built_in">console</span>.log(arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> x === <span class="number">3</span>;</div><div class="line">&#125;));</div><div class="line"></div><div class="line"><span class="comment">//是否有元素等于10</span></div><div class="line"><span class="built_in">console</span>.log(arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> x === <span class="number">10</span>;</div><div class="line">&#125;));</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">true</div><div class="line">false</div><div class="line">true</div><div class="line">false</div></pre></td></tr></table></figure></p>
<h3 id="Array-prototype-reduce&amp;reduceRight_元素之间运算">Array.prototype.reduce&amp;reduceRight 元素之间运算</h3><p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="comment">//0+1 1+2 3+3</span></div><div class="line"><span class="keyword">var</span> sum = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> x + y;</div><div class="line">&#125;,<span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(sum);</div><div class="line"><span class="built_in">console</span>.log(arr);</div><div class="line"></div><div class="line"></div><div class="line">arr = [<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>];</div><div class="line"><span class="keyword">var</span> max = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(x + <span class="string">"|"</span> + y);</div><div class="line">    <span class="keyword">return</span> x &gt; y ? x : y;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(max);</div><div class="line"></div><div class="line"><span class="comment">//从右到左运算</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>];</div><div class="line"><span class="keyword">var</span> max = arr.reduceRight(<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(x + <span class="string">"|"</span> + y);</div><div class="line">    <span class="keyword">return</span> x &gt; y ? x : y;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(max);</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">6</div><div class="line">[ 1, 2, 3 ]</div><div class="line">3|6</div><div class="line">6|9</div><div class="line">9</div><div class="line">9|6</div><div class="line">9|3</div><div class="line">9</div><div class="line">[Finished in 0.2s]</div></pre></td></tr></table></figure></p>
<h3 id="Array-isArray_判断是否是数组">Array.isArray 判断是否是数组</h3><p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray([]));</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log([] <span class="keyword">instanceof</span> <span class="built_in">Array</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log((&#123;&#125;).toString.apply([]) === <span class="string">'[object Array]'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log([].constructor === <span class="built_in">Array</span>);</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">true</div><div class="line">true</div><div class="line">true</div><div class="line">true</div><div class="line">[Finished in 0.3s]</div></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="javaScript数组方法总结">javaScript数组方法总结</h2><h3 id="Array-prototype-indexOf&amp;lastIndexOf_检索">Array.prototype.indexOf&amp;lastIndexOf 检]]>
    </summary>
    
      <category term="js" scheme="https://wustrive2008.github.io/tags/js/"/>
    
      <category term="array" scheme="https://wustrive2008.github.io/tags/array/"/>
    
      <category term="前端" scheme="https://wustrive2008.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="https://wustrive2008.github.io/categories/js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git全解析之远程仓库交互]]></title>
    <link href="https://wustrive2008.github.io/2016/01/11/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Git%E5%85%A8%E8%A7%A3%E6%9E%90%E4%B9%8B%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E4%BA%A4%E4%BA%92/"/>
    <id>https://wustrive2008.github.io/2016/01/11/版本控制/Git全解析之远程仓库交互/</id>
    <published>2016-01-11T14:02:51.000Z</published>
    <updated>2016-11-05T18:14:33.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Git全解析之远程仓库交互">Git全解析之远程仓库交互</h2><h3 id="中央仓库的概念">中央仓库的概念</h3><p>虽然说git是分布式版本控制工具，但同样有远程仓库的概念。出于各种目的，我们有时需要有一个共享的远程仓库，如GitHub上的仓库，我们公司项目中用来测试和部署的仓库等。<br>一般的操作步骤是先在公共服务器上创建一个仓库，然后每个开发人员都clone这个仓库进行各自的开发，开发完成后再push到远程仓库进行测试部署。</p>
<p>从远程仓库clone项目：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[centos@bogon gitwork]$ </div><div class="line">[centos@bogon gitwork]$ git <span class="built_in">clone</span> git@github.com:wustrive2008/gittest.git</div><div class="line">Initialized empty Git repository <span class="keyword">in</span> /home/centos/gitwork/gittest/.git/</div><div class="line">remote: Counting objects: 4, done.</div><div class="line">remote: Compressing objects: 100% (3/3), done.</div><div class="line">remote: Total 4 (delta 0), reused 0 (delta 0), pack-reused 0</div><div class="line">Receiving objects: 100% (4/4), 4.15 KiB, done.</div></pre></td></tr></table></figure></p>
<p>上面示例的远程仓库在github上，当然如果我们做的是公司的项目，出于安全性和访问效率的考虑很少会将公司的私有项目放到github上。一般的做法是搭建自己的git服务器，这里推荐两种git服务器工具：</p>
<ol>
<li><a href="http://git-scm.com/book/zh/v1/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-Gitolite" target="_blank" rel="external">Gitolite</a></li>
<li><a href="https://about.gitlab.com/" target="_blank" rel="external">GitLab</a></li>
</ol>
<p>这两个工具网上都有很多教程。</p>
<p>说明：github也有付费的企业版，试用过，也很好用</p>
<h3 id="本地分支与远程分支">本地分支与远程分支</h3><p>平时我们使用 git branch 查看的都是本地分支,如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[centos@bogon gittest]$ git branch</div><div class="line">* master</div></pre></td></tr></table></figure></p>
<p>但是当需要经常与中央仓库同步代码时，特别是分支很多时，需要查看本地当前有哪些远程分支的引用，比便于在不同的分支之间进行切换开发。关于git分支的较好实践可以参考：<a href="https://github.com/nvie/gitflow" target="_blank" rel="external">git flow</a><br>查看远程分支的引用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[centos@bogon gittest]$ </div><div class="line">[centos@bogon gittest]$ git branch <span class="_">-a</span></div><div class="line">* master</div><div class="line">  remotes/origin/HEAD -&gt; origin/master</div><div class="line">  remotes/origin/master</div></pre></td></tr></table></figure></p>
<p>上面的结果表示：<br>当前本地有一个master分支，并且有一个remotes/origin/master(远程master)分支的引用，至于remotes/origin/HEAD分支可以理解为origin/master分支的一个引用。<br>其中origin为远程仓库引用的别名，此名称可以修改，也可以有多个，可以参考git remote命令了解更多</p>
<p>接下来在本地创建一个develop分支，用于正常的开发流程：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[centos@bogon gittest]$ git checkout -b develop</div><div class="line">Switched to a new branch <span class="string">'develop'</span></div><div class="line">[centos@bogon gittest]$ git br</div><div class="line">* develop</div><div class="line">  master</div><div class="line">[centos@bogon gittest]$ git br <span class="_">-a</span></div><div class="line">* develop</div><div class="line">  master</div><div class="line">  remotes/origin/HEAD -&gt; origin/master</div><div class="line">  remotes/origin/master</div></pre></td></tr></table></figure></p>
<p>在develop分支上进行开发，并提交：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[centos@bogon gittest]$ touch file1.txt</div><div class="line">[centos@bogon gittest]$ git add .</div><div class="line">[centos@bogon gittest]$ git commit -am <span class="string">"create file file1.txt"</span></div><div class="line">[develop 21053d7] create file file1.txt</div><div class="line"> 0 files changed, 0 insertions(+), 0 deletions(-)</div><div class="line"> create mode 100644 file1.txt</div></pre></td></tr></table></figure></p>
<p>开发完成后将develop分支推送到服务器：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[centos@bogon gittest]$ git push origin </div><div class="line">Counting objects: 4, done.</div><div class="line">Compressing objects: 100% (2/2), done.</div><div class="line">Writing objects: 100% (3/3), 311 bytes, done.</div><div class="line">Total 3 (delta 0), reused 0 (delta 0)</div><div class="line">To git@github.com:wustrive2008/gittest.git</div><div class="line">   8a9a114..21053d7  develop -&gt; develop</div></pre></td></tr></table></figure></p>
<p>接下来正常的流程是测试人员拉取到远程的develop分支，然后对develop分支上提交的内容进行测试，测试通过后，合并到master分支，最后推送到部署服务器进行上线部署。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[centos@bogon gittest]$ git checkout master</div><div class="line">Switched to branch <span class="string">'master'</span></div><div class="line">[centos@bogon gittest]$ git merge develop</div><div class="line">Updating 8a9a114..21053d7</div><div class="line">Fast-forward</div><div class="line"> 0 files changed, 0 insertions(+), 0 deletions(-)</div><div class="line"> create mode 100644 file1.txt</div><div class="line">[centos@bogon gittest]$ git push origin master</div><div class="line">Total 0 (delta 0), reused 0 (delta 0)</div><div class="line">To git@github.com:wustrive2008/gittest.git</div><div class="line">   8a9a114..21053d7  master -&gt; master</div></pre></td></tr></table></figure>
<h3 id="pull与fetch">pull与fetch</h3><p>如果要拉取远程仓库的代码，需要用到pull与fetch命令<br>这两个命令的区别是pull=fetch+merge</p>
<p>先来演示一下git pull，有其他开发者已经在develop分支上提交了新的内容，现在需要同步到本地<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">[centos@bogon gittest]$ git br</div><div class="line">* develop</div><div class="line">  master</div><div class="line">[centos@bogon gittest]$ git <span class="built_in">log</span></div><div class="line">commit 21053d768d7af0c5cf90f63dc105891726094b43</div><div class="line">Author: wubaoguo &lt;wustrive_2008@126.com&gt;</div><div class="line">Date:   Mon Jan 11 22:35:50 2016 +0800</div><div class="line"></div><div class="line">    create file file1.txt</div><div class="line"></div><div class="line">commit 8a9a114ecbacfd5555ee417ab1dbe02a20db9a03</div><div class="line">Author: wubaoguo &lt;wustrive2008@users.noreply.github.com&gt;</div><div class="line">Date:   Mon Jan 11 22:08:39 2016 +0800</div><div class="line"></div><div class="line">    Initial commit</div><div class="line">[centos@bogon gittest]$ git pull origin develop</div><div class="line">remote: Counting objects: 2, done.</div><div class="line">remote: Compressing objects: 100% (2/2), done.</div><div class="line">remote: Total 2 (delta 1), reused 1 (delta 0), pack-reused 0</div><div class="line">Unpacking objects: 100% (2/2), done.</div><div class="line">From github.com:wustrive2008/gittest</div><div class="line"> * branch            develop    -&gt; FETCH_HEAD</div><div class="line">Updating 21053d7..2296978</div><div class="line">Fast-forward</div><div class="line"> 0 files changed, 0 insertions(+), 0 deletions(-)</div><div class="line"> create mode 100644 file2.txt</div><div class="line">[centos@bogon gittest]$ git <span class="built_in">log</span></div><div class="line">commit 22969782f467<span class="built_in">cd</span>04410c9ed3cf5c80e3987d212b</div><div class="line">Author: wubaoguo &lt;wustrive_2008@126.com&gt;</div><div class="line">Date:   Mon Jan 11 22:52:18 2016 +0800</div><div class="line"></div><div class="line">    create file file2.txt</div><div class="line"></div><div class="line">commit 21053d768d7af0c5cf90f63dc105891726094b43</div><div class="line">Author: wubaoguo &lt;wustrive_2008@126.com&gt;</div><div class="line">Date:   Mon Jan 11 22:35:50 2016 +0800</div><div class="line"></div><div class="line">    create file file1.txt</div><div class="line"></div><div class="line">commit 8a9a114ecbacfd5555ee417ab1dbe02a20db9a03</div><div class="line">Author: wubaoguo &lt;wustrive2008@users.noreply.github.com&gt;</div><div class="line">Date:   Mon Jan 11 22:08:39 2016 +0800</div><div class="line"></div><div class="line">    Initial commit</div></pre></td></tr></table></figure></p>
<p>很清楚的看到，新的代码已经拉取并合并到本地了，可以基于最新的代码进行开发了。</p>
<p>如果开发者B说他向远程仓库推送了新的分支fixbug，需要你在此基础上继续修改bug，可以这样做<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">[centos@bogon gittest]$ git br <span class="_">-a</span>     <span class="comment">#可以看到这时本地并没有新的分支与引用</span></div><div class="line">* develop</div><div class="line">  master</div><div class="line">  remotes/origin/HEAD -&gt; origin/master</div><div class="line">  remotes/origin/develop</div><div class="line">  remotes/origin/master</div><div class="line">[centos@bogon gittest]$ git fetch    <span class="comment">#拉取远程所有的变动</span></div><div class="line">remote: Counting objects: 3, done.</div><div class="line">remote: Compressing objects: 100% (1/1), done.</div><div class="line">remote: Total 3 (delta 1), reused 3 (delta 1), pack-reused 0</div><div class="line">Unpacking objects: 100% (3/3), done.</div><div class="line">From github.com:wustrive2008/gittest</div><div class="line">   21053d7..2296978  develop    -&gt; origin/develop</div><div class="line"> * [new branch]      fixbug     -&gt; origin/fixbug   <span class="comment">#注意这里拉取到一个新分支</span></div><div class="line">[centos@bogon gittest]$ git br  <span class="comment">#这时本地并没有fixbug分支</span></div><div class="line">* develop</div><div class="line">  master</div><div class="line">[centos@bogon gittest]$ git checkout fixbug  <span class="comment">#创建并切换到fixbug分支,引用origin/fixbug分支</span></div><div class="line">Branch fixbug <span class="built_in">set</span> up to track remote branch fixbug from origin.</div><div class="line">Switched to a new branch <span class="string">'fixbug'</span></div></pre></td></tr></table></figure></p>
<p>与远程仓库的交互操作基本就这些，还有一点要注意，推送之前最好先拉取一下，因为如果远程分支版本比本地新，直接推送会失败。</p>
<h3 id="关于捐赠">关于捐赠</h3><p>如何觉得本文章对你有帮助，欢迎通过支付宝捐赠来支持博主</p>
<p><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexo%E6%94%AF%E4%BB%98%E5%AE%9D%E4%BB%98%E6%AC%BE%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%9C%80%E5%B0%8F.png" alt="捐赠"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Git全解析之远程仓库交互">Git全解析之远程仓库交互</h2><h3 id="中央仓库的概念">中央仓库的概念</h3><p>虽然说git是分布式版本控制工具，但同样有远程仓库的概念。出于各种目的，我们有时需要有一个共享的远程仓库，如GitHub上的仓库，我们]]>
    </summary>
    
      <category term="git" scheme="https://wustrive2008.github.io/tags/git/"/>
    
      <category term="版本控制" scheme="https://wustrive2008.github.io/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
      <category term="项目管理" scheme="https://wustrive2008.github.io/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
      <category term="版本控制" scheme="https://wustrive2008.github.io/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[python闭包与装饰器]]></title>
    <link href="https://wustrive2008.github.io/2016/01/08/python/python%E9%97%AD%E5%8C%85%E4%B8%8E%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>https://wustrive2008.github.io/2016/01/08/python/python闭包与装饰器/</id>
    <published>2016-01-08T14:48:25.000Z</published>
    <updated>2016-11-05T18:14:33.000Z</updated>
    <content type="html"><![CDATA[<h2 id="python闭包与装饰器">python闭包与装饰器</h2><h3 id="闭包">闭包</h3><p>如果在一个内部函数里，对在外部作用域（但不是在全局作用域）的变量进行引用，那么内部函数就被认为是闭包（closure）。它只不过是个“内层”的函数，由一个名字（变量）来指代，而这个名字（变量）对于“外层”包含它的函数而言，是本地变量。<br>实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_passline</span><span class="params">(passline)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cmp</span><span class="params">(val)</span>:</span></div><div class="line">        <span class="keyword">if</span> val &gt;= passline:</div><div class="line">            <span class="keyword">print</span> (<span class="string">'pass'</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> (<span class="string">'failed'</span>)</div><div class="line">    <span class="keyword">return</span> cmp</div><div class="line"></div><div class="line">f_100 = set_passline(<span class="number">60</span>)</div><div class="line">f_100(<span class="number">89</span>)</div><div class="line"></div><div class="line">f_150 = set_passline(<span class="number">90</span>)</div><div class="line">f_150(<span class="number">89</span>)</div></pre></td></tr></table></figure></p>
<h3 id="装饰器">装饰器</h3><p>简单地来说装饰器就是在不改变原有函数的前提下，为函数加入新的功能。</p>
<p>实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">in_dec</span><span class="params">(*arg)</span>:</span></div><div class="line">        <span class="keyword">if</span> len(arg) == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> val <span class="keyword">in</span> arg:</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> isinstance(val , int):</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> func(*arg)</div><div class="line">    <span class="keyword">return</span> in_dec</div><div class="line"></div><div class="line"><span class="meta">@dec</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sum</span><span class="params">(*arg)</span>:</span></div><div class="line">    <span class="keyword">return</span> sum(arg)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_average</span><span class="params">(*arg)</span>:</span></div><div class="line">    <span class="keyword">return</span> sum(arg)/len(arg)</div><div class="line"><span class="comment">#my_sum = dec(my_sum)</span></div><div class="line">my_average = dec(my_average)</div><div class="line"></div><div class="line"><span class="keyword">print</span> (my_sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>))</div><div class="line"></div><div class="line"><span class="keyword">print</span> (my_sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">'6'</span>))</div></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="python闭包与装饰器">python闭包与装饰器</h2><h3 id="闭包">闭包</h3><p>如果在一个内部函数里，对在外部作用域（但不是在全局作用域）的变量进行引用，那么内部函数就被认为是闭包（closure）。它只不过是个“内层”的函数，由一个名字]]>
    </summary>
    
      <category term="python" scheme="https://wustrive2008.github.io/tags/python/"/>
    
      <category term="脚本语言" scheme="https://wustrive2008.github.io/tags/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80/"/>
    
      <category term="闭包" scheme="https://wustrive2008.github.io/tags/%E9%97%AD%E5%8C%85/"/>
    
      <category term="python" scheme="https://wustrive2008.github.io/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git全解析之用起来先]]></title>
    <link href="https://wustrive2008.github.io/2016/01/06/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Git%E5%85%A8%E8%A7%A3%E6%9E%90%E4%B9%8B%E5%85%88%E7%94%A8%E8%B5%B7%E6%9D%A5/"/>
    <id>https://wustrive2008.github.io/2016/01/06/版本控制/Git全解析之先用起来/</id>
    <published>2016-01-06T14:23:16.000Z</published>
    <updated>2016-11-05T18:14:33.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Git全解析之用起来先">Git全解析之用起来先</h2><h3 id="先安装Git环境">先安装Git环境</h3><p>下载安装：<a href="http://git-scm.com/download/" target="_blank" rel="external">http://git-scm.com/download/</a></p>
<h3 id="配置">配置</h3><p>配置user与email,用来标识用户<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"wustrive"</span></div><div class="line">$ git config --global user.email <span class="string">"wustrive2008@gmail.com"</span></div></pre></td></tr></table></figure></p>
<p>也可以直接编辑配置文件，配置文件默认路径在用户目录下的.gitconfig文件中，结构是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[user]</div><div class="line">    name = wustrive</div><div class="line">    email = wustrive2008@gmail.com</div></pre></td></tr></table></figure></p>
<h3 id="简单了解Git">简单了解Git</h3><p>Git是一个快速的分布式版本控制系统</p>
<h4 id="Git对象模型_SHA">Git对象模型 SHA</h4><p>所有用来表示项目历史信息的文件是通过一个40个字符“对象名”来索引的。每一个“对象名”都是对“对象”内容做SHAI哈希计算来的。这个对象名是全局唯一的，不同的对象生成的“对象名”不同。</p>
<p>Git中四种类型的对象：”blob”,”tree”,”commit”和”tag”。每个对象包括三个部分：类型，大小和内容。</p>
<ul>
<li>blob用来存储文件数据</li>
<li>tree有点像一个目录，用来管理一些blob与tree</li>
<li>commit，一个commit只指向一个tree，用来标记项目某一个特定时间点的状态，即一次提交</li>
<li>tag，一个tag用来标记一个commit</li>
</ul>
<h4 id="Git目录与工作目录">Git目录与工作目录</h4><p>git目录是为你的项目存储所有历史和元信息的目录，包括所有对象，这些对象指向不同的分支，每个项目只能有一个Git目录,这个叫’.git’的目录一般在项目的根目录下，<br>这个目录下的重要文件有：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">|-- FETCH_HEAD <span class="comment">#指向着目前已经从远程仓库取下来的分支的末端版本。</span></div><div class="line">|-- HEAD <span class="comment">#这个git项目当前处在哪个分支里</span></div><div class="line">|-- ORIG_HEAD <span class="comment">#HEAD指针的前一个状态</span></div><div class="line">|-- branches/ <span class="comment">#项目的所有分支</span></div><div class="line">|-- config/ <span class="comment">#项目的配置信息，git config命令会改动它</span></div><div class="line">|-- description <span class="comment">#项目的描述信息</span></div><div class="line">|-- hooks/ <span class="comment">#系统默认钩子脚本目录</span></div><div class="line">|-- index <span class="comment">#索引文件</span></div><div class="line">|-- info/ <span class="comment">#包含仓库的一些信息</span></div><div class="line">|-- logs/ <span class="comment">#各个refs的历史信息</span></div><div class="line">|-- objects/ <span class="comment">#Git本地仓库的所有对象 (commits, trees, blobs, tags)</span></div><div class="line">|-- packed-refs <span class="comment">#运行 git gc, refs 下的所有文件都会消失。Git 会将这些文件挪到 .git/packed-refs 文件中去以提高效率</span></div><div class="line">|-- refs/ <span class="comment">#标识你项目里的每个分支指向了哪个提交(commit)</span></div></pre></td></tr></table></figure></p>
<p>工作目录就是你的项目源代码目录，即是你签出(checkout)用来编辑的文件，当在不同的分支间切换时，工作目录里的内容会随之替换或删除，所有的操作历史都保存在Git目录中，工作目录是用来临时保存checkout文件的地方。</p>
<h3 id="可以开始使用了">可以开始使用了</h3><h4 id="获取仓库">获取仓库</h4><ul>
<li><p>创建仓库，在工作目录下执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init .</div></pre></td></tr></table></figure>
</li>
<li><p>clone一个仓库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#通过http(s)协议</span></div><div class="line">git <span class="built_in">clone</span> https://github.com/git/git.git</div><div class="line"><span class="comment">#通过ssh协议</span></div><div class="line">git <span class="built_in">clone</span> git@github.com:git/git.git</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>提示：创建和clone后默认的分支是master，默认的repository引用名称origin</strong></p>
<h4 id="正常的工作流程">正常的工作流程</h4><ol>
<li><p>修改文件，将它们更新的内容添加到索引中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git add file1 file2 file3</div><div class="line"><span class="comment">#也可以通过git add . 来添加所有变动到暂存区</span></div><div class="line">git add .</div></pre></td></tr></table></figure>
</li>
<li><p>查看当状态</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line"><span class="comment"># On branch master</span></div><div class="line"><span class="comment"># Changes to be committed:</span></div><div class="line"><span class="comment"># (use "git reset HEAD &lt;file&gt;..." to unstage)</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># modified: file1</span></div><div class="line"><span class="comment"># modified: file2</span></div><div class="line"><span class="comment"># modified: file3</span></div><div class="line"><span class="comment">#</span></div></pre></td></tr></table></figure>
</li>
<li><p>提交commit</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#执行后会进入编辑器进行注释编辑</span></div><div class="line">$ git commit</div><div class="line"></div><div class="line"><span class="comment">#如果注释很短也可以使用</span></div><div class="line">$ git commit -m <span class="string">"注释内容"</span></div><div class="line"></div><div class="line"><span class="comment">#如果只是修改了文件，没有添加新的文件，可以省略git add</span></div><div class="line">$ git commit -am <span class="string">"注释内容"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="分支与合并">分支与合并</h4><h5 id="基本操作命令">基本操作命令</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#查看本地分支 *代表当前所在分支</span></div><div class="line">[centos@bogon gittest]$ git branch</div><div class="line">* master</div><div class="line"></div><div class="line"><span class="comment">#新建分支</span></div><div class="line">[centos@bogon gittest]$ git branch br1</div><div class="line">[centos@bogon gittest]$ git branch</div><div class="line">  br1</div><div class="line">* master</div><div class="line"></div><div class="line"><span class="comment">#切换分支</span></div><div class="line">[centos@bogon gittest]$ git checkout br1</div><div class="line">Switched to branch <span class="string">'br1'</span></div><div class="line">[centos@bogon gittest]$ git branch</div><div class="line">* br1</div><div class="line">  master</div><div class="line"></div><div class="line"><span class="comment">#切换并合并分支，以当前分支为基础新建分支</span></div><div class="line">[centos@bogon gittest]$ ll</div><div class="line">total 0</div><div class="line">-rw-rw-r--. 1 centos centos 0 Jan  6 23:32 file1</div><div class="line">-rw-rw-r--. 1 centos centos 0 Jan  6 23:32 file2</div><div class="line">-rw-rw-r--. 1 centos centos 0 Jan  6 23:32 file3</div><div class="line">[centos@bogon gittest]$ git branch</div><div class="line">* br1</div><div class="line">  master</div><div class="line">[centos@bogon gittest]$ git checkout -b br2</div><div class="line">Switched to a new branch <span class="string">'br2'</span></div><div class="line">[centos@bogon gittest]$ ll</div><div class="line">total 0</div><div class="line">-rw-rw-r--. 1 centos centos 0 Jan  6 23:32 file1</div><div class="line">-rw-rw-r--. 1 centos centos 0 Jan  6 23:32 file2</div><div class="line">-rw-rw-r--. 1 centos centos 0 Jan  6 23:32 file3</div><div class="line">[centos@bogon gittest]$ git branch</div><div class="line">  br1</div><div class="line">* br2</div><div class="line">  master</div><div class="line"></div><div class="line"><span class="comment">#合并分支，将其他分支合并到当前分支</span></div><div class="line">[centos@bogon gittest]$ ll</div><div class="line">total 0</div><div class="line">-rw-rw-r--. 1 centos centos 0 Jan  6 23:32 file1</div><div class="line">-rw-rw-r--. 1 centos centos 0 Jan  6 23:32 file2</div><div class="line">-rw-rw-r--. 1 centos centos 0 Jan  6 23:32 file3</div><div class="line">[centos@bogon gittest]$ git merge br2</div><div class="line">Updating da5068b..f9da174</div><div class="line">Fast-forward</div><div class="line"> br2-file |    1 +</div><div class="line"> 1 files changed, 1 insertions(+), 0 deletions(-)</div><div class="line"> create mode 100644 br2-file</div><div class="line">[centos@bogon gittest]$ ll</div><div class="line">total 4</div><div class="line">-rw-rw-r--. 1 centos centos 10 Jan  6 23:44 br2-file</div><div class="line">-rw-rw-r--. 1 centos centos  0 Jan  6 23:32 file1</div><div class="line">-rw-rw-r--. 1 centos centos  0 Jan  6 23:32 file2</div><div class="line">-rw-rw-r--. 1 centos centos  0 Jan  6 23:32 file3   </div><div class="line"></div><div class="line"><span class="comment">#删除分支，删除已经被合并过的分支，安全删除分支</span></div><div class="line">[centos@bogon gittest]$ git branch</div><div class="line">  br1</div><div class="line">  br2</div><div class="line">* master</div><div class="line">[centos@bogon gittest]$ git branch <span class="_">-d</span> br2</div><div class="line">Deleted branch br2 (was f9da174).</div><div class="line">[centos@bogon gittest]$ git branch</div><div class="line">  br1</div><div class="line">* master</div><div class="line"></div><div class="line"><span class="comment">#强制删除分支</span></div><div class="line">[centos@bogon gittest]$ git branch</div><div class="line">  br1</div><div class="line">* master</div><div class="line">[centos@bogon gittest]$ git branch -D br1</div><div class="line">Deleted branch br1 (was da5068b).</div><div class="line">[centos@bogon gittest]$ git branch</div><div class="line">* master</div></pre></td></tr></table></figure>
<h5 id="分支冲突">分支冲突</h5><p>如果执行自动合并没有成功的话，git会在索引和工作树里设置一个特殊的状态， 提示你如何解决合并中出现的冲突。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[centos@bogon gittest]$ git merge br1</div><div class="line">Auto-merging file1</div><div class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> file1</div><div class="line">Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</div><div class="line">[centos@bogon gittest]$ git status</div><div class="line"><span class="comment"># On branch master</span></div><div class="line"><span class="comment"># Unmerged paths:</span></div><div class="line"><span class="comment">#   (use "git add/rm &lt;file&gt;..." as appropriate to mark resolution)</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#   both modified:      file1</span></div><div class="line"><span class="comment">#</span></div><div class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</div></pre></td></tr></table></figure></p>
<p>有冲突(conflicts)的文件会保存在索引中，在commit之前要解决冲突，解决冲突的方式就是编辑冲突文件，重新commit。</p>
<h5 id="撤销合并">撤销合并</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#如果合并分支后又后悔了，可以撤销合并</span></div><div class="line">[centos@bogon gittest]$ git reset --hard HEAD</div><div class="line">HEAD is now at 2fa716d file1 master</div><div class="line">[centos@bogon gittest]$ git status</div><div class="line"><span class="comment"># On branch master</span></div><div class="line">nothing to commit (working directory clean)</div><div class="line"></div><div class="line"><span class="comment">#如果已经把合并后的代码提交了，可以执行</span></div><div class="line">[centos@bogon gittest]$ git reset --hard ORIG_HEAD</div><div class="line">HEAD is now at 2fa716d file1 master</div></pre></td></tr></table></figure>
<h4 id="log记录">log记录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> v2.5.. <span class="comment"># commits since (not reachable from) v2.5</span></div><div class="line">$ git <span class="built_in">log</span> test..master <span class="comment"># commits reachable from master but not test</span></div><div class="line">$ git <span class="built_in">log</span> master..test <span class="comment"># commits reachable from test but not master</span></div><div class="line">$ git <span class="built_in">log</span> master...test <span class="comment"># commits reachable from either test or</span></div><div class="line"><span class="comment"># master, but not both</span></div><div class="line">$ git <span class="built_in">log</span> --since=<span class="string">"2 weeks ago"</span> <span class="comment"># commits from the last 2 weeks</span></div><div class="line">$ git <span class="built_in">log</span> Makefile <span class="comment"># commits that modify Makefile</span></div><div class="line">$ git <span class="built_in">log</span> fs/ <span class="comment"># commits that modify any file under fs/</span></div><div class="line">$ git <span class="built_in">log</span> -S<span class="string">'foo()\'</span> <span class="comment"># commits that add or remove any file data</span></div><div class="line"><span class="comment"># matching the string 'foo()'</span></div><div class="line">$ git <span class="built_in">log</span> --no-merges <span class="comment"># dont show merge commits</span></div></pre></td></tr></table></figure>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">#查看当前分支log</div><div class="line">[centos@bogon gittest]$ git log</div><div class="line">commit 2fa716df1d841ac2347cd9b6d371cfdf71682dfe</div><div class="line">Author: wubaoguo &lt;wustrive_2008@126.com&gt;</div><div class="line">Date:   Wed Jan 6 23:53:20 2016 +0800</div><div class="line"></div><div class="line">    file1 master</div><div class="line"></div><div class="line">commit f9da1748bddb6cfcc0f492f60328abcd54f97663</div><div class="line">Author: wubaoguo &lt;wustrive_2008@126.com&gt;</div><div class="line">Date:   Wed Jan 6 23:44:08 2016 +0800</div><div class="line"></div><div class="line">    br2</div><div class="line"></div><div class="line">commit da5068b35246dc26b77105a6dc6c2aa6e430fcad</div><div class="line">Author: wubaoguo &lt;wustrive_2008@126.com&gt;</div><div class="line">Date:   Wed Jan 6 23:38:39 2016 +0800</div><div class="line"></div><div class="line">    init</div><div class="line"></div><div class="line">#查看详细变动</div><div class="line">[centos@bogon gittest]$ git log --stat</div><div class="line">commit 2fa716df1d841ac2347cd9b6d371cfdf71682dfe</div><div class="line">Author: wubaoguo &lt;wustrive_2008@126.com&gt;</div><div class="line">Date:   Wed Jan 6 23:53:20 2016 +0800</div><div class="line"></div><div class="line">    file1 master</div><div class="line"></div><div class="line"> file1 |    1 +</div><div class="line"> 1 files changed, 1 insertions(+), 0 deletions(-)</div><div class="line"></div><div class="line">commit f9da1748bddb6cfcc0f492f60328abcd54f97663</div><div class="line">Author: wubaoguo &lt;wustrive_2008@126.com&gt;</div><div class="line">Date:   Wed Jan 6 23:44:08 2016 +0800</div><div class="line"></div><div class="line">    br2</div><div class="line"></div><div class="line"> br2-file |    1 +</div><div class="line"> 1 files changed, 1 insertions(+), 0 deletions(-)</div><div class="line"></div><div class="line">commit da5068b35246dc26b77105a6dc6c2aa6e430fcad</div><div class="line">Author: wubaoguo &lt;wustrive_2008@126.com&gt;</div><div class="line">Date:   Wed Jan 6 23:38:39 2016 +0800</div><div class="line"></div><div class="line">    init</div><div class="line"></div><div class="line"></div><div class="line">#格式化log输出结果</div><div class="line">[centos@bogon gittest]$ git log --pretty=oneline</div><div class="line">2fa716df1d841ac2347cd9b6d371cfdf71682dfe file1 master</div><div class="line">f9da1748bddb6cfcc0f492f60328abcd54f97663 br2</div><div class="line">da5068b35246dc26b77105a6dc6c2aa6e430fcad init</div><div class="line"></div><div class="line">#更友好的格式化，历史多了效果明显</div><div class="line">[centos@bogon gittest]$ git log --pretty=format:&apos;%h : %s&apos; --graph</div><div class="line">* 2fa716d : file1 master</div><div class="line">* f9da174 : br2</div><div class="line">* da5068b : init</div></pre></td></tr></table></figure></p>
<h4 id="比较差异DIFF">比较差异DIFF</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#比较分支间的差异</span></div><div class="line">[centos@bogon gittest]$ git diff master..br1</div><div class="line">diff --git a/file1 b/file1</div><div class="line">index 3325d54..76e65f5 100644</div><div class="line">--- a/file1</div><div class="line">+++ b/file1</div><div class="line">@@ -1 +1 @@</div><div class="line">-file1 master</div><div class="line">+file1 br1</div><div class="line"></div><div class="line"><span class="comment">#工作目录与暂存区(staged)差异</span></div><div class="line">[centos@bogon gittest]$ git diff</div><div class="line">diff --git a/file2 b/file2</div><div class="line">index e69de29..35d5537 100644</div><div class="line">--- a/file2</div><div class="line">+++ b/file2</div><div class="line">@@ -0,0 +1,2 @@</div><div class="line">+diff 的使用</div><div class="line">+</div><div class="line"></div><div class="line"><span class="comment">#暂存区与上次提交之间的差异</span></div><div class="line">[centos@bogon gittest]$ git add .</div><div class="line">[centos@bogon gittest]$ git diff --cached</div><div class="line">diff --git a/file2 b/file2</div><div class="line">index e69de29..35d5537 100644</div><div class="line">--- a/file2</div><div class="line">+++ b/file2</div><div class="line">@@ -0,0 +1,2 @@</div><div class="line">+diff 的使用</div><div class="line">+</div><div class="line"></div><div class="line"><span class="comment">#工作目录与上次提交之间的差异</span></div><div class="line">[centos@bogon gittest]$ git diff HEAD</div><div class="line">diff --git a/file2 b/file2</div><div class="line">index e69de29..35d5537 100644</div><div class="line">--- a/file2</div><div class="line">+++ b/file2</div><div class="line">@@ -0,0 +1,2 @@</div><div class="line">+diff 的使用</div><div class="line">+</div><div class="line">diff --git a/file3 b/file3</div><div class="line">index e69de29..1bf6afb 100644</div><div class="line">--- a/file3</div><div class="line">+++ b/file3</div><div class="line">@@ -0,0 +1 @@</div><div class="line">+还没commit  工作目录又改动了</div></pre></td></tr></table></figure>
<h3 id="附录_-gitconfig文件配置参考">附录 .gitconfig文件配置参考</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">[user]</div><div class="line">    name = zhangsan</div><div class="line">    email = zhangsan@gmail.com</div><div class="line">[color]</div><div class="line">    branch = auto</div><div class="line">    diff = auto</div><div class="line">    status = auto</div><div class="line">    ui = auto</div><div class="line"></div><div class="line">[core]</div><div class="line">    quotepath=<span class="literal">false</span></div><div class="line">    edit = vim</div><div class="line">    autocrlf = <span class="literal">true</span></div><div class="line">    filemode = <span class="literal">false</span></div><div class="line">[i18n]</div><div class="line">    commitencoding = UTF-8</div><div class="line">[gui]</div><div class="line">    encoding = utf-8</div><div class="line">[<span class="built_in">alias</span>]</div><div class="line">    stage = add</div><div class="line">    unstage = reset HEAD</div><div class="line">    hb = merge --no-ff</div><div class="line">    rmv = remote -v</div><div class="line">    ci = commit</div><div class="line">    cia = commit --amend</div><div class="line">    co = checkout</div><div class="line">    br = branch</div><div class="line">    st = status</div><div class="line">    dc = diff --cached</div><div class="line">    dw = diff --word-diff</div><div class="line">    aa = add -A</div><div class="line">    rmall = !git ls-files --deleted | xargs git rm</div><div class="line">    ll = <span class="built_in">log</span> --pretty=format:<span class="string">"%C(yellow)%h%Cred%d%Creset\\ %cn\\ %Cblue%cr%Creset\\ %Cgreen%s%Creset"</span> --decorate --numstat</div><div class="line">    lg = <span class="built_in">log</span> --pretty=format:<span class="string">"%C(yellow)%h%Cred%d%Creset\\ %cn\\ %Cblue%cr%Creset\\ %Cgreen%s%Creset"</span> --decorate</div><div class="line">    lt = <span class="built_in">log</span> --pretty=format:<span class="string">"%C(yellow)%h%Cred%d%Creset\\ %cn\\ %Cblue%cr%Creset\\ %Cgreen%s%Creset"</span> --graph</div><div class="line">[receive]</div><div class="line">    denyCurrentBranch = ignore</div></pre></td></tr></table></figure>
<p>更多配置文件参考: <a href="https://github.com/wustrive2008/conf-file" target="_blank" rel="external">https://github.com/wustrive2008/conf-file</a></p>
<h3 id="参考">参考</h3><p>《Git Community Book》</p>
<h3 id="关于捐赠">关于捐赠</h3><p>如何觉得本文章对你有帮助，欢迎通过支付宝捐赠来支持博主</p>
<p><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexo%E6%94%AF%E4%BB%98%E5%AE%9D%E4%BB%98%E6%AC%BE%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%9C%80%E5%B0%8F.png" alt="捐赠"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Git全解析之用起来先">Git全解析之用起来先</h2><h3 id="先安装Git环境">先安装Git环境</h3><p>下载安装：<a href="http://git-scm.com/download/" target="_blank" rel="exte]]>
    </summary>
    
      <category term="git" scheme="https://wustrive2008.github.io/tags/git/"/>
    
      <category term="版本控制" scheme="https://wustrive2008.github.io/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
      <category term="项目管理" scheme="https://wustrive2008.github.io/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
      <category term="版本控制" scheme="https://wustrive2008.github.io/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[python基础语法]]></title>
    <link href="https://wustrive2008.github.io/2016/01/05/python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>https://wustrive2008.github.io/2016/01/05/python/python基础语法/</id>
    <published>2016-01-05T14:00:30.000Z</published>
    <updated>2016-11-05T18:14:33.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Python基础语法">Python基础语法</h2><h3 id="python版本">python版本</h3><p>虽然python3已经发布很长时间了，但现在大部分开发者使用的版本还是python2。主要原因是python3的改动比较大，并且向下兼容性不是很好，但是python3是未来的发展方向，所以作为初学者还是推荐学习python3版本。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[centos@bogon ~]$ python</div><div class="line">Python <span class="number">2.6</span><span class="number">.6</span> (r266:<span class="number">84292</span>, Nov <span class="number">22</span> <span class="number">2013</span>, <span class="number">12</span>:<span class="number">16</span>:<span class="number">22</span>) </div><div class="line">[GCC <span class="number">4.4</span><span class="number">.7</span> <span class="number">20120313</span> (Red Hat <span class="number">4.4</span><span class="number">.7</span><span class="number">-4</span>)] on linux2</div><div class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line">[centos@bogon ~]$ python3</div><div class="line">Python <span class="number">3.4</span><span class="number">.4</span> (default, Jan  <span class="number">5</span> <span class="number">2016</span>, <span class="number">21</span>:<span class="number">54</span>:<span class="number">11</span>) </div><div class="line">[GCC <span class="number">4.4</span><span class="number">.7</span> <span class="number">20120313</span> (Red Hat <span class="number">4.4</span><span class="number">.7</span><span class="number">-16</span>)] on linux</div><div class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h3 id="python的安装">python的安装</h3><p>下面主要介绍在python2的基础上安装python3(python2与python3版本共存)，因为现在大部分linux发现版本自带的python版本还是python2</p>
<ol>
<li>安装环境</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum install gcc </div><div class="line">yum install zlib-devel </div><div class="line">yum install make</div></pre></td></tr></table></figure>
<ol>
<li>下载python3版本<br>进入网站选择python版本：<a href="https://www.python.org/ftp/python/" target="_blank" rel="external">https://www.python.org/ftp/python/</a><br>这里选择的是Python-3.4.4.tgz </li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://www.python.org/ftp/python/3.4.4/Python-3.4.4.tgz</div></pre></td></tr></table></figure>
<ol>
<li>解压、编辑和安装</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">tar -zxvf Python-3.4.0.tgz </div><div class="line"><span class="built_in">cd</span> Python-3.4.0 </div><div class="line">./configure –prefix=/opt/python3 </div><div class="line">make all </div><div class="line">make install</div></pre></td></tr></table></figure>
<ol>
<li>链接到bin目录</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln <span class="_">-s</span> /opt/python3/bin/python3 /usr/bin/python3</div></pre></td></tr></table></figure>
<p><strong>提示：在python交互模式下方向键变字母的问题</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#安装readline-devel</span></div><div class="line"><span class="variable">$yum</span> install readline-devl</div><div class="line"><span class="comment">#重新安装python</span></div><div class="line">$./configure</div><div class="line"><span class="variable">$sudo</span> make install</div></pre></td></tr></table></figure>
<h3 id="字符串">字符串</h3><h4 id="三种引号的区别">三种引号的区别</h4><p>实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'hello python3'</span></div><div class="line"><span class="string">'hello python3'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"this's python3"</span></div><div class="line"><span class="string">"this's python3"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"""hello python3</span></div><div class="line"><span class="meta">... </span>this's python3"""</div><div class="line"><span class="string">"hello python3\nthis's python3"</span></div></pre></td></tr></table></figure></p>
<p><strong>提示：具体使用哪种方式根据需求灵活选择</strong></p>
<h4 id="字符串连接">字符串连接</h4><p>实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"michael"</span>+<span class="string">" "</span>+<span class="string">"jackson"</span></div><div class="line"><span class="string">'michael jackson'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"micheal"</span> <span class="string">"jackson"</span></div><div class="line"><span class="string">'michealjackson'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"micheal "</span> <span class="string">"jackson"</span></div><div class="line"><span class="string">'micheal jackson'</span></div></pre></td></tr></table></figure></p>
<p><strong>注意：不推荐使用第二种方式</strong></p>
<h4 id="格式说明符">格式说明符</h4><p>实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"John %s%s"</span> % (<span class="string">"Every"</span>, <span class="string">"Man"</span>)</div><div class="line"><span class="string">'John EveryMan'</span></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"%s %s %10s"</span> % (<span class="string">"John"</span> , <span class="string">"Every"</span> , <span class="string">"Man"</span>)</div><div class="line"><span class="string">'John Every        Man'</span></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"%-8s %s %10s"</span> % (<span class="string">"John"</span> , <span class="string">"Every"</span> , <span class="string">"Man"</span>)</div><div class="line"><span class="string">'John     Every        Man'</span></div></pre></td></tr></table></figure></p>
<h4 id="原始字符串与Unicode">原始字符串与Unicode</h4><p>原始字符串r:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Hello.\npython!'</span>)</div><div class="line">Hello.</div><div class="line">python!</div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">r'Hello.\npython!'</span>)</div><div class="line">Hello.\npython!</div></pre></td></tr></table></figure></p>
<p>Unicode对象：<br>python中的普通字符串在内部是以8位的ASCII码形式存储的，而Unicode字符串则存储为16的Unicode字符，这样能够表示更多的字符集。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">u'Hello.world!'</span></div><div class="line"><span class="string">'Hello.world!'</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>
<h3 id="数值与运算符">数值与运算符</h3><p>三种数值类型<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; type(1)</div><div class="line">&lt;class 'int'&gt;</div><div class="line">&gt;&gt;&gt;</div><div class="line">&gt;&gt;&gt; type(1.0)</div><div class="line">&lt;class 'float'&gt;</div><div class="line">&gt;&gt;&gt;</div><div class="line">&gt;&gt;&gt; type(1j)</div><div class="line">&lt;class 'complex'&gt;</div></pre></td></tr></table></figure></p>
<p>简单数值运算</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>+<span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>+<span class="number">1.0</span></div><div class="line"><span class="number">2.0</span></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2e23445</span>*<span class="number">3e45464</span></div><div class="line">inf</div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">33</span>/<span class="number">11</span></div><div class="line"><span class="number">3.0</span></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4.0</span>/<span class="number">2.0</span></div><div class="line"><span class="number">2.0</span></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span>/<span class="number">3</span></div><div class="line"><span class="number">1.6666666666666667</span></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span>%<span class="number">3</span></div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure>
<p>数值格式化</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"%.2f"</span> % <span class="number">2.322551</span>)</div><div class="line"><span class="number">2.32</span></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"%0.f"</span> % (<span class="number">343</span>*<span class="number">0.2</span>))</div><div class="line"><span class="number">69</span></div></pre></td></tr></table></figure>
<h3 id="参考">参考</h3><p>《Python编程入门经典》</p>
<h3 id="捐赠">捐赠</h3><p>如何觉得本文章对你有帮助，欢迎捐赠</p>
<p><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexo%E6%94%AF%E4%BB%98%E5%AE%9D%E4%BB%98%E6%AC%BE%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%9C%80%E5%B0%8F.png" alt="捐赠"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Python基础语法">Python基础语法</h2><h3 id="python版本">python版本</h3><p>虽然python3已经发布很长时间了，但现在大部分开发者使用的版本还是python2。主要原因是python3的改动比较大，并且向下兼容性不是]]>
    </summary>
    
      <category term="python" scheme="https://wustrive2008.github.io/tags/python/"/>
    
      <category term="脚本语言" scheme="https://wustrive2008.github.io/tags/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80/"/>
    
      <category term="python" scheme="https://wustrive2008.github.io/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[UML类图的6种关系]]></title>
    <link href="https://wustrive2008.github.io/2016/01/02/UML/UML%E7%B1%BB%E5%9B%BE%E7%9A%846%E7%A7%8D%E5%85%B3%E7%B3%BB/"/>
    <id>https://wustrive2008.github.io/2016/01/02/UML/UML类图的6种关系/</id>
    <published>2016-01-02T12:54:32.000Z</published>
    <updated>2016-11-05T18:14:33.000Z</updated>
    <content type="html"><![CDATA[<p>在UML类图中，常见的有以下几种关系:泛化（Generalization）,  实现（Realization）,关联（Association）,聚合（Aggregation）,组合(Composition)，依赖(Dependency)</p>
<h3 id="泛化(Generalization)关系">泛化(Generalization)关系</h3><p>一种继承关系,它指定了子类如何特化父类的所有特征和行为例如：兔子是动物的一种,男人是一类人。</p>
<p>图形：带三角箭头的实线，箭头指向父类</p>
<p><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexo%E6%B3%9B%E5%8C%96.gif" alt="泛化"></p>
<h3 id="实现(Realization)关系">实现(Realization)关系</h3><p>一种类与接口的关系，表示类是接口所有特征和行为的实现</p>
<p>图形：带三角箭头的虚线，箭头指向接口</p>
<p><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexo%E5%AE%9E%E7%8E%B0.gif" alt="实现"></p>
<h3 id="关联(Association)关系">关联(Association)关系</h3><p>一种拥有的关系,它使一个类知道另一个类的属性和方法；如：老师与学生，丈夫与妻子<br>关联可以是双向的，也可以是单向的。双向的关联可以有两个箭头或者没有箭头，单向的关联有一个箭头。</p>
<p>图形：带普通箭头的实心线，指向被拥有者</p>
<p><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexo%E5%85%B3%E8%81%94.gif" alt="关联"></p>
<h3 id="聚合(Aggregation)关系">聚合(Aggregation)关系</h3><p>整体与部分的关系.如车和轮胎是整体和部分的关系，聚合关系是关联关系的一种，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关系。</p>
<p>图形：带空心菱形的实心线，菱形指向整体</p>
<p><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexo%E8%81%9A%E5%90%88.gif" alt="聚合"></p>
<h3 id="组合(Composition)关系">组合(Composition)关系</h3><p>整体与部分的关系,没有公司就不存在部门，组合关系是关联关系的一种，是比聚合关系还要强的关系，它要求普通的聚合关系中代表整体的对象负责代表部分的对象的生命周期</p>
<p>图形：带实心菱形的实线，菱形指向整体</p>
<p><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexo%E7%BB%84%E5%90%88.gif" alt="组合"></p>
<h3 id="依赖(Dependency)关系">依赖(Dependency)关系</h3><p>一种使用关系，特定事物的改变有可能会影响到使用该事物的其他事物，在需要表示一个事物使用另一个事物时使用依赖关系。大多数情况下，依赖关系体现在某个类的方法使用另一个类的对象作为参数。</p>
<p>图形：带箭头的虚线表示，由依赖的一方指向被依赖的一方</p>
<p><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexo%E4%BE%9D%E8%B5%96.gif" alt="依赖"></p>
<h3 id="综合示例">综合示例</h3><p><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexo%E7%BB%BC%E5%90%88.gif" alt="示例"></p>
<p>转载自：<a href="http://blog.csdn.net/tianhai110/article/details/6339565" target="_blank" rel="external">UML类图几种关系的总结</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在UML类图中，常见的有以下几种关系:泛化（Generalization）,  实现（Realization）,关联（Association）,聚合（Aggregation）,组合(Composition)，依赖(Dependency)</p>
<h3 id="泛化(Gen]]>
    </summary>
    
      <category term="oop" scheme="https://wustrive2008.github.io/tags/oop/"/>
    
      <category term="UML" scheme="https://wustrive2008.github.io/tags/UML/"/>
    
      <category term="关系" scheme="https://wustrive2008.github.io/tags/%E5%85%B3%E7%B3%BB/"/>
    
      <category term="UML" scheme="https://wustrive2008.github.io/categories/UML/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入理解jvm之垃圾收集器]]></title>
    <link href="https://wustrive2008.github.io/2015/12/25/java/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3jvm%E4%B9%8B%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/"/>
    <id>https://wustrive2008.github.io/2015/12/25/java/深入理解jvm之垃圾收集器/</id>
    <published>2015-12-25T13:00:59.000Z</published>
    <updated>2016-11-05T18:14:33.000Z</updated>
    <content type="html"><![CDATA[<h2 id="判断对象是否存活">判断对象是否存活</h2><h3 id="可达性分析算法">可达性分析算法</h3><p>通过一系列称为”GC Roots”的对象作为起点，从这些节点开始向下搜索，搜索所有走过的路径称为引用链，当一个对象到GC Roots没有任何引用链相连时(从GC Roots到此对象不可达)，则证明此对象是不可用的。<br>可作为GC Roots的对象包括：</p>
<ul>
<li>虚拟机栈中所引用的对象</li>
<li>方法区中类静态属性引用的对象</li>
<li>方法区中常量引用的对象</li>
<li>本地方法栈中JNI引用的对象</li>
</ul>
<p>引用的分类</p>
<ul>
<li>强引用(Strong Reference): 在代码中普遍存在的，类似”Object obj = new Object()”这类引用，只要强引用还在，垃圾收集器永远不会回收掉被引用的对象</li>
<li>软引用(Sofe Reference): 有用但并非必须的对象，可用SoftReference类来实现软引用，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行二次回收。如果这次回收还没有足够的内存，才会抛出内存异常异常。</li>
<li>弱引用(Weak Reference): 被弱引用关联的对象只能生存到下一次垃圾收集发生之前，JDK提供了WeakReference类来实现弱引用</li>
<li>虚引用(Phantom Reference):也称为幽灵引用或幻影引用，是最弱的一种引用关系，JDK提供了PhantomReference类来实现虚引用。</li>
</ul>
<blockquote>
<p>不要使用finalize()方法来挽救对象。</p>
</blockquote>
<p>JVM判定无用的类的条件：</p>
<ul>
<li>该类的所有实例已经被回收，java堆中不存在该类的任何示例</li>
<li>加载该类的ClassLoader已经被回收</li>
<li>该类对应的java.lang.Class对象没有在任何地方被引用</li>
</ul>
<h2 id="垃圾收集算法">垃圾收集算法</h2><h3 id="标记-清除算法">标记-清除算法</h3><p>即先标记所有需要回收的对象，在标记完成后统一进行回收。该算法的两个不足：一个是效率问题，标记和清除两个过程效率不高；另一个是空间问题，标记清除后产生大量不连续的内存碎片，空间碎片太多导致为较大对象分配内存时，找不到足够大的连续内存。</p>
<h3 id="复制算法">复制算法</h3><p>将可用内存按容量划分为大小相对的两块，每次只使用其中一块，当这一块内存使用完，将还存活的对象复制到另一块，然后将已使用过的内存一次清理掉，很明显这种方式虽然解决了内存碎片问题，但是可用内存缩小为原来的一半，太浪费了。现在大部分的虚拟机都使用这种方式来回收新生代，即Eden区与两个Survivor区，默认Eden:一个Survivor=8:1</p>
<h3 id="标记-复制算法">标记-复制算法</h3><p>标记过程如标记-清除算法一样，后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉边界以外的内存。</p>
<h2 id="垃圾收集器">垃圾收集器</h2><p>这里主要列举现在常用的收集器</p>
<h3 id="CMS收集器">CMS收集器</h3><p>现在常用的一种垃圾收集器，基于标记-清除算法，收集过程包含4个步骤：</p>
<ul>
<li>初始标记</li>
<li>并发标记</li>
<li>重新标记</li>
<li>并发清除</li>
</ul>
<p>其中初始标记、重新标记这两个步骤仍然需要“Stop The World”。初始标记仅仅是标记一下GC Roots能直接关联到的对象，速度很快，并发标记就是进行GC Roots Trancing的过程，而重新标记阶段则是为了修正并发标记期间因用户程序继续运行而导致标记产生变动那一部分对象的标记记录，这个阶段的停顿时间比初始标记稍长一些，但远比并发标记时间短。<br>由于整个过程耗时最长的并发标记和并发清除过程收集器线程都可以与用户线程一起工作，所以从整体上看，CMS收集器的内存回收过程是与用户线程并发执行的。</p>
<p>CMS收集器的缺点：</p>
<ul>
<li>对CPU资源敏感 虽然不会导致用户线程停顿，但会占用一部分线程导致应用程序变慢，总吞吐量会降低。CMS默认启动的回收线程数是(CPU数量+3)/4 </li>
<li>无法处理浮动垃圾 可能出现”Concurrent Mode Failure”失败而导致另一次Full GC的产生。浮动垃圾是回收的过程与用户线程并行时用户线程产生的垃圾。</li>
<li>产生内存碎片 使用标记-清除算法</li>
</ul>
<h3 id="G1收集器">G1收集器</h3><p>一款面向服务端应用的比较新的垃圾收集器，具备以下特点：</p>
<ul>
<li>并行与并发 G1能够充分利用多CPU、多核环境下的硬件优势，使用多个CPU核心来缩短Stop The World的停顿时间</li>
<li>分代收集 </li>
<li>空间整合 同时使用标记-整理与复制算法不会产生内存空间碎片 </li>
<li>可预测的停顿 能让使用者指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒</li>
</ul>
<p>G1的垃圾收集步骤：</p>
<ul>
<li>初始标记</li>
<li>并发标记</li>
<li>最终标记</li>
<li>筛选回收</li>
</ul>
<h2 id="内存分配与回收策略">内存分配与回收策略</h2><ol>
<li><p>对象优先在Eden分配，当Eden没有足够的空间时，虚拟机发起一次Minor GC。可以通过JVM参数:-XX:+PrintGCDetails打印GC日志查看垃圾收集情况。</p>
<p> 示例：<br> JVM Args： -Xms20m -Xmx20m -Xmn10m<br> 堆大小共20m，其中新生代10m，老年代10m，默认-XX:SurvivorRatio=8决定了新生代中Eden区与一个Survivor区的空间比例是8:1</p>
</li>
<li><p>大对象直接进入老年代，如长字符串及数组，jvm提供了一个-XX:PretenureSizeThreshold参数，令大于这个设置值的对象直接在老年代分配内存，避免在Eden与Survivor之间发生大量内存复制。</p>
</li>
<li><p>长期存活的对象进入老年代 虚拟机给每个对象定义了一个对象年龄计数器。如果对象在Eden出生并经过一次Minor GC后仍然存活，并且能被Survivor容纳，将被移动到Survivor空间，并且对象年龄设为1，对象在Survivor空间每熬过一次Minor GC，年龄就增加1岁，当年龄到达一定长度(默认15)，将会被晋升都老年代。如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，无须等到PretenureSizeThreshold中要求的年龄。</p>
</li>
<li><p>空间分配担保，在发生Minor GC之前，虚拟机会先检查老年代最大可用连续空间是否大于新生代所有对象总空间，如果是则Minor GC是安全的。如果不是虚拟机会查看HandlePromotionFailure设置值是否允许担保失败。如果允许，那么会继续检查老年代最大可用连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试进行一次Minor GC，尽管这次Minor GC是有风险的；如果小于或者HandlePromotionFailure设置不允许冒险，那这是要进行一次Full GC。因为在极端的情况下，即新生代所有对象都存活，就需要把Survivor无法容纳的对象直接放入老年代。</p>
</li>
</ol>
<h3 id="参考">参考</h3><p>《深入理解java虚拟机 JVM高级特性与最佳实践》</p>
<h3 id="捐赠">捐赠</h3><p>如何觉得本文章对你有帮助，欢迎捐赠</p>
<p><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexo%E6%94%AF%E4%BB%98%E5%AE%9D%E4%BB%98%E6%AC%BE%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%9C%80%E5%B0%8F.png" alt="捐赠"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="判断对象是否存活">判断对象是否存活</h2><h3 id="可达性分析算法">可达性分析算法</h3><p>通过一系列称为”GC Roots”的对象作为起点，从这些节点开始向下搜索，搜索所有走过的路径称为引用链，当一个对象到GC Roots没有任何引用链相连时(]]>
    </summary>
    
      <category term="java" scheme="https://wustrive2008.github.io/tags/java/"/>
    
      <category term="虚拟机" scheme="https://wustrive2008.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
      <category term="性能" scheme="https://wustrive2008.github.io/tags/%E6%80%A7%E8%83%BD/"/>
    
      <category term="jvm" scheme="https://wustrive2008.github.io/tags/jvm/"/>
    
      <category term="垃圾收集器" scheme="https://wustrive2008.github.io/tags/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/"/>
    
      <category term="java" scheme="https://wustrive2008.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入理解jvm之内存区域与内存溢出]]></title>
    <link href="https://wustrive2008.github.io/2015/12/24/java/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3jvm%E4%B9%8B%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA/"/>
    <id>https://wustrive2008.github.io/2015/12/24/java/深入理解jvm之内存区域与内存溢出/</id>
    <published>2015-12-24T13:21:29.000Z</published>
    <updated>2016-11-05T18:14:33.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Java内存区域与内存溢出异常">Java内存区域与内存溢出异常</h2><h3 id="运行时数据区域">运行时数据区域</h3><p><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-blog%2Fjava%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%86%85%E5%AD%98%E5%88%86%E5%8C%BA.jpg" alt="java虚拟机内存分区"></p>
<h4 id="程序计数器">程序计数器</h4><ul>
<li>当前线程所执行的字节码的行号指示器</li>
<li>当前线程私有</li>
<li>不会出现OutOfMemoryError情况</li>
</ul>
<h4 id="java虚拟机栈">java虚拟机栈</h4><ul>
<li>线程私有，生命周期与线程相同</li>
<li>java方法执行的内存模型，每个方法执行的同时都会创建一个栈帧，存储局部变量表(基本类型、对象引用)、操作数栈、动态链接、方法出口等信息</li>
<li>StackOverflowError异常：当线程请求的栈深度大于虚拟机所允许的深度</li>
<li>OutOfMemoryError异常：如果栈的扩展时无法申请到足够的内存</li>
</ul>
<h4 id="本地方法栈">本地方法栈</h4><p>与虚拟机栈相似，主要为虚拟机使用到的Native方法服务，在HotSpot虚拟机中直接把本地方法栈与虚拟机栈二合一</p>
<h4 id="Java堆(Java_Heap)">Java堆(Java Heap)</h4><p>java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此区域的唯一目的就是存储对象实例。java堆是垃圾收集器管理的主要区域。java堆还可以细分为：新生代与老年代。在细一点有Eden空间、Form Survivor空间、To Survivor空间等。</p>
<ul>
<li>可以通过-Xmx和-Xms控制堆的大小</li>
<li>OutOfMemoryError异常：当在堆中没有内存完成实例分配，且堆也无法再扩展时。</li>
</ul>
<h4 id="方法区">方法区</h4><ul>
<li>线程间共享</li>
<li>用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据</li>
<li>OutOfMemoryError异常：当方法区无法满足内存的分配需求时</li>
</ul>
<h4 id="运行时常量池">运行时常量池</h4><ul>
<li>方法区的一部分</li>
<li>用于存放编译期生成的各种字面量与符号引用</li>
<li>OutOfMemoryError异常：当常量池无法再申请到内存时</li>
</ul>
<h4 id="直接内存">直接内存</h4><ul>
<li>NIO可以使用Native函数库直接分配堆外内存，堆中的DirectByteBuffer对象作为这块内存的引用进行操作</li>
<li>大小不受Java堆大小的限制，受本机(服务器)内存限制</li>
<li>OutOfMemoryError异常：系统内存不足时</li>
</ul>
<h3 id="HotSpot虚拟机">HotSpot虚拟机</h3><h4 id="对象的创建">对象的创建</h4><p>虚拟机遇到一条new指令时，首先将去检查这个对象的参数是否在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，必须先执行类的加载过程。<br>在类加载检查通过后，虚拟机将为新生对象分配内存。对象所需内存大小再类加载完成后便可确定。内存分配可以采用“指针碰撞”与“空闲列表”的方式。</p>
<h4 id="对象的访问定位">对象的访问定位</h4><p>java程序需要通过栈上的reference数据来操作堆上的具体对象。访问方式有使用句柄和直接指针两种。</p>
<ul>
<li>句柄访问 java堆中将会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息</li>
<li>直接指针访问 java堆对象的布局中必须考虑如何放置访问类型数据的相关信息，reference中存储的就是对象地址</li>
</ul>
<h3 id="OOM异常的解决思路">OOM异常的解决思路</h3><p>生成Dump快照文件：</p>
<ul>
<li>通过jvm参数—XX:-HeapDumpOnOutOfMemoryError可以让JVM在出现内存溢出是Dump出当前的内存转储快照</li>
<li>用jmap生产dump文件，win通过任务管理器查看tomcat的进程pid，linux用ps命令查看进程pid,然后用jmap命令</li>
</ul>
<p>先通过内存映像分析工具(如Eclipse的Memory Analyzer)进行分析，常见的情况有：</p>
<ul>
<li>内存泄露，对象已经死了，无法通过垃圾收集器进行自动回收，通过找出泄露的代码位置和原因，才好确定解决方案；</li>
<li>内存溢出，内存中的对象都还必须存活着，这说明Java堆分配空间不足，检查堆设置大小（-Xmx与-Xms），检查代码是否存在对象生命周期太长、持有状态时间过长的情况。</li>
</ul>
<p>OOM异常示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">package oom;</div><div class="line"></div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">/**</div><div class="line"> * VM Args: -Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError</div><div class="line">* @ClassName: HeapOOM </div><div class="line">*</div><div class="line"> */</div><div class="line">public class HeapOOM &#123;</div><div class="line">    static class OOMObject&#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        List&lt;OOMObject&gt; list = new ArrayList&lt;OOMObject&gt;();</div><div class="line">        while(true)&#123;</div><div class="line">            list.add(new OOMObject());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="参考">参考</h3><p>《深入理解java虚拟机 JVM高级特性与最佳实践》</p>
<h3 id="捐赠">捐赠</h3><p>如何觉得本文章对你有帮助，欢迎捐赠</p>
<p><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexo%E6%94%AF%E4%BB%98%E5%AE%9D%E4%BB%98%E6%AC%BE%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%9C%80%E5%B0%8F.png" alt="捐赠"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Java内存区域与内存溢出异常">Java内存区域与内存溢出异常</h2><h3 id="运行时数据区域">运行时数据区域</h3><p><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-blog%2]]>
    </summary>
    
      <category term="java" scheme="https://wustrive2008.github.io/tags/java/"/>
    
      <category term="虚拟机" scheme="https://wustrive2008.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
      <category term="性能" scheme="https://wustrive2008.github.io/tags/%E6%80%A7%E8%83%BD/"/>
    
      <category term="jvm" scheme="https://wustrive2008.github.io/tags/jvm/"/>
    
      <category term="HotSpot" scheme="https://wustrive2008.github.io/tags/HotSpot/"/>
    
      <category term="java" scheme="https://wustrive2008.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[重构之代码的坏味道]]></title>
    <link href="https://wustrive2008.github.io/2015/10/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%87%8D%E6%9E%84%E4%B9%8B%E4%BB%A3%E7%A0%81%E7%9A%84%E5%9D%8F%E5%91%B3%E9%81%93/"/>
    <id>https://wustrive2008.github.io/2015/10/24/设计模式/重构之代码的坏味道/</id>
    <published>2015-10-24T12:38:16.000Z</published>
    <updated>2016-11-05T18:14:33.000Z</updated>
    <content type="html"><![CDATA[<p>1个好的程序员顶10个普通的程序员，程序员之间的差异很大，这是大家的共识，这个差异应该主要表现在设计思想和方法上面。清晰的代码结构和优雅的设计方法在软件开发中的重要性不用多说。成功的原因各不相同，失败的原因却总是相似的。如果一段代码是不稳定或者有一些潜在问题的，那么代码往往会包含一些明显的痕迹。正如食物要腐坏之前，经常会发出一些异味一样。我们管这些痕迹叫做“代码坏味道”。下面主要介绍代码的坏味道，开发中要特别注意这样的代码，他们往往是失败的软件的开始。<br><a id="more"></a></p>
<h3 id="可度量的味道">可度量的味道</h3><h4 id="过长的方法">过长的方法</h4><ol>
<li>过长的方法往往难以理解，特别是在理解别人的代码的时候，发现这样的方法，往往有抵触心理，大多数人都不喜欢读太长的方法。</li>
<li>过长的方法不易维护，一个方法里面的逻辑过多，在后期维护、扩展的时候可能会出现各种问题，复杂条件式和循环体常常是提炼的信号。</li>
</ol>
<h4 id="大类">大类</h4><ol>
<li>类太大往往是因为做了太多事情，有些事情不是自己该做的，可能是抽象不够</li>
<li>类太大通常会出现太多的实例变量</li>
</ol>
<h4 id="过多的参数">过多的参数</h4><ol>
<li>方法的参数过多不易理解和使用，考虑是否可用对方法进行拆分或使用默认参数</li>
</ol>
<h4 id="过多的注释">过多的注释</h4><ol>
<li>注释太多让人厌烦，就像演讲一样，尽说废话，没人想听，应该言简意赅，让人一听就明白。</li>
<li>当你感觉需要注释，请先尝试重构，试着让所有的注释都变得多余，好的代码本身就应该是自注释的。</li>
</ol>
<h3 id="不必要的复杂性">不必要的复杂性</h3><h4 id="过度设计">过度设计</h4><ol>
<li>超出需求过多的设计往往是过度设计，对某种变化的应对，而这种变化没有发生，也许永远都不会发生。</li>
</ol>
<h3 id="重复">重复</h3><h4 id="重复代码">重复代码</h4><ol>
<li>往往由于设计的问题导致多处存在相似或相同的一段代码，考虑将这些代码提取到一个方法中。</li>
</ol>
<h4 id="异曲同工的类">异曲同工的类</h4><ol>
<li>如果出现多个类在做同样或相似的事情，考虑将这些类进行提炼融合，保证代码的简洁性。</li>
</ol>
<h3 id="条件逻辑">条件逻辑</h3><h4 id="switch语句太长">switch语句太长</h4><ol>
<li>switch语句太长容易导致重复的代码，考虑使用模式或多态来替换。</li>
</ol>
<h4 id="基本类型太多">基本类型太多</h4><ol>
<li>软件中，基本类型被过度使用。在某些场合下，应该使用一些小的类来代替这些基本类型。</li>
</ol>
<h4 id="纯稚的数据类">纯稚的数据类</h4><ol>
<li>这些类拥有一些字段，并提供了对应的Getter和Setter方法，除此以外一无所有。这些类只是一些不会说话的数据容器， 而且它们必定会被其他类过分琐细地操作。</li>
</ol>
<h4 id="数据泥团">数据泥团</h4><ol>
<li>反复出现的一组参数，有关联的多个数组换成类</li>
</ol>
<h4 id="令人迷惑的暂时值域">令人迷惑的暂时值域</h4><ol>
<li>有时候你会看到一个对象的实例变量仅为某些特定的场合而设。这样的代码将导致难以理解，因为你期望一个对象需要它所有的变量。很多情况下，这些值域应该不属于此class ，而应该单独的提取成新的类。</li>
</ol>
<h4 id="被拒绝的遗赠">被拒绝的遗赠</h4><ol>
<li>子类继承父类的方法和数据，但是它们只需要使用其中的一部分，考虑用代理替代继承关系。</li>
</ol>
<h4 id="亲密关系">亲密关系</h4><ol>
<li>有时候，类之间的关系变得非常亲密，并且需要花费大量时间来探究彼此之间的私有成分。考虑对他们进行拆散合并。</li>
</ol>
<h4 id="冗赘类">冗赘类</h4><ol>
<li>不要创建没有价值的类</li>
</ol>
<h3 id="职责">职责</h3><h4 id="发散式变化">发散式变化</h4><ol>
<li>如果某个类经常因为不同的原因在不同的方向上发生变化就会产生发散式变化。也就是说，一个类拥有多个引起它发生变化的原因。</li>
</ol>
<h4 id="霰弹式修改">霰弹式修改</h4><ol>
<li>霰弹式修改与发散式变化类似，却又存在相反的一面。每次进行某种修改时，你都必须对多个不同的类进行很多对应的小修改。</li>
</ol>
<h4 id="平行继承体系">平行继承体系</h4><ol>
<li>平行继承体系是霰弹式修改的一个特例。在这种情况下，当你为某个类增加一个子类时，你不得不为另一个类也相应增加一个子类。你也许能够识别到这种味道，因为一个继承体系中类的类名前缀与另一个体系中的类名前缀一样。</li>
</ol>
<h3 id="库类">库类</h3><h4 id="不完善的程序库类">不完善的程序库类</h4><ol>
<li>库类在使用时一定要小心，特别是在我们不知道一个库是否完整时。</li>
</ol>
<h3 id="参考">参考</h3><ol>
<li>《重构——改善既有代码的设计》</li>
<li><a href="http://blog.csdn.net/lovelion/article/details/9301691" target="_blank" rel="external">刘伟技术博客</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>1个好的程序员顶10个普通的程序员，程序员之间的差异很大，这是大家的共识，这个差异应该主要表现在设计思想和方法上面。清晰的代码结构和优雅的设计方法在软件开发中的重要性不用多说。成功的原因各不相同，失败的原因却总是相似的。如果一段代码是不稳定或者有一些潜在问题的，那么代码往往会包含一些明显的痕迹。正如食物要腐坏之前，经常会发出一些异味一样。我们管这些痕迹叫做“代码坏味道”。下面主要介绍代码的坏味道，开发中要特别注意这样的代码，他们往往是失败的软件的开始。<br>]]>
    
    </summary>
    
      <category term="oop" scheme="https://wustrive2008.github.io/tags/oop/"/>
    
      <category term="重构" scheme="https://wustrive2008.github.io/tags/%E9%87%8D%E6%9E%84/"/>
    
      <category term="软件设计" scheme="https://wustrive2008.github.io/tags/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="设计模式" scheme="https://wustrive2008.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[List与Map的遍历过程中删除元素]]></title>
    <link href="https://wustrive2008.github.io/2015/09/18/java/List%E4%B8%8EMap%E7%9A%84%E9%81%8D%E5%8E%86%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0/"/>
    <id>https://wustrive2008.github.io/2015/09/18/java/List与Map的遍历过程中删除元素/</id>
    <published>2015-09-18T13:51:54.000Z</published>
    <updated>2016-11-05T18:14:33.000Z</updated>
    <content type="html"><![CDATA[<p>在日常的开发过程中，经常需要对List或Map里面的符合某种业务的数据进行删除，但是如果不了解里面的机制就容易掉入“陷阱”导致遗漏或者程序异常。<br><a id="more"></a></p>
<h3 id="List遍历过程中删除元素">List遍历过程中删除元素</h3><h4 id="使用索引下标遍历的方式">使用索引下标遍历的方式</h4><p>示例：删除列表中的2<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        list.add(<span class="number">1</span>);</div><div class="line">        list.add(<span class="number">2</span>);</div><div class="line">        list.add(<span class="number">2</span>);</div><div class="line">        list.add(<span class="number">3</span>);</div><div class="line">        list.add(<span class="number">4</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</div><div class="line">            <span class="keyword">if</span>(<span class="number">2</span> == list.get(i))&#123;</div><div class="line">                list.remove(i);</div><div class="line">            &#125;</div><div class="line">            System.out.println(list.get(i));</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        System.out.println(<span class="string">"list="</span> + list.toString());</div><div class="line">        </div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">list=[1, 2, 3, 4]</div></pre></td></tr></table></figure></p>
<p>问题：<br>结果显示只删除了一个2，另一个2被遗漏了，原因是：删除了第一个2后，集合里的元素个数减1，后面的元素往前移了1位，导致了第二个2被遗漏了。</p>
<h4 id="使用For循环遍历的方式">使用For循环遍历的方式</h4><p>示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listIterator2</span><span class="params">()</span></span>&#123;</div><div class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        list.add(<span class="number">1</span>);</div><div class="line">        list.add(<span class="number">2</span>);</div><div class="line">        list.add(<span class="number">2</span>);</div><div class="line">        list.add(<span class="number">3</span>);</div><div class="line">        list.add(<span class="number">4</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> value : list) &#123;</div><div class="line">            <span class="keyword">if</span>(<span class="number">2</span> == value)&#123;</div><div class="line">                list.remove(value);</div><div class="line">            &#125;</div><div class="line">            System.out.println(value);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        System.out.println(<span class="string">"list="</span> + list.toString());</div><div class="line">        </div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Exception in thread <span class="string">"main"</span> <span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line">java.util.ConcurrentModificationException</div><div class="line">    at java.util.ArrayList$Itr.checkForComodification(Unknown Source)</div><div class="line">    at java.util.ArrayList$Itr.next(Unknown Source)</div><div class="line">    at test.ListIterator.listIterator2(ListIterator.java:<span class="number">39</span>)</div><div class="line">    at test.ListIterator.main(ListIterator.java:<span class="number">10</span>)</div></pre></td></tr></table></figure></p>
<p>说明：<br>jdk中对ConcurrentModificationException的描述:<br>public class ConcurrentModificationException extends<br>RuntimeException当方法检测到对象的并发修改，但不允许这种修改时，抛出此异常。<br>例如，某个线程在 Collection 上进行迭代时，通常不允许另一个线性修改该 Collection。通常在这些情况下，迭代的结果是不确定的。如果检测到这种行为，一些迭代器实现（包括 JRE 提供的所有通用 collection 实现）可能选择抛出此异常。执行该操作的迭代器称为快速失败 迭代器，因为迭代器很快就完全失败，而不会冒着在将来某个时间任意发生不确定行为的风险。<br>注意，此异常不会始终指出对象已经由不同 线程并发修改。如果单线程发出违反对象协定的方法调用序列，则该对象可能抛出此异常。例如，如果线程使用快速失败迭代器在 collection 上迭代时直接修改该 collection，则迭代器将抛出此异常。<br>注意，迭代器的快速失败行为无法得到保证，因为一般来说，不可能对是否出现不同步并发修改做出任何硬性保证。快速失败操作会尽最大努力抛出 ConcurrentModificationException。因此，为提高此类操作的正确性而编写一个依赖于此异常的程序是错误的做法，正确做法是：ConcurrentModificationException 应该仅用于检测 bug。</p>
<p>Java中的For each实际上使用的是iterator进行处理的。而iterator是不允许集合在iterator使用期间删除的。所以导致了iterator抛出了ConcurrentModificationException 。</p>
<h4 id="正确的方式"><strong>正确的方式</strong></h4><p>示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listIterator3</span><span class="params">()</span></span>&#123;</div><div class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        list.add(<span class="number">1</span>);</div><div class="line">        list.add(<span class="number">2</span>);</div><div class="line">        list.add(<span class="number">2</span>);</div><div class="line">        list.add(<span class="number">3</span>);</div><div class="line">        list.add(<span class="number">4</span>);</div><div class="line">        </div><div class="line">        Iterator&lt;Integer&gt; it = list.iterator();</div><div class="line">        <span class="keyword">while</span> (it.hasNext())&#123;</div><div class="line">            Integer value = it.next();</div><div class="line">            <span class="keyword">if</span> (<span class="number">2</span> == value) &#123;</div><div class="line">                it.remove();</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            System.out.println(value);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        System.out.println(<span class="string">"list="</span> + list.toString());</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">2</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">list=[1, 3, 4]</div></pre></td></tr></table></figure></p>
<h3 id="Map遍历过程中删除元素">Map遍历过程中删除元素</h3><p>正确做法的示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">    map.put(<span class="string">"1"</span>, <span class="string">"test1"</span>);</div><div class="line">    map.put(<span class="string">"2"</span>, <span class="string">"test2"</span>);</div><div class="line">    map.put(<span class="string">"3"</span>, <span class="string">"test3"</span>);</div><div class="line">    map.put(<span class="string">"4"</span>, <span class="string">"test4"</span>);</div><div class="line">    </div><div class="line">    <span class="comment">//完整遍历Map</span></div><div class="line">    <span class="keyword">for</span> (Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</div><div class="line">        System.out.printf(<span class="string">"key: %s value:%s\r\n"</span>, entry.getKey(), entry.getValue());</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//删除元素</span></div><div class="line">    Iterator&lt;Map.Entry&lt;String, String&gt;&gt; it = map.entrySet().iterator(); </div><div class="line">    <span class="keyword">while</span>(it.hasNext())</div><div class="line">    &#123; </div><div class="line">        Map.Entry&lt;String, String&gt; entry= it.next(); </div><div class="line">        String key= entry.getKey(); </div><div class="line">        <span class="keyword">int</span> k = Integer.parseInt(key);</div><div class="line">        <span class="keyword">if</span>(k%<span class="number">2</span>==<span class="number">1</span>)</div><div class="line">        &#123; </div><div class="line">            System.out.printf(<span class="string">"delete key:%s value:%s\r\n"</span>, key, entry.getValue());</div><div class="line">            it.remove(); </div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line">    </div><div class="line">    <span class="comment">//完整遍历Map</span></div><div class="line">    <span class="keyword">for</span> (Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</div><div class="line">        System.out.printf(<span class="string">"key: %s value:%s\r\n"</span>, entry.getKey(), entry.getValue());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">key: <span class="number">1</span> value:test1</div><div class="line">key: <span class="number">2</span> value:test2</div><div class="line">key: <span class="number">3</span> value:test3</div><div class="line">key: <span class="number">4</span> value:test4</div><div class="line">delete key:<span class="number">1</span> value:test1</div><div class="line">delete key:<span class="number">3</span> value:test3</div><div class="line">key: <span class="number">2</span> value:test2</div><div class="line">key: <span class="number">4</span> value:test4</div></pre></td></tr></table></figure></p>
<h3 id="注意">注意</h3><p>但对于iterator的remove()方法，也有需要我们注意的地方：</p>
<ol>
<li>每调用一次iterator.next()方法，只能调用一次remove()方法。</li>
<li>调用remove()方法前，必须调用过一次next()方法。</li>
</ol>
<p>JDK-API中对于remove()方法的描述：<br>void remove()从迭代器指向的集合中移除迭代器返回的最后一个元素（可选操作）。每次调用 next 只能调用一次此方法。如果进行迭代时用调用此方法之外的其他方式修改了该迭代器所指向的集合，则迭代器的行为是不明确的。<br>抛出：UnsupportedOperationException - 如果迭代器不支持 remove 操作。IllegalStateException - 如果尚未调用 next 方法，或者在上一次调用 next 方法之后已经调用了remove 方法。</p>
<h3 id="参考">参考</h3><p><a href="http://blog.csdn.net/longyulu/article/details/8315068" target="_blank" rel="external">遍历的时候删除List</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在日常的开发过程中，经常需要对List或Map里面的符合某种业务的数据进行删除，但是如果不了解里面的机制就容易掉入“陷阱”导致遗漏或者程序异常。<br>]]>
    
    </summary>
    
      <category term="java" scheme="https://wustrive2008.github.io/tags/java/"/>
    
      <category term="list" scheme="https://wustrive2008.github.io/tags/list/"/>
    
      <category term="map" scheme="https://wustrive2008.github.io/tags/map/"/>
    
      <category term="Arraylist" scheme="https://wustrive2008.github.io/tags/Arraylist/"/>
    
      <category term="删除" scheme="https://wustrive2008.github.io/tags/%E5%88%A0%E9%99%A4/"/>
    
      <category term="HashMap" scheme="https://wustrive2008.github.io/tags/HashMap/"/>
    
      <category term="java" scheme="https://wustrive2008.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java常见内存溢出(OOM)解决方案]]></title>
    <link href="https://wustrive2008.github.io/2015/09/01/java/Java%E5%B8%B8%E8%A7%81%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA(OOM)%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://wustrive2008.github.io/2015/09/01/java/Java常见内存溢出(OOM)解决方案/</id>
    <published>2015-09-01T12:55:06.000Z</published>
    <updated>2016-11-05T18:14:33.000Z</updated>
    <content type="html"><![CDATA[<h3 id="jvm内存区域">jvm内存区域</h3><ol>
<li>程序计数器<br> 一块很小的内存空间，作用是当前线程所执行的字节码的行号指示器。</li>
<li><p>java栈<br>与程序计数器一样，java栈（虚拟机栈）也是线程私有的，其生命周期与线程相同。通常存放基本数据类型，对象引用（一个指向对象起始地址的引用指针或一个代表对象的句柄），reeturnAddress类型（指向一条字节码指令的地址）</p>
<p>栈区域有两种异常类型：如果线程请求的栈深度大于虚拟机所允许的深度，将抛StrackOverflowError异常；如果虚拟机栈可以动态扩展（大部分虚拟机都可动态扩展），当扩展时无法申请到足够的内存时会抛出OutOfMemoryError异常。</p>
</li>
<li>本地方法栈<br>与虚拟机栈作用很相似，区别是虚拟机栈为虚拟机执行java方法服务，而本地方法栈则是为虚拟机用到的Native方法服务。和虚拟机栈一样可能抛出StackOverflowError和OutOfMemoryError异常。</li>
<li>java堆<br>java Heap是jvm所管理的内存中最大的区域。JavaHeap是被所有线程共享的一块内存区域，在虚拟机启动时创建。主要存放对象实例。JavaHeap是垃圾收集器管理的主要区域，其可细分为新生代和老年代。如果在堆中没有内存完成实例分配，并且也无法再扩展时，会抛出OutOfMemoryError异常。</li>
<li>方法区<br>与javaHeap一样是各个线程共享的内存区域，用于存放已被虚拟机加载的类信息、常量、静态变量、及时编译器编译后的代码等数据。当方法区无法满足内存分配的需求时，将抛出OutOfMemoryError异常。方法同时包含常听说的运行时常量池，用于存放编译期生成的各种字面量和符号引用。</li>
<li>直接内存<br>直接内存并不是虚拟机运行时数据区的一部分，也不是java虚拟机规范中定义的内存区域，是jvm外部的内存区域，这部分区域也可能导致OutOfMemoryError异常。</li>
</ol>
<h3 id="jvm参数">jvm参数</h3><p>-Xss（StackSpace）栈空间</p>
<p>-Xms ，-Xmx（heap memory space）堆空间：Heap是大家最为熟悉的区域，他是jvm用来存储对象实例的区域，Heap在32位的系统中最大为2G，其大小通过-Xms和-Xmx来控制，-Xms为jvm启动时申请的最小Heap内存，默认为物理内存的1/64，但小于1G，-Xmx为jvm可申请的最大的Heap内存，默认为物理内存的1/4,一般也小于1G，默认当空余堆内存小于40%时，jvm会最大Heap的大小到-Xmx指定大小，可通过-XX:MinHeapFreeRatio来指定这个比例，当空余堆内存大于70%时，JVM会将Heap的大小往-Xms指定的大小调整，可通过-XX:MaxHeapFreeRatio来指定这个比例，但通常为了避免频繁调整HeapSize的大小，将-Xms和-Xmx的值设为相同。</p>
<p>-XX:PermSize  -XX:MaxPermSize：方法区持久代大小：方法区域也是全局共享的，在一定的条件下它也会被 GC，当方法区域需要使用的内存超过其允许的大小时，会抛出 OutOfMemory的错误信息。</p>
<h3 id="常见内存溢出错误解决办法">常见内存溢出错误解决办法</h3><ol>
<li><p>OutOfMemoryError异常<br> 除了程序计数器外，虚拟机内存的其他几个运行时区域都有发生OutOfMemoryError(OOM)异常的可能，</p>
<p> Java Heap 溢出</p>
<p> 一般的异常信息：java.lang.OutOfMemoryError:Java heap spacess</p>
<p> java堆用于存储对象实例，我们只要不断的创建对象，并且保证GC Roots到对象之间有可达路径来避免垃圾回收机制清除这些对象，就会在对象数量达到最大堆容量限制后产生内存溢出异常。</p>
<p> 出现这种异常，一般手段是先通过内存映像分析工具(如Eclipse Memory Analyzer)对dump出来的堆转存快照进行分析，重点是确认内存中的对象是否是必要的，先分清是因为内存泄漏(Memory Leak)还是内存溢出(Memory Overflow)。</p>
<p> 如果是内存泄漏，可进一步通过工具查看泄漏对象到GC Roots的引用链。于是就能找到泄漏对象时通过怎样的路径与GC Roots相关联并导致垃圾收集器无法自动回收。</p>
<p> 如果不存在泄漏，那就应该检查虚拟机的参数(-Xmx与-Xms)的设置是否适当。</p>
</li>
<li><p>虚拟机栈和本地方法栈溢出<br> 如果线程请求的栈深度大于虚拟机所允许的最大深度，将抛出StackOverflowError异常。</p>
<p> 如果虚拟机在扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常</p>
<p> 这里需要注意当栈的大小越大可分配的线程数就越少。</p>
</li>
<li><p>运行时常量池溢出<br> 异常信息：java.lang.OutOfMemoryError:PermGen space</p>
<p> 如果要向运行时常量池中添加内容，最简单的做法就是使用String.intern()这个Native方法。该方法的作用是：如果池中已经包含一个等于此String的字符串，则返回代表池中这个字符串的String对象；否则，将此String对象包含的字符串添加到常量池中，并且返回此String对象的引用。由于常量池分配在方法区内，我们可以通过-XX:PermSize和-XX:MaxPermSize限制方法区的大小，从而间接限制其中常量池的容量。</p>
</li>
<li><p>方法区溢出<br>方法区用于存放Class的相关信息，如类名、访问修饰符、常量池、字段描述、方法描述等。</p>
<p> 异常信息：java.lang.OutOfMemoryError:PermGen space</p>
<p> 方法区溢出也是一种常见的内存溢出异常，一个类如果要被垃圾收集器回收，判定条件是很苛刻的。在经常动态生成大量Class的应用中，要特别注意这点。</p>
</li>
</ol>
<h3 id="参考">参考</h3><p>《深入理解java虚拟机》</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="jvm内存区域">jvm内存区域</h3><ol>
<li>程序计数器<br> 一块很小的内存空间，作用是当前线程所执行的字节码的行号指示器。</li>
<li><p>java栈<br>与程序计数器一样，java栈（虚拟机栈）也是线程私有的，其生命周期与线程相同。]]>
    </summary>
    
      <category term="java" scheme="https://wustrive2008.github.io/tags/java/"/>
    
      <category term="内存" scheme="https://wustrive2008.github.io/tags/%E5%86%85%E5%AD%98/"/>
    
      <category term="OOM" scheme="https://wustrive2008.github.io/tags/OOM/"/>
    
      <category term="内存溢出" scheme="https://wustrive2008.github.io/tags/%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA/"/>
    
      <category term="java" scheme="https://wustrive2008.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[面向对象设计的基本原则]]></title>
    <link href="https://wustrive2008.github.io/2015/08/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99/"/>
    <id>https://wustrive2008.github.io/2015/08/28/设计模式/面向对象设计的基本原则/</id>
    <published>2015-08-28T13:51:44.000Z</published>
    <updated>2016-11-05T18:14:33.000Z</updated>
    <content type="html"><![CDATA[<p>对于面向对象软件系统的设计而言，在支持可维护性的同时，提高系统的可复用性是一个至关重要的问题，如何同时提高一个软件系统的可维护性和可复用性是面向对象设计需要解决的核心问题之一。在面向对象设计中，可维护性的复用是以设计原则为基础的。每一个原则都蕴含一些面向对象设计的思想，可以从不同的角度提升一个软件结构的设计水平。<br><a id="more"></a></p>
<h3 id="单一职责原则">单一职责原则</h3><h4 id="定义">定义</h4><p>一个类只负责一个功能领域中的相应职责，或者可以定义为：就一个类而言，应该只有一个引起它变化的原因。</p>
<h4 id="理解">理解</h4><p>单一职责原则是实现高内聚、低耦合的指导方针，它是最简单但又最难运用的原则。<br>每一个职责都是变化的一个轴线，如果一个类有一个以上的职责，这些职责就耦合在了一起。这会导致脆弱的设计。当一个职责发生变化时，可能会影响其它的职责。另外，多个职责耦合在一起，会影响复用性。</p>
<h3 id="开闭原则">开闭原则</h3><h4 id="定义-1">定义</h4><p>一个软件实体应当对扩展开放，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展。</p>
<h4 id="理解-1">理解</h4><p>在互联网高速发展的今天，软件开发更需要适应随时变化的需求。当软件系统需要面对新的需求时，我们应该尽量保证系统的设计框架是稳定的。如果一个软件设计符合开闭原则，那么可以非常方便地对系统进行扩展，而且在扩展时无须修改现有代码，使得软件系统在拥有适应性和灵活性的同时具备较好的稳定性和延续性。</p>
<p>为了满足开闭原则，需要对系统进行抽象化设计，抽象化是开闭原则的关键。在Java、C#等编程语言中，可以为系统定义一个相对稳定的抽象层，而将不同的实现行为移至具体的实现层中完成。在很多面向对象编程语言中都提供了接口、抽象类等机制，可以通过它们定义系统的抽象层，再通过具体类来进行扩展。如果需要修改系统的行为，无须对抽象层进行任何改动，只需要增加新的具体类来实现新的业务功能即可，实现在不修改已有代码的基础上扩展系统的功能，达到开闭原则的要求。</p>
<h3 id="里氏代换原则">里氏代换原则</h3><h4 id="定义-2">定义</h4><p>所有引用基类（父类）的地方必须能透明地使用其子类的对象。</p>
<h4 id="理解-2">理解</h4><p>在软件中将一个基类对象替换成它的子类对象，程序将不会产生任何错误和异常，反过来则不成立，如果一个软件实体使用的是一个子类对象的话，那么它不一定能够使用基类对象。<br>在程序中尽量使用基类类型来对对象进行定义，而在运行时再确定其子类类型，用子类对象来替换父类对象。<br>在使用里氏代换原则时需要注意如下几个问题：</p>
<ol>
<li>子类的所有方法必须在父类中声明，或子类必须实现父类中声明的所有方法。根据里氏代换原则，为了保证系统的扩展性，在程序中通常使用父类来进行定义，如果一个方法只存在子类中，在父类中不提供相应的声明，则无法在以父类定义的对象中使用该方法。</li>
<li>我们在运用里氏代换原则时，尽量把父类设计为抽象类或者接口，让子类继承父类或实现父接口，并实现在父类中声明的方法，运行时，子类实例替换父类实例，我们可以很方便地扩展系统的功能，同时无须修改原有子类的代码，增加新的功能可以通过增加一个新的子类来实现。里氏代换原则是开闭原则的具体实现手段之一。</li>
<li>Java语言中，在编译阶段，Java编译器会检查一个程序是否符合里氏代换原则，这是一个与实现无关的、纯语法意义上的检查，但Java编译器的检查是有局限的。</li>
</ol>
<h3 id="接口隔离原则">接口隔离原则</h3><h4 id="定义-3">定义</h4><p>使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。</p>
<h4 id="理解-3">理解</h4><p>根据接口隔离原则，当一个接口太大时，我们需要将它分割成一些更细小的接口，使用该接口的客户端仅需知道与之相关的方法即可。每一个接口应该承担一种相对独立的角色，不干不该干的事，该干的事都要干。<br>这里的“接口”往往有两种不同的含义：一种是指一个类型所具有的方法特征的集合，仅仅是一种逻辑上的抽象；另外一种是指某种语言具体的“接口”定义，有严格的定义和结构，比如Java语言中的interface。对于这两种不同的含义，ISP的表达方式以及含义都有所不同：</p>
<ol>
<li><p>当把“接口”理解成一个类型所提供的所有方法特征的集合的时候，这就是一种逻辑上的概念，接口的划分将直接带来类型的划分。可以把接口理解成角色，一个接口只能代表一个角色，每个角色都有它特定的一个接口，此时，这个原则可以叫做“角色隔离原则”。</p>
</li>
<li><p>如果把“接口”理解成狭义的特定语言的接口，那么ISP表达的意思是指接口仅仅提供客户端需要的行为，客户端不需要的行为则隐藏起来，应当为客户端提供尽可能小的单独的接口，而不要提供大的总接口。在面向对象编程语言中，实现一个接口就需要实现该接口中定义的所有方法，因此大的总接口使用起来不一定很方便，为了使接口的职责单一，需要将大接口中的方法根据其职责不同分别放在不同的小接口中，以确保每个接口使用起来都较为方便，并都承担某一单一角色。接口应该尽量细化，同时接口中的方法应该尽量少，每个接口中只包含一个客户端（如子模块或业务逻辑类）所需的方法即可，这种机制也称为“定制服务”，即为不同的客户端提供宽窄不同的接口。</p>
</li>
</ol>
<h3 id="合成复用原则">合成复用原则</h3><h4 id="定义-4">定义</h4><p>尽量使用对象组合，而不是继承来达到复用的目的。</p>
<h4 id="理解-4">理解</h4><p>合成复用原则就是在一个新的对象里通过关联关系（包括组合关系和聚合关系）来使用一些已有的对象，使之成为新对象的一部分；新对象通过委派调用已有对象的方法达到复用功能的目的。简言之：复用时要尽量使用组合/聚合关系（关联关系），少用继承。</p>
<p>在面向对象设计中，可以通过两种方法在不同的环境中复用已有的设计和实现，即通过组合/聚合关系或通过继承，但首先应该考虑使用组合/聚合，组合/聚合可以使系统更加灵活，降低类与类之间的耦合度，一个类的变化对其他类造成的影响相对较少；其次才考虑继承，在使用继承时，需要严格遵循里氏代换原则，有效使用继承会有助于对问题的理解，降低复杂度，而滥用继承反而会增加系统构建和维护的难度以及系统的复杂度，因此需要慎重使用继承复用。</p>
<p>通过继承来进行复用的主要问题在于继承复用会破坏系统的封装性，因为继承会将基类的实现细节暴露给子类，由于基类的内部细节通常对子类来说是可见的，所以这种复用又称“白箱”复用，如果基类发生改变，那么子类的实现也不得不发生改变；从基类继承而来的实现是静态的，不可能在运行时发生改变，没有足够的灵活性；而且继承只能在有限的环境中使用（如类没有声明为不能被继承）</p>
<p>由于组合或聚合关系可以将已有的对象（也可称为成员对象）纳入到新对象中，使之成为新对象的一部分，因此新对象可以调用已有对象的功能，这样做可以使得成员对象的内部实现细节对于新对象不可见，所以这种复用又称为“黑箱”复用，相对继承关系而言，其耦合度相对较低，成员对象的变化对新对象的影响不大，可以在新对象中根据实际需要有选择性地调用成员对象的操作；合成复用可以在运行时动态进行，新对象可以动态地引用与成员对象类型相同的其他对象。</p>
<p>一般而言，如果两个类之间是“Has-A”的关系应使用组合或聚合，如果是“Is-A”关系可使用继承。”Is-A”是严格的分类学意义上的定义，意思是一个类是另一个类的”一种”；而”Has-A”则不同，它表示某一个角色具有某一项责任。</p>
<h3 id="迪米特法则">迪米特法则</h3><h4 id="定义-5">定义</h4><p>一个软件实体应当尽可能少地与其他实体发生相互作用。</p>
<h4 id="理解-5">理解</h4><p>如果一个系统符合迪米特法则，那么当其中某一个模块发生修改时，就会尽量少地影响其他模块，扩展会相对容易，这是对软件实体之间通信的限制，迪米特法则要求限制软件实体之间通信的宽度和深度。迪米特法则可降低系统的耦合度，使类与类之间保持松散的耦合关系。<br>迪米特法则还有几种定义形式，包括：不要和“陌生人”说话、只与你的直接朋友通信等，在迪米特法则中，对于一个对象，其朋友包括以下几类：<br>(1) 当前对象本身(this)；<br>(2) 以参数形式传入到当前对象方法中的对象；<br>(3) 当前对象的成员对象；<br>(4) 如果当前对象的成员对象是一个集合，那么集合中的元素也都是朋友；<br>(5) 当前对象所创建的对象。<br>任何一个对象，如果满足上面的条件之一，就是当前对象的“朋友”，否则就是“陌生人”。在应用迪米特法则时，一个对象只能与直接朋友发生交互，不要与“陌生人”发生直接交互，这样做可以降低系统的耦合度，一个对象的改变不会给太多其他对象带来影响。</p>
<p>迪米特法则要求我们在设计系统时，应该尽量减少对象之间的交互，如果两个对象之间不必彼此直接通信，那么这两个对象就不应当发生任何直接的相互作用，如果其中的一个对象需要调用另一个对象的某一个方法的话，可以通过第三者转发这个调用。简言之，就是通过引入一个合理的第三者来降低现有对象之间的耦合度。</p>
<p>在将迪米特法则运用到系统设计中时，要注意下面的几点：在类的划分上，应当尽量创建松耦合的类，类之间的耦合度越低，就越有利于复用，一个处在松耦合中的类一旦被修改，不会对关联的类造成太大波及；在类的结构设计上，每一个类都应当尽量降低其成员变量和成员函数的访问权限；在类的设计上，只要有可能，一个类型应当设计成不变类；在对其他类的引用上，一个对象对其他对象的引用应当降到最低。</p>
<h3 id="参考">参考</h3><p><a href="http://blog.csdn.net/LoveLion/article/category/738450" target="_blank" rel="external">刘伟技术博客</a></p>
<h3 id="捐赠">捐赠</h3><p>如何觉得本文章对你有帮助，欢迎捐赠</p>
<p><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexo%E6%94%AF%E4%BB%98%E5%AE%9D%E4%BB%98%E6%AC%BE%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%9C%80%E5%B0%8F.png" alt="捐赠"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>对于面向对象软件系统的设计而言，在支持可维护性的同时，提高系统的可复用性是一个至关重要的问题，如何同时提高一个软件系统的可维护性和可复用性是面向对象设计需要解决的核心问题之一。在面向对象设计中，可维护性的复用是以设计原则为基础的。每一个原则都蕴含一些面向对象设计的思想，可以从不同的角度提升一个软件结构的设计水平。<br>]]>
    
    </summary>
    
      <category term="oop" scheme="https://wustrive2008.github.io/tags/oop/"/>
    
      <category term="软件设计" scheme="https://wustrive2008.github.io/tags/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="设计模式" scheme="https://wustrive2008.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式" scheme="https://wustrive2008.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[nginx平滑升级方案]]></title>
    <link href="https://wustrive2008.github.io/2015/08/28/nginx/nginx%E5%B9%B3%E6%BB%91%E5%8D%87%E7%BA%A7%E6%96%B9%E6%A1%88/"/>
    <id>https://wustrive2008.github.io/2015/08/28/nginx/nginx平滑升级方案/</id>
    <published>2015-08-28T12:50:31.000Z</published>
    <updated>2016-11-05T18:14:33.000Z</updated>
    <content type="html"><![CDATA[<h4 id="下载版本">下载版本</h4><p>下载新版本的nginx源码包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://nginx.org/en/download.html</div></pre></td></tr></table></figure></p>
<h4 id="备份配置">备份配置</h4><p>备份旧nginx二进制文件和配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx_old</div><div class="line">cp /usr/local/nginx/conf/nginx.conf /usr/local/nginx/conf/nginx.conf.old</div></pre></td></tr></table></figure></p>
<h4 id="配置安装">配置安装</h4><p>解压下载的源码包， 执行configure选项配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./configure --with-http_ssl_module --with-openssl=/path/to/openssl_src</div><div class="line"></div><div class="line">make&amp;make install</div></pre></td></tr></table></figure></p>
<p>可以执行/usr/local/nginx/sbin/nginx -V命令查看以前的编译参数。</p>
<h4 id="新旧进程同时运行">新旧进程同时运行</h4><p>向旧的nginx主进程发送USR2信号，这会启动新的nginx主进程而保留旧的nginx主进程。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kill -USR2 `cat /usr/local/nginx/logs/nginx.pid`</div></pre></td></tr></table></figure></p>
<h4 id="杀掉旧的子进程">杀掉旧的子进程</h4><p>发送WINCH信号到旧的nginx主进程以杀掉旧的nginx子进程。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kill -WINCH pid</div></pre></td></tr></table></figure></p>
<h4 id="检测访问正常，退出旧的进程">检测访问正常，退出旧的进程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kill -QUIT pid</div></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="下载版本">下载版本</h4><p>下载新版本的nginx源码包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pr]]>
    </summary>
    
      <category term="linux" scheme="https://wustrive2008.github.io/tags/linux/"/>
    
      <category term="nginx" scheme="https://wustrive2008.github.io/tags/nginx/"/>
    
      <category term="升级" scheme="https://wustrive2008.github.io/tags/%E5%8D%87%E7%BA%A7/"/>
    
      <category term="nginx" scheme="https://wustrive2008.github.io/categories/nginx/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[http协议基础之报文]]></title>
    <link href="https://wustrive2008.github.io/2015/08/26/http%E5%8D%8F%E8%AE%AE/http%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%8A%A5%E6%96%87/"/>
    <id>https://wustrive2008.github.io/2015/08/26/http协议/http协议基础之报文/</id>
    <published>2015-08-26T15:02:25.000Z</published>
    <updated>2016-11-05T18:14:33.000Z</updated>
    <content type="html"><![CDATA[<h2 id="http协议之报文">http协议之报文</h2><h3 id="报文的语法">报文的语法</h3><p>请求报文：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;method&gt; &lt;request-URL&gt; &lt;version&gt;</div><div class="line">&lt;headers&gt;</div><div class="line"></div><div class="line">&lt;entity-body&gt;</div></pre></td></tr></table></figure></p>
<p>响应报文：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;version&gt; &lt;status&gt; &lt;reason-phrase&gt;</div><div class="line">&lt;headers&gt;</div><div class="line"></div><div class="line">&lt;entity-body&gt;</div></pre></td></tr></table></figure></p>
<p>说明：</p>
<ul>
<li>方法(method)<br>  客户端希望服务器对资源执行的动作，常见的有GET,POST等</li>
<li>请求URL<br>  请求资源的绝对路径或相对路径</li>
<li>版本<br>  格式：HTTP/<major>.<minor></minor></major></li>
<li>状态码<br>  表示服务器处理的结果，常见的有200,404,400,415,500,502等</li>
<li>原因短语<br>  对状态码的简单描述，如OK</li>
<li>首部(headers)<br>  可以有零个或多个首部，每个首部都包含一个名字，后面跟着一个冒号(:),然后是一个可选的空格，接着是一个值，最后是一个CRLF</li>
<li>实体的主体部分(entity-body)<br>  实体的主体部分包含一个由任意数据组成的数据块</li>
</ul>
<h3 id="首部">首部</h3><h4 id="通用首部">通用首部</h4><p>客户端和服务器端都可以使用的首部，如Date<br>Date: May, 4 Oct 2015 02:15:10 GMT</p>
<h4 id="请求首部">请求首部</h4><p>请求报文所特有的首部，为服务器提供一些额外的信息，如Accept首部用来告知服务器客户端会接受与其请求相符的任意媒体类型：<br>Accept: */*</p>
<h5 id="Accept首部">Accept首部</h5><p>Accept首部为客户端提供了一种将其喜好和能力告知服务器的方式，包含它们想要什么，可以使用什么，以及最重要的，它们不想要什么。这样，服务器就可以根据这些额外信息，对要发送的内容做出更明智的决定。<br>Accept首部包括：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Accept                  告诉服务器能发送哪些媒体类型</div><div class="line">Accept-Charset          告诉服务器能发送哪些字符集</div><div class="line">Accept-Encoding         告诉服务器能发送哪些编码方式</div><div class="line">Accept-Language         告诉服务器能发送哪些语言</div><div class="line">TE                      告诉服务器可以使用哪些扩展传输编码</div></pre></td></tr></table></figure></p>
<h5 id="条件请求首部">条件请求首部</h5><p>客户端有时希望为请求加上某些限制。比如，如果客户端已经有了一份文档副本，就希望只在服务器上的文档如客户端拥有的副本有所区别时，才请求服务器传输文档，这时就可以使用条件请求首部：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Expect                  允许客户端列出某请求所要求的服务器行为</div><div class="line">If-Match                如果实体标记与文档当前的实体标记相匹配，就获取这份文档</div><div class="line">If-Modified-Since       除非在某个指定日期之后资源被修改过，否则就限制这个请求</div><div class="line">if-None-Match           如果提供的实体标记与当前文档的实体标记不相符，获取文档</div><div class="line">If-Range                允许对文档的某个范围进行条件请求</div><div class="line">If-Unmodified-since     除非在某个指定日期之后资源被未修改过,否则就限制这个请求</div><div class="line">Range                   如果服务器支持范围请求,就请求资源的指定范围</div></pre></td></tr></table></figure></p>
<h5 id="安全请求首部">安全请求首部</h5><p>服务器可以对客户端进行简单的身份认证<br>常见的安全请求首部有：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Authorization            包含了客户端提供给服务器，以便对其自身进行认证的数据</div><div class="line">Cookie                   客户端向服务器传送一个令牌</div></pre></td></tr></table></figure></p>
<h4 id="响应首部">响应首部</h4><p>服务器为客户端提供一些额外信息<br>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Age                         响应持续时间</div><div class="line">Public                      服务器为其资源支持的请求方法列表</div><div class="line">Retry-After                 如果资源不可用，在此日期或时间重试</div><div class="line">Server                      服务器应用程序的软件名称和版本</div></pre></td></tr></table></figure></p>
<h4 id="实体首部">实体首部</h4><p>实体首部指的是用于应对实体主体部分的首部。比如，可以用实体首部来说明实体主体部分的数据类型。<br>Content-Type：text/html; charset=utf-8</p>
<h5 id="内容首部">内容首部</h5><p>提供与实体内容有关的特定信息，说明了其类型，尺寸以及处理它所需的其他有用信息<br>如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Content-Base                    解析相对URL时使用的基础URL</div><div class="line">Content-Encoding                对主体执行的任意编码方式</div><div class="line">Content-Language                理解主体时最适宜使用的自然语言</div><div class="line">Content-Length                  主体的长度或尺寸</div><div class="line">Content-Location                资源实际所处的位置</div><div class="line">Content-MD5                     主体的MD5校验和</div><div class="line">Content-Range                   在整个资源中此实体表示的字节范围</div><div class="line">Content-Type                    这个主体的对象类型</div></pre></td></tr></table></figure></p>
<h4 id="扩展首部">扩展首部</h4><p>非标准的自定义首部</p>
<h3 id="方法">方法</h3><h4 id="Get方法_Head方法">Get方法 Head方法</h4><p>get方法用于请求服务器发送某个资源<br>Head方法与Get方法类似，但服务器在响应中只返回首部。不会返回实体的主体部分，这就允许客户端在未获取实际资源的情况下，对资源首部进行检查，可以：</p>
<ul>
<li>在获取资源的情况下了解资源的情况</li>
<li>通过查看响应中的状态码，看看某个对象是否存在</li>
<li>通过查看首部，测试资源是否被修改</li>
</ul>
<h4 id="PUT方法">PUT方法</h4><p>用于向服务器写入文档，在实际应用中很少用，多用POST实现PUT的功能</p>
<h4 id="POST方法">POST方法</h4><p>向服务器输入数据，如提交表单数据</p>
<h4 id="TRACE方法">TRACE方法</h4><p>发起一个”环回”诊断，行程最后一站的服务器会发送一个TRACE响应，并在响应主体中携带收到的原始报文</p>
<h4 id="OPTIONS方法">OPTIONS方法</h4><p>请求服务器告知其支持的各种功能，可以询问服务器支持哪些方法。<br>服务器的响应如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Allow: GET, POST, PUT</div><div class="line">Content-Length: 0</div></pre></td></tr></table></figure></p>
<h3 id="状态码">状态码</h3><h4 id="100~199信息性状态码">100~199信息性状态码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">100     Continue        说明收到了请求的初始部分，请客户端继续。发送了这个状态码之后，服务器收到请求之后必须进行响应</div><div class="line">101     Switching protocols     说明服务器正在根据客户端的指定，将协议切换成Update首部所列的协议</div></pre></td></tr></table></figure>
<h5 id="客户端与100_Continue">客户端与100 Continue</h5><p>如果客户端向服务器发送一个实体，并且愿意在发送实体之前等待100 Continue响应，那么客户端就要发送一个携带了值为100 Continue的Expect请求首部。如果客户端没有发送实体，就不应该发送100 Continue Expect首部，这样会使服务器误以为客户端要发送一个实体。</p>
<p>客户端发送了100 Continue的Expect首部后不应该永远在那等待服务器的响应。超过一定时间后，应该直接发送实体。</p>
<h5 id="服务器与100_Continue">服务器与100 Continue</h5><p>如果服务器收到一个带有只为100 Continue的Expect首部请求，会用100 Continue响应或一条错误码来进行响应。服务器永远也不应该向没有发送100 Continue期望的客户端发送100 Continue 状态码</p>
<p>如果处于某种原因，服务器在有机会发送100 Continue之前就收到了部分或全部实体，说明客户端已经决定继续发送实体了，这时，服务器不需要发送这个状态码了。</p>
<h5 id="代理与100_Continue">代理与100 Continue</h5><p>如果代理从客户端收到了一条带有100 Continue期望的请求，如果下一跳服务器是HTTP/1.1兼容的，或者不知道下一跳服务器与哪个版本兼容，应该将Expect首部转发到下一跳服务器。如果知道下一跳服务器与HTTP/1.1之前的版本兼容，就应该以417 Expectation Failed错误进行响应。</p>
<h4 id="200~299_成功状态码">200~299 成功状态码</h4><p>200 OK<br>201 Create<br>202 Accepted</p>
<h4 id="300~399_重定向状态码">300~399 重定向状态码</h4><p>304 Not Modified</p>
<h4 id="400~499_客户端错误状态码">400~499 客户端错误状态码</h4><p>400 Bad Request     请求错误<br>401 Unauthorized    需要认证或认证错误<br>403 Forbidden       请求被拒绝，有可能是资源权限问题<br>404 Not Found       未找到资源<br>405 Method Not Allowed  不支持的方法<br>408 Request Timeout     请求超时</p>
<h4 id="500~599_服务器错误状态码">500~599 服务器错误状态码</h4><p>500 Internal Sever Error    服务器内部错误<br>501 Not Implemented     超出服务器能力范围<br>502 Bad Gateway         网关错误，一般是代理服务器找不到下一条链路<br>503 Sevice Unavailable  暂时无法为请求提供你服务<br>504 Gateway Timeout     响应超时<br>505 HTTP Version Not Supported  不支持的协议版本</p>
<h3 id="捐赠">捐赠</h3><p>如何觉得本文章对你有帮助，欢迎捐赠</p>
<p><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexo%E6%94%AF%E4%BB%98%E5%AE%9D%E4%BB%98%E6%AC%BE%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%9C%80%E5%B0%8F.png" alt="捐赠"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="http协议之报文">http协议之报文</h2><h3 id="报文的语法">报文的语法</h3><p>请求报文：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><di]]>
    </summary>
    
      <category term="http" scheme="https://wustrive2008.github.io/tags/http/"/>
    
      <category term="报文" scheme="https://wustrive2008.github.io/tags/%E6%8A%A5%E6%96%87/"/>
    
      <category term="方法" scheme="https://wustrive2008.github.io/tags/%E6%96%B9%E6%B3%95/"/>
    
      <category term="http协议" scheme="https://wustrive2008.github.io/categories/http%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开放接口的安全验证方案(AES+RSA)]]></title>
    <link href="https://wustrive2008.github.io/2015/08/21/%E5%BC%80%E6%94%BE%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%AE%89%E5%85%A8%E9%AA%8C%E8%AF%81%E6%96%B9%E6%A1%88(AES+RSA)/"/>
    <id>https://wustrive2008.github.io/2015/08/21/开放接口的安全验证方案(AES+RSA)/</id>
    <published>2015-08-21T15:39:13.000Z</published>
    <updated>2016-11-05T18:14:33.000Z</updated>
    <content type="html"><![CDATA[<p>随着密码分析技术的提高，新的数据加密标准AES取代了过时的DES。文章在阐述AES/RSA加密算法的基础上，分别给出了利用AES/RSA实现客户端/服务器端网络数据传输的加密流程。最后在比较AES算法和RSA算法基础上，将AES与RSA相结合提出一种新的数据加密方案。<br><a id="more"></a></p>
<h3 id="基本需求及概念">基本需求及概念</h3><p>随着Internet网的广泛应用，信息安全问题日益突出，以数据加密技术为核心的信息安全技术也得到了极大的发展。目前的数据加密技术根据加密密钥类型可分私钥加密（对称加密）系统和公钥加密（非对称加密）系统[1]。对称加密算法是较传统的加密体制，通信双方在加/解密过程中使用他们共享的单一密钥，鉴于其算法简单和加密速度快的优点，目前仍然是主流的密码体制之一。最常用的对称密码算法是数据加密标准（DES）算法，但是由于DES密钥长度较短，已经不适合当今分布式开放网络对数据加密安全性的要求。最后，一种新的基于Rijndael算法对称高级数据加密标准AES取代了数据加密标准DES。非对称加密由于加/解密钥不同（公钥加密，私钥解密），密钥管理简单，也得到广泛应用。RSA是非对称加密系统最著名的公钥密码算法。</p>
<h3 id="AES算法">AES算法</h3><h4 id="基本原理及算法流程">基本原理及算法流程</h4><p>美国国家标准和技术研究所（NIST）经过三轮候选算法筛选，从众多的分组密码中选中Rijndael算法作为高级加密标准（AES）。Rijndael密码是一个迭代型分组密码，分组长度和密码长度都是可变的，分组长度和密码长度可以独立的指定为128比特，192比特或者256比特。AES的加密算法的数据处理单位是字节，128位的比特信息被分成16个字节，按顺序复制到一个4*4的矩阵中，称为状态（state），AES的所有变换都是基于状态矩阵的变换。<br>用Nr表示对一个数据分组加密的轮数（加密轮数与密钥长度的关系如表1所示）。在轮函数的每一轮迭代中，包括四步变换，分别是字节代换运算(ByteSub())、行变换(ShiftRows())、列混合(MixColumns())以及轮密钥的添加变换AddRoundKey()[3]，其作用就是通过重复简单的非线形变换、混合函数变换，将字节代换运算产生的非线性扩散，达到充分的混合，在每轮迭代中引入不同的密钥，从而实现加密的有效性。<br>表1 是三种不同类型的AES加密密钥分组大小与相应的加密轮数的对照表。加密开始时，输入分组的各字节按表2 的方式装入矩阵state中。如输入ABCDEFGHIJKLMNOP，则输入块影射到如表2的状态矩阵中。<br>表1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">|AES类型| 密钥长度 | 分组长度 | 加密轮数|</div><div class="line">|AES-128|  4字     |   4字    |   10    |</div><div class="line">|AES-192|  6字     |   4字    |   12    |</div><div class="line">|AES-256|  8字     |   4字    |   14    |</div></pre></td></tr></table></figure></p>
<p>表2：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">| A | E | I | M |</div><div class="line">| B | F | J | N |</div><div class="line">| C | G | K | O |</div><div class="line">| D | H | L | P |</div></pre></td></tr></table></figure></p>
<ol>
<li>字节代换运算(ByteSub())<br> 字节代换运算是一个可逆的非线形字节代换操作，对分组中的每个字节进行，对字节的操作遵循一个代换表，即S盒。S盒由有限域 GF（28）上的乘法取逆和GF（2）上的仿射变换两步组成。</li>
<li>行变换ShiftRows()<br> 行变换是一种线性变换，其目的就是使密码信息达到充分的混乱，提高非线形度。行变换对状态的每行以字节为单位进行循环右移，移动字节数根据行数来确定，第0行不发生偏移，第一行循环右移一个字节，第二行移两个，依次类推。</li>
<li>列混合变换MixColumns()<br> 列变换就是从状态中取出一列，表示成多项式的形式后，用它乘以一个固定的多项式a(x)，然后将所得结果进行取模运算，模值为 x4+1。其中a(x)={03}x3+{02}x2+{01}x+{02},<br> 这个多项式与x4+1互质，因此是可逆的。列混合变换的算术表达式为：s’(x)= a(x) s(x)，其中， s(x)表示状态的列多项式。</li>
<li>轮密钥的添加变换AddRoundKey()<br> 在这个操作中，轮密钥被简单地异或到状态中，轮密钥根据密钥表获得，其长度等于数据块的长度Nb。</li>
</ol>
<h4 id="AES算法流程">AES算法流程</h4><p>对于发送方，它首先创建一个AES私钥，并用口令对这个私钥进行加密。然后把用口令加密后的AES密钥通过Internet发送到接收方。发送方解密这个私钥，并用此私钥加密明文得到密文，密文和加密后的AES密钥一起通过Internet发送到接收方。接收方收到后再用口令对加密密钥进行解密得到AES密钥，最后用解密后的密钥把收到的密文解密成明文。图1中是这个过程的实现流程。<br>图1：<br><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexoAES流程.png" alt=""></p>
<h3 id="RSA算法">RSA算法</h3><h4 id="基本原理及流程">基本原理及流程</h4><p>RSA是在1977年发明RSA密码系统的三个人的名字的首字母的缩写，他们是：Ron Rivest、Adi Shamir和Leonard Adleman。它是第一个公钥加密算法，在很多密码协议中都有应用，如SSL和S/MIME。RSA算法是基于大质数的因数分解的公匙体系。简单的讲，就是两个很大的质数，一个作为公钥，另一个作为私钥，如用其中一个加密，则用另一个解密。密钥长度从40到2048位可变，密钥越长，加密效果越好，但加密解密的开销也大。RSA算法可简单描述如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">公开密钥：n=pq，（p，q为两个不同的很大的质数，p和q必须保密）</div><div class="line">将(p-1)和(q-1)相乘得到φ(n)</div><div class="line">选择一个整数e (1&lt;e&lt;φ(n))与φ(n)互质</div><div class="line">秘密密钥：d=e-1modφ(n)，即计算一个数字d，使得它满足公式 de=1 modφ(n)</div><div class="line">加密：c=mc(mod n) </div><div class="line">解密：m=cd(mod n)，m为明文，c为密文。</div></pre></td></tr></table></figure></p>
<h4 id="RSA算法实现流程">RSA算法实现流程</h4><p> 首先，接收方创建RSA密匙对，即一个公钥和一个私钥，公钥被发送到发送方,私钥则被保存在接收方。发送方在接收到这个公钥后,用该公钥对明文进行加密得到密文，然后把密文通过网络传输给接收方。接收方在收到它们后，用RSA私钥对收到的密文进行解密，最后得到明文。图2是整个过程的实现流程。<br>图2：<br><img src="http://7xifb5.com1.z0.glb.clouddn.com/RSA流程.png" alt=""></p>
<h3 id="AES与RSA相结合数据加密方案">AES与RSA相结合数据加密方案</h3><p>RSA算法是公开密钥系统的代表，其安全性建立在具有大素数因子的合数，其因子分解困难这一法则之上的。Rijndael算法作为新一代的高级加密标准，运行时不需要计算机有非常高的处理能力和大的内存，操作可以很容易的抵御时间和空间的攻击，在不同的运行环境下始终能保持良好的性能。这使AES将安全，高效，性能，方便，灵活性集于一体，理应成为网络数据加密的首选。相比较，因为AES密钥的长度最长只有256比特，可以利用软件和硬件实现高速处理，而RSA算法需要进行大整数的乘幂和求模等多倍字长处理，处理速度明显慢于AES[5]；所以AES算法加解密处理效率明显高于RSA算法。在密钥管理方面，因为AES算法要求在通信前对密钥进行秘密分配，解密的私钥必须通过网络传送至加密数据接收方，而RSA采用公钥加密，私钥解密（或私钥加密，公钥解密），加解密过程中不必网络传输保密的密钥；所以RSA算法密钥管理要明显优于AES算法。<br>从上面比较得知，由于RSA加解密速度慢，不适合大量数据文件加密，因此在网络中完全用公开密码体制传输机密信息是没有必要，也是不太现实的。AES加密速度很快，但是在网络传输过程中如何安全管理AES密钥是保证AES加密安全的重要环节。这样在传送机密信息的双方，如果使用AES对称密码体制对传输数据加密，同时使用RSA不对称密码体制来传送AES的密钥，就可以综合发挥AES和RSA的优点同时避免它们缺点来实现一种新的数据加密方案。加解密实现流程如图(3)。<br>图3：<br><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexoAES+RSA流程.png" alt=""></p>
<p>具体过程是先由接收方创建RSA密钥对，接收方通过Internet发送RSA公钥到发送方，同时保存RSA私钥。而发送方创建AES密钥，并用该AES密钥加密待传送的明文数据，同时用接受的RSA公钥加密AES密钥，最后把用RSA公钥加密后的AES密钥同密文一起通过Internet传输发送到接收方。当接收方收到这个被加密的AES密钥和密文后，首先调用接收方保存的RSA私钥，并用该私钥解密加密的AES密钥，得到AES密钥。最后用该AES密钥解密密文得到明文。</p>
<h3 id="AES+RSA结合最佳实践">AES+RSA结合最佳实践</h3><h4 id="基本要求">基本要求</h4><ol>
<li>保证传输数据的安全性</li>
<li>保证数据的完整性</li>
<li>能够验证客户端的身份</li>
</ol>
<h4 id="基本流程">基本流程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">请求：</div><div class="line">1. 服务器端(server)和客户端(client)分别生成自己的密钥对</div><div class="line">2. server和client分别交换自己的公钥</div><div class="line">3. client生成AES密钥(aesKey)</div><div class="line">4. client使用自己的RSA私钥(privateKey)对请求明文数据(params)进行数字签名</div><div class="line">5. 将签名加入到请求参数中，然后转换为json格式</div><div class="line">6. client使用aesKey对json数据进行加密得到密文(data)</div><div class="line">7. client使用sever的RSA公钥对aesKey进行加密(encryptkey)</div><div class="line">8. 分别将data和encryptkey作为参数传输给服务器端</div><div class="line"></div><div class="line">服务器端进行请求响应时将上面流程反过来即可</div></pre></td></tr></table></figure>
<h4 id="java版示例">java版示例</h4><p><a href="https://github.com/wustrive2008/aes-rsa-java" target="_blank" rel="external">AES+RSA双重加密Java示例</a></p>
<h3 id="参考：">参考：</h3><ol>
<li>RSA密钥生成方法参考：<br><a href="https://cshall.alipay.com/support/help_detail.htm?help_id=397433&amp;keyword=%C3%DC%D4%BF%B6%D4&amp;sToken=s-39515fca081c4ba4bad6a8eceac4bf89&amp;from=search&amp;flag=0" target="_blank" rel="external">如何生成RSA密钥</a></li>
</ol>
<h3 id="捐赠">捐赠</h3><p>如何觉得本文章对你有帮助，欢迎捐赠</p>
<p><img src="http://7xifb5.com1.z0.glb.clouddn.com/wustrive-hexo%E6%94%AF%E4%BB%98%E5%AE%9D%E4%BB%98%E6%AC%BE%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%9C%80%E5%B0%8F.png" alt="捐赠"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>随着密码分析技术的提高，新的数据加密标准AES取代了过时的DES。文章在阐述AES/RSA加密算法的基础上，分别给出了利用AES/RSA实现客户端/服务器端网络数据传输的加密流程。最后在比较AES算法和RSA算法基础上，将AES与RSA相结合提出一种新的数据加密方案。<br>]]>
    
    </summary>
    
      <category term="网络安全" scheme="https://wustrive2008.github.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
      <category term="开发接口" scheme="https://wustrive2008.github.io/tags/%E5%BC%80%E5%8F%91%E6%8E%A5%E5%8F%A3/"/>
    
      <category term="安全验证" scheme="https://wustrive2008.github.io/tags/%E5%AE%89%E5%85%A8%E9%AA%8C%E8%AF%81/"/>
    
      <category term="java" scheme="https://wustrive2008.github.io/tags/java/"/>
    
      <category term="aes" scheme="https://wustrive2008.github.io/tags/aes/"/>
    
      <category term="rsa" scheme="https://wustrive2008.github.io/tags/rsa/"/>
    
      <category term="网络安全" scheme="https://wustrive2008.github.io/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[许三观卖血记]]></title>
    <link href="https://wustrive2008.github.io/2015/08/16/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E8%AE%B8%E4%B8%89%E8%A7%82%E5%8D%96%E8%A1%80%E8%AE%B0/"/>
    <id>https://wustrive2008.github.io/2015/08/16/读书笔记/读书笔记-许三观卖血记/</id>
    <published>2015-08-16T14:34:27.000Z</published>
    <updated>2016-11-05T18:14:33.000Z</updated>
    <content type="html"><![CDATA[<h3 id="书籍概要">书籍概要</h3><h5 id="书名">书名</h5><p>《许三观卖血记》</p>
<h5 id="作者">作者</h5><p>余华</p>
<h5 id="作者简介">作者简介</h5><p>余华，1960年4月3日生于浙江杭州，3岁时随父母迁至海盐，在海盐读完小学和中学。曾经从事过5年的牙医工作，1983年开始写作，已经完成长篇小说4部，中短篇小说集6部，随笔集3部，其作品被翻译成二十多种文字，在近三十个国家出版。曾获意大利格林扎纳•卡佛文学奖（1998年）、法国文学和艺术骑士勋章（2004年）、中华图书特殊贡献奖（2005年）、法国国际信使外国小说奖（2008年）等。</p>
<h5 id="阅读方式">阅读方式</h5><p>作家出版社</p>
<h5 id="阅读日期">阅读日期</h5><p>2014.3</p>
<h3 id="书籍简介">书籍简介</h3><p>《许三观卖血记》是余华1995年创作的一部长篇小说。《许三观卖血记》以博大的温情描绘了磨难中的人生，以激烈的故事形式表达了人在面对厄运时求生的欲望。小说讲述了许三观靠着卖血渡过了人生的一个个难关，战胜了命运强加给他的惊涛骇浪，而当他老了，知道自己的血再也没有人要时，精神却崩溃了。</p>
<h3 id="摘录笔记">摘录笔记</h3><ol>
<li>事情都是被逼出来的，人只有被逼上绝路了，才会有办法，没上绝路以前，不是没想到办法，就是想到了也不知道该不该去做</li>
<li>在时代和个人的种种不幸中，我却看到了生活的种种幸福。酸甜苦辣是食物的味道，喜怒哀乐是生活的味道。</li>
<li>爱不是我多有钱，有多么大的智慧和成就，而是我把一切给你。关键时刻，替你挡风遮雨。</li>
<li>生活中的各种事情带来的味道总是相伴而至，有时这个味道重点，有时那个味道重点，这样才真实。质朴之人，秉持真性情之人，不是一定什么都看得开，不是一定什么都做得对，不是一定什么问题都能解决，但是生活在他们眼里，就像他们的性情一样真，他们的生活中有所守护，有所坚持，有所为，有所不为，他们的生活即使无奈，但总是有一种可以用来面对无奈的幽默，生活的种种不幸中总会弥漫人性的暖意。</li>
<li>人活一辈子，谁会没病没灾。谁没个三长两短？遇到那些倒霉的事，有准备总被没准备好。聪明人做事都给自己留一条退路。</li>
<li>“也不能说力气比你多，我们比你们城里人舍得花力气，我们娶女人、盖屋子都是靠卖血挣的钱，这田地里挣的钱最多也就是不让我们饿死。”</li>
<li>我今天来是要对你们说，我今天才知道我前世还烧了香，让我今生嫁给了许三观，你们不知道许三观有多好，他的好几天几夜都说不完，别的我都不说了，我就说说许三观卖血的事，许三观为了我，为了一乐，为了这个家，今天都到医院卖血啦，你们想想，卖血是丢命的，就是不丢命，也会头晕，也会眼花，也会没力气。许三观为了我，为了一乐，为了我们这个家，是命都不要了……</li>
<li>一乐看到了胜利饭店明亮的灯光，他小心翼翼的问许三观：＂爹，你是不是要带我去吃面条？＂许三观不再骂一乐了，他突然温和地说道＂是的。＂</li>
<li>许三观说到这里休息了一会儿，然后又说：“我快活到五十岁了，做人是什么滋味，我也全知道了，我就是死了也可以说是赚了。我儿子才只有二十一岁，他还没有好好做人呢，他连个女人都没有娶，他还没有做过人，他要是死了，那就太吃亏了……”</li>
<li>伟大的父爱， 让我记忆深刻的就是他一路卖血到医院给儿子治病。 为了生活，做父母的可以付出这么多，让我们情何以堪</li>
</ol>
<h3 id="心得笔记">心得笔记</h3><p>[转] <a href="http://book.douban.com/review/1016574/" target="_blank" rel="external">冷冷地读余华</a></p>
<p>余华作为当代中国一位先锋作家，从1984年发表第一篇小说以来，其作品的风格、主题思想和叙述方式都有较明显的阶段性变化。《许三观卖血记》是他的第三部长篇小说，也是他认为自己首次完全让人物自己开口说话创作出来的小说，而且通过这部作品的创作，他对掌握人物对话有了更多的信心。<br>　　<br>　　本文将着重从写作手法去分析这部作品，包括作者对历史背景的处理、人物内心的刻画和体裁结构的选取这三个方面。<br>　　<br>　　一、对历史背景的处理<br>　　小说开篇就清楚的介绍了主角许三观的身份“城里丝厂的送茧工”，这几个字给出的信息包括：其一，许三观是南方某地的城里人；其二，他是一个艰苦的工薪阶层。关于空间的设定，从后文许三观一路往上海去的途中经过的地方可以知道，他生活的地方是江南的一个小城镇，不同于在乡村生活的他的祖辈们。<br>　　<br>　　空间基本确定了，时间呢？小说从许三观20岁左右开始一直写到他的儿子们差不多30岁亦即许三观本人50多岁快60岁为止，前后大概一共40年。经历的历史事件按照时间顺序有这样几件：<br>　　1。1958年的人民公社、大跃进和大炼钢铁。<br>　　2。接下来一两年的天灾人祸导致的全国性饥荒。<br>　　3。文化大革命。城市青年去农村上山下乡。<br>　　<br>　　如何处理这些在中国现代历史留下深深烙印的事件，差不多是每部涉及到这段时间的作品必然会遇到的共同难题。文革之后与经济上的开放相伴的是思想上的开放，从七八十年代开始相继出现的文学中“伤痕文学”、“反思文学”以及之后的“先锋文学”对那段重要的历史各有不同的处理方法。余华八十年代的作品多是不动声色冷眼旁观的揭发暴露疯狂年代的痛苦和丑恶，而在《许三观卖血记》中，我们可以看到与大多数作品不一样的处理方法。作者退出凌驾在作品之上的抽象叙述角度，让人物自己讲述他们亲身经历的具体事情和见闻，并且是用一种看似荒诞的逻辑将人物的经历与历史相关联，使得洪大的历史潮流微观化，真正变成人物生活的一部分。这样提炼出来的人物与历史的关系能够超越时间和空间的限制，从而使得文本能够让自身经历各不相同的读者产生本质上相通的共鸣。不仅《许三观卖血记》如此，之前的《活着》也用相近的方法处理了作为人物命运一个因素的历史，可以看到，这样的作品能够很好地被生活经历文化背景相差悬殊的读者群所接受，从《活着》的多个外文版出版和获得意大利格林扎纳•卡佛文学奖可见一斑。回到《许三观卖血记》，文中对历史的处理举例如下：<br>　　<br>　　1。第十八章整个章节用的都是“许三观对许玉兰说：‘……’”这样的句式，让许三观一股脑儿的把自己所见所闻所思考的有关人民公社、大跃进和大炼钢的内容都说出来。这样一连串的排比和铺陈，把曾经的伤痛用诙谐和荒诞一一化解正是余华特有的风格。<br>　　<br>　　2。许三观用嘴给全家人炒菜这一情节是大饥荒描述的高潮部分。一家人每日喝越来越稀的粥，饿得没力气就长时间躺在床上以减少体力消耗。许三观生日那天，他们喝到放了糖的玉米糊，孩子们却吃不出甜味，许三观说“这苦日子什么时候才能完？小崽子们苦得忘记什么是甜，吃了甜的都想不起来这就是糖。”这样一句感慨举重若轻的道出了极度饥饿年代的人们，物质生活匮乏到忘记了甜的滋味。<br>　　<br>　　3。对文化大革命的理解，作者又是让许三观自己说出来，“你知道吗？为什么工厂停工了、商店关门了、学校不上课、你也用不着去炸抽条了？为什么有人被吊在了树上、有人被关进了牛棚、有人被活活打死？你知道吗？为什么毛主席一说话，就有人把他的话编成了歌，就有人把他的话刷到了墙上、刷到了地上、刷到了汽车上和轮船上、床单上和枕巾上、杯子上和锅上，连厕所的墙上和痰盂上都有。毛主席的名字为什么会这么长予你听着：伟大的领袖伟大的导师伟大的统帅伟大的舵手毛主席万岁万岁万万岁。一共有三十个字，这些都要一口气念下来，中间不能换气。你知道这是为什么？因为文化大革命来了。”这样的一番阐释从许三观口中说出来，既符合人物的身份和层次，又启发读者自己的思考。许三观的逻辑和认识水平并不一定就是正确的，但那是真正身处其中的人物会说出的话，这样的话让读者信服的同时也给读者自己想象和思考的空间：文化大革命不只是发生在中国的那一场灾难，而是整个人类都会面临的一种变态与暴力的可能，因而许三观们面对的不仅仅是他个人的命运，而是有可能发生在每个人身上的命运。<br>　　<br>　　至于知识青年上山下乡，更是用极其简练又充满讽刺意味的排比来表达，“后来，毛主席说话了。毛主席每天都在说话，他说：‘要文斗，不要武斗。’于是人们放下了手里的刀，手里的棍子；毛主席接着说：‘要复课闹革命。’于是一乐、二乐、三乐背上去学校了，学校重新开始上课。又过去了一些日子，毛主席来到天安门城楼上，他举起右手向西一挥，对千百万的学生说：‘知识青年到农村去，接受贫下中农的再教育，很有必要。’”毛主席轻轻松松的一句话就能让许玉兰们免于皮肉之苦；毛主席的一个小指示，就能让孩子们回到校园；毛主席的再一个突发奇想，全国的城市青年就背井离乡去了农村。这样离奇荒诞的事情都真实地发生过了，历史怎么会、还会不会进入这种状态呢？余华给我们的问题藏在他的轻描淡写之中。<br>　　<br>　　二、对人物内心的刻画<br>　　余华认为经过八十年代多篇短篇小说的写作，他解决了一个非常困难的问题，就是心理描写。他意识到真正优秀的心理描写都是不写心理的，这个观点他找到一些例子来说明，比如海明威在短篇小说《白象似的群山》中用两个人的对话来写内心；比如陀思妥耶夫斯基的《罪与罚》用人物的动作和视线来写内心，都非常成功。那么余华的这个观点在《许三观卖血记》中是如何体现的呢？我撷取了几个片断来分析：<br>　　<br>　　1。用人物的视线来写内心<br>　　开头写许三观在四叔家屋顶上见到桂花母女俩，“然后两个女人一前一后地走了过去，两个女人的屁股都很大，许三观从上面看下去，觉得她们的屁股和大腿区分起来不清楚。”这里写出来的是许三观眼中所见女人的屁股很大，而没有写出来的是他的心理，妙的是我们通过许三观的所见就能自然而然地知道他在想什么，不外乎是“我是不是该有个老婆了”。<br>　　<br>　　再举一例，“许玉兰看着他们把自己的家一点一点地搬空了，当她给他们烧开了水，冲了七杯茶，桌子已经没有了，她不知道茶水该往什么地方放了，她看到许三观正帮着他们把吃饭和孩子做作业的桌子搬出去、搬到板车上。然后可能因为刚才过于用力，许三观站在那里呼呼地喘着粗气，伸手擦着脸上的汗。”许玉兰见到的这些细节无一不在写她心中备受煎熬、痛苦辛酸的感受。<br>　　<br>　　2。用人物的动作来写内心<br>　　写许三观为了给一乐治病在不同的地方卖血，卖血之前需要喝大量的水，在一个叫做林浦的地方，“他从包裹里拿出了一只碗，将河面上的水刮到一旁，舀起一碗下面的河水，他看到林浦的河东在碗里有些发绿，他喝了一口，冰冷刺骨的河水进入胃里时，使他浑身哆嗦。他用袖子抹了抹嘴巴后，仰起脖子一口将碗里的水全部喝了下去，然后他双手抱住自己猛烈地抖动了几下。过了一会儿，觉得胃里的温暖慢慢地回来了，他再舀起一碗河水，再次一口喝了下去，接着他再次抱住自己抖动起来。”这一连串的动作描写非常紧凑，让读者不由自主身临其境般地经历许三观的行动，继而是他的心理。虽未曾写一个字的心理描写，却无一不是心理揭示。<br>　　<br>　　3。用人物的语言来写内心<br>　　用对话来推动情节，用对话来表现人物，这应该是《许三观卖血记》最突出的特点了。透过一段一段近乎独白的人物语言，作为读者的我们像是透过显微镜在看人物的内心，其直接剖白和纤毫毕现带来的阅读感受是任何直接的心理描写所无法给与的。举例说明之：<br>　　<br>　　何小勇被车撞伤住院的时候，许三观见人就说““这叫恶有恶报，善有善报，做了坏事不肯承认，”以为别就不知道了，老天爷的眼睛可是看得清清楚楚。老天爷要想罚你了，别说是被车撞，就是好端端地走在屋檐下，瓦片都会飞下来砸你的脑袋；就是好端端地走在桥上，桥也会场到河里去。你们再来看看我，身强力壮，脸色红润，虽然日子过得穷过得苦，可我身体好，身体就是本钱，这可是老天爷奖我的，……”“说起来我做了十三年的乌龟，可你们看看一乐，对我有多亲，比二乐、三乐还亲，平日里有什么好吃的，总要间我：爹，你吃不吃。二乐和三乐这两个小崽子有好吃的，从来不问我。一乐对我好，为什么？也是老天爷奖我的……”“所以，做人要多行善事，不行恶事。做了恶事的话，若不马上改正过来，就要像何小勇一样，遭老天爷的罚，老天爷罚起人来可是一点都不留情面。都是把人往死里罚，那个何小勇躺在医院里面，还不知道死活呢。”这一连串的人物独白淋漓尽致地把许三观的心理层层剖析，其一，何小勇遭此横祸他非常高兴；其二，虽非亲生的一乐对他这个后爹非常好；其三，他这些年来因为何小勇与许玉兰的关系自己成了乌龟所受的屈辱和怨气终于得到释放；其四，老天爷惩恶扬善是世间公理。如此种种，一个实实在在的城市小民形象又一次得到加强，读者感觉到，与许三观的心理距离又近了一些。<br>　　<br>　　三、对体裁结构的选取<br>　　余华是从写短篇小说开始文学道路的，和大多数作家的经历差不多，都是通过多篇短篇小说的锻炼之后尝试中篇与长篇，然后再选择自己最能胜任和得心应手的体裁篇幅进行集中的创作。《许三观卖血记》虽然从篇幅上来说是长篇小说，却和传统的长篇小说有显著的差别。传统的长篇小说如《红楼梦》，涉及到的人物众多，之间关系极其复杂，由此而展开的情节更是错综复杂，阅读产生的感觉是立体的，既有横向的铺排，又有纵向的延伸。而《许三观卖血记》却多多少少有些反其道而行，涉及到的人物非常之少，有名字出过场的人物不超过20个，而重点人物可以说只有许三观一个人，整个的场景也集中在江南的一个小城，没有怎样实质性的转移，可以说，余华故意压缩了横向的铺排，而把所有的力量都集中起来进行纵向的挖掘，具体的表现手法就是——典型情节的不断重复。为什么选择这样做呢？我认为原因包括这几点：<br>　　<br>　　1。余华很清楚地知道自己长于细节描写，于是用不断重复的细节描写一次又一次的加强要表现的内容。小说一共写了许三观的十二次卖血，一次用在娶妻，七次为一乐，一次为二乐，一次为全家，一次为私情，最后一次未卖成的是为自己。虽然写了十二次的卖血，却几乎每一次都有不同的原因、不同的场景设置、不同的结果。在这样明里是重复，暗中却步步加强的推进中，小说的主题得到空前的强化，人物也越来越立体地出现在读者面前。<br>　　<br>　　还有一些重复的细节包括，得知自己身世的一乐再三拒绝帮助母亲做事，三番两次和李血头套近乎的举动。<br>　　<br>　　2。他认识到短篇小说暴风雨般的力量可以通过非简单重复得以运用到长篇的写作中，使长篇的纵深感更加强烈。何以见得作者在使用短篇小说的手法？看人物就知道了。在短篇小说中，作者无需顾及太多的人物，因此与主题不相关的人物就一笔带过，甚至略去他们的形貌和身份。《许三观卖血记》里面有大量这样的人物，每当作者需要主要人物知道什么消息的时候，总会重复使用“有人说”“他们说”“人们说”制造出推动情节发展的渠道。短篇小说的优势悉数运用到长篇小说中去，造成了正面的错位效果，这在其他长篇小说作品中并不常见。<br>　　<br>　　3。重复是喜剧的一个重要元素，在重复的过程中人的机械化得以彰显，从而引发一种近似于自嘲的含着泪的笑。余华在《许三观卖血记》中尝试用类喜剧的方式去解释痛苦、消解痛苦，于是选择用重复来制造这样一种效果，结果证明是很有效的。很经典的例子是许玉兰的哭叫。一种是她三次生产的时候对许三观的破口大骂，第一次骂很久才生出来，第二次骂了一半就产出，第三次已经顺利生产还不知道仍在叫骂。还有一种就是她坐在自家门坎上的嚎哭，“许玉兰摸了一把眼泪，像是甩鼻涕似的甩了出去，她摇着头说：‘我前世造了什么孽呵？我一没有守寡，二没有改嫁，三没有偷汉，可他们说我三个儿子有两个爹，我前世造了什么孽啊？我三个儿子明明只有一个爹，他们们说有两个爹……’许三观看到许玉兰坐到门槛上一哭，脑袋里就嗡嗡叫起来，他在许玉兰的背后喊：‘你回来，你别坐在门槛上，你哭什么？你喊什么？你这个女人没心没肺，这事你能哭吗？这事你能喊吗？你回来……’”，刚开始人们听了还跑过来看热闹，后来日子久了，“许玉兰这时候的哭诉已经没有了吸引力，她把同样的话说了几遍，她的声音由于用力过久，正在逐渐地失去水分，没有了清脆的弹性，变得沙哑和干涸。她的手臂在挥动手绢时开始迟缓了，她喘气的声音越来越重。她的邻居四散而去，像是戏院已经散场。她的丈夫也走开了，许三观对许玉兰的哭诉早就习以为常，因此他走开时仿佛许玉兰不是在哭，而是坐在门口织线衣。然后，二乐和三乐也走开了，这两个孩子倒不是对母亲越来越疲惫的哭诉失去了兴趣，而是看到别人都走开了，他们的父亲也走开了，所以他们也走开了。”这样的描写和鲁迅先生笔下的祥林嫂有惊人的相似之处，都在看似不经意的回环往复中勾起读者带着泪的笑。<br>　　<br>　　4。重复带来的一个结果就是事件的仪式化，一旦仪式化，再平常的事情都被提升到精神层面，从而进入人的心理层面，成为一个寄托，这样的心理经历相信大多数人都会有。文本中卖血之前的喝水，卖血时向血头的行贿，卖血之后吃炒猪肝喝黄酒，不断地在同中有异的场合下反复刻画，把喝水、吃猪肝和喝酒变成了与卖血这件关系到全家身家性命的大事联系在一起，以至于许三观最后一次去卖血，就是因为“想吃一盘炒猪肝，我想喝二两黄酒，我想卖了血以后就去吃炒猪肝，就去喝黄酒……。”至此，作者成功地对卖血这件事做到了仪式化的提炼。<br>　　<br>　　四、总结<br>　　《许三观卖血记》较为成功的讲述了又一个“活着”的故事，作者有意减轻历史感，用非直接手法刻画真实内心，并且运用深化重复的方法营造有别于一般长篇小说的作品。如作者所言，写作《许三观卖血记》的缘起是在街上看到一个走在人群中独自泪流满面的白发老者，他不知这老者为什么会有那么悲伤的哭泣，一直念念不忘。后来偶然机会忆起曾经听闻的一个血头的故事，余华想出了这样的结尾：老者因为卖血卖不出去，独自走在阳光灿烂的街上泪流满面。于是他动笔了。<br>　　<br>　　五、《许三观卖血记》及其他<br>　　这是一部承上启下的作品。说它承上，是相对于《活着》而言，与《活着》相比，《许三观卖血记》更加贴近在现实中能辨出模样的真实地人，他遭遇的灾难是现实中人们都会遭遇到的，读者在阅读过程中看到许三观的选择和做法，会不由自主地想，“换作是我该怎样做”，而大多数时候人们会因为无法做到许三观那样忍辱负重而心生崇敬之情。说它启下，是相对于新作《兄弟》而言，从《许三观卖血记》中，可以看到《兄弟》模糊不清的影子。比如许三观和一乐的父子之情，比如一乐、二乐、三乐之间的兄弟之情，都像是没有来得及展开叙述的《兄弟》中的情谊。再比如写作手法，在《许三观卖血记》中，余华非常自由的穿梭于不同的叙述角度，显得武断却让读者没有办法对他生气，《兄弟》中，这样的穿梭显得更加频繁与刻意，而读者似乎颇能接受这样的安排，伸长了脖子等着看下面的内容。我对于这样的穿梭其实并不非常喜欢，然而因为想不到比它更好的方法也只能很无奈地权且接受了。<br>　　<br>　　从一些粗浅的阅读可以发现，余华一直在摸索自己创作的道路。如他自己所言，八十年代的作品中他把人物当成符号来运用，认为人物与其他物品并无不同，于是他像个暴君一样把自己要说的话通过人物强行说出来，并且不断用暴力和血腥来揭发痛苦的存在。到九十年代，余华的三个长篇让人们以为他反叛了先锋文学，余华自己说，他在《呼喊与细雨》中感觉到人物会说自己的话，在写《活着》的时候无法再将自己的意志加诸于人物，并且让人物自己说话的叙述角度让他感到非常舒服，而在《许三观卖血记》中，人物完全是自己在说话了，并且余华认为他克服了对话的难题。可是我个人觉得《许三观卖血记》中，表面看来，人物的语言的确很符合人物身份，然而深究下去，这些语言却不像是我们所见的现实中的人说得出来的，而是游离于我们所见的现实、栖身于余华认为的“真正的现实”的非常纯真的人才说的出来的。换句话说，余华给我们描绘的并不是评论认为的现实，而是不会实现的“真正的现实”。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="书籍概要">书籍概要</h3><h5 id="书名">书名</h5><p>《许三观卖血记》</p>
<h5 id="作者">作者</h5><p>余华</p>
<h5 id="作者简介">作者简介</h5><p>余华，1960年4月3日生于浙江杭州，3岁时随父母迁至]]>
    </summary>
    
      <category term="电影" scheme="https://wustrive2008.github.io/tags/%E7%94%B5%E5%BD%B1/"/>
    
      <category term="小说" scheme="https://wustrive2008.github.io/tags/%E5%B0%8F%E8%AF%B4/"/>
    
      <category term="余华" scheme="https://wustrive2008.github.io/tags/%E4%BD%99%E5%8D%8E/"/>
    
      <category term="许三观卖血记" scheme="https://wustrive2008.github.io/tags/%E8%AE%B8%E4%B8%89%E8%A7%82%E5%8D%96%E8%A1%80%E8%AE%B0/"/>
    
      <category term="读书笔记" scheme="https://wustrive2008.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>